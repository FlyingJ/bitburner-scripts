{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":65412,\"hp\":150059,\"max_hp\":150059,\"strength\":1130687,\"defense\":1500494,\"dexterity\":269888,\"agility\":667509,\"charisma\":137306,\"intelligence\":117,\"hacking_chance_mult\":128.00497534486718,\"hacking_speed_mult\":195.57616706250136,\"hacking_money_mult\":602.9281796179182,\"hacking_grow_mult\":99.36979199408626,\"hacking_exp\":29753505559.277557,\"strength_exp\":86837.13751927282,\"defense_exp\":95486.29961812007,\"dexterity_exp\":247464.02311097947,\"agility_exp\":150771.3088681931,\"charisma_exp\":280018.3447052334,\"intelligence_exp\":20058.90381185754,\"hacking_mult\":457.65208258158685,\"strength_mult\":9843.573340270368,\"defense_mult\":12826.933260321548,\"dexterity_mult\":1952.3941022601834,\"agility_mult\":5249.112333198654,\"charisma_mult\":681.6755791178972,\"hacking_exp_mult\":402.17736965092325,\"strength_exp_mult\":185.35060109365634,\"defense_exp_mult\":203.88566120302195,\"dexterity_exp_mult\":257.9153614218228,\"agility_exp_mult\":185.27710839217488,\"charisma_exp_mult\":443.90886643611503,\"company_rep_mult\":734.307259769363,\"faction_rep_mult\":84.20267287457295,\"money\":92271237234.23543,\"city\":\"Sector-12\",\"location\":\"Travel Agency\",\"jobs\":{},\"companyName\":\"\",\"currentServer\":\"home\",\"purchasedServers\":[],\"hacknetNodes\":[\"hacknet-node-0\",\"hacknet-node-1\",\"hacknet-node-2\",\"hacknet-node-3\",\"hacknet-node-4\",\"hacknet-node-5\",\"hacknet-node-6\",\"hacknet-node-7\",\"hacknet-node-8\",\"hacknet-node-9\",\"hacknet-node-10\",\"hacknet-node-11\",\"hacknet-node-12\",\"hacknet-node-13\",\"hacknet-node-14\",\"hacknet-node-15\",\"hacknet-node-16\",\"hacknet-node-17\"],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":18874368,\"hashes\":604426.7450612804,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":89,\"Exchange for Bladeburner SP\":19,\"Generate Coding Contract\":0}}},\"factions\":[\"Illuminati\",\"Daedalus\",\"The Covenant\",\"ECorp\",\"MegaCorp\",\"Bachman & Associates\",\"Blade Industries\",\"Clarke Incorporated\",\"Four Sigma\",\"KuaiGong International\",\"Fulcrum Secret Technologies\",\"Sector-12\",\"The Syndicate\",\"Slum Snakes\",\"Netburners\",\"Bladeburners\",\"Church of the Machine God\"],\"factionInvitations\":[],\"queuedAugmentations\":[],\"augmentations\":[{\"name\":\"NeuroFlux Governor\",\"level\":302},{\"level\":1,\"name\":\"Stanek's Gift - Genesis\"},{\"level\":1,\"name\":\"Nuoptimal Nootropic Injector Implant\"},{\"level\":1,\"name\":\"Speech Processor Implant\"},{\"level\":1,\"name\":\"Neuregen Gene Modification\"},{\"level\":1,\"name\":\"Neuralstimulator\"},{\"level\":1,\"name\":\"DataJack\"},{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Kernel Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node Core Direct-Neural Interface\"},{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":1,\"name\":\"Speech Enhancement\"},{\"level\":1,\"name\":\"ADR-V1 Pheromone Gene\"},{\"level\":1,\"name\":\"Social Negotiation Assistant (S.N.A)\"},{\"level\":1,\"name\":\"Nanofiber Weave\"},{\"level\":1,\"name\":\"Neuroreceptor Management Implant\"},{\"level\":1,\"name\":\"Augmented Targeting I\"},{\"level\":1,\"name\":\"Augmented Targeting II\"},{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"EsperTech Bladeburner Eyewear\"},{\"level\":1,\"name\":\"The Blade's Simulacrum\"},{\"level\":1,\"name\":\"EMS-4 Recombination\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"Neurotrainer II\"},{\"level\":1,\"name\":\"Embedded Netburner Module\"},{\"level\":1,\"name\":\"Neural-Retention Enhancement\"},{\"level\":1,\"name\":\"CRTX42-AA Gene Modification\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen III\"},{\"level\":1,\"name\":\"Synfibril Muscle\"},{\"level\":1,\"name\":\"Embedded Netburner Module Analyze Engine\"},{\"level\":1,\"name\":\"Synthetic Heart\"},{\"level\":1,\"name\":\"NEMEAN Subdermal Weave\"},{\"level\":1,\"name\":\"Embedded Netburner Module Direct Memory Access Upgrade\"},{\"level\":1,\"name\":\"QLink\"},{\"level\":1,\"name\":\"The Red Pill\"},{\"level\":1,\"name\":\"Augmented Targeting III\"},{\"level\":1,\"name\":\"Graphene Bone Lacings\"},{\"level\":1,\"name\":\"SPTN-97 Gene Modification\"},{\"level\":1,\"name\":\"Combat Rib I\"},{\"level\":1,\"name\":\"Combat Rib II\"},{\"level\":1,\"name\":\"Combat Rib III\"},{\"level\":1,\"name\":\"Bionic Spine\"},{\"level\":1,\"name\":\"Bionic Legs\"},{\"level\":1,\"name\":\"HyperSight Corneal Implant\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core Implant\"},{\"level\":1,\"name\":\"PC Direct-Neural Interface\"},{\"level\":1,\"name\":\"PC Direct-Neural Interface Optimization Submodule\"},{\"level\":1,\"name\":\"Neotra\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core V2 Upgrade\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core V3 Upgrade\"},{\"level\":1,\"name\":\"Stanek's Gift - Awakening\"},{\"level\":1,\"name\":\"Stanek's Gift - Serenity\"},{\"level\":1,\"name\":\"Neurotrainer III\"},{\"level\":1,\"name\":\"ADR-V2 Pheromone Gene\"},{\"level\":1,\"name\":\"FocusWire\"},{\"level\":1,\"name\":\"Graphene Bionic Legs Upgrade\"},{\"level\":1,\"name\":\"CordiARC Fusion Reactor\"},{\"level\":1,\"name\":\"Enhanced Social Interaction Implant\"},{\"level\":1,\"name\":\"LuminCloaking-V1 Skin Implant\"},{\"level\":1,\"name\":\"LuminCloaking-V2 Skin Implant\"},{\"level\":1,\"name\":\"SmartSonar Implant\"},{\"level\":1,\"name\":\"HemoRecirculator\"},{\"level\":1,\"name\":\"BrachiBlades\"},{\"level\":1,\"name\":\"Power Recirculation Core\"},{\"level\":1,\"name\":\"The Shadow's Simulacrum\"},{\"level\":1,\"name\":\"PCMatrix\"},{\"level\":1,\"name\":\"SmartJaw\"},{\"level\":1,\"name\":\"Neuronal Densification\"},{\"level\":1,\"name\":\"nextSENS Gene Modification\"},{\"level\":1,\"name\":\"ORION-MKIV Shoulder\"},{\"level\":1,\"name\":\"Hyperion Plasma Cannon V1\"},{\"level\":1,\"name\":\"BLADE-51b Tesla Armor\"},{\"level\":1,\"name\":\"BLADE-51b Tesla Armor: IPU Upgrade\"},{\"level\":1,\"name\":\"Vangelis Virus\"},{\"level\":1,\"name\":\"BLADE-51b Tesla Armor: Power Cells Upgrade\"},{\"level\":1,\"name\":\"Blade's Runners\"},{\"level\":1,\"name\":\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\"},{\"level\":1,\"name\":\"Hyperion Plasma Cannon V2\"},{\"level\":1,\"name\":\"I.N.T.E.R.L.I.N.K.E.D\"},{\"level\":1,\"name\":\"GOLEM Serum\"},{\"level\":1,\"name\":\"BLADE-51b Tesla Armor: Unibeam Upgrade\"},{\"level\":1,\"name\":\"Vangelis Virus 3.0\"},{\"level\":1,\"name\":\"BLADE-51b Tesla Armor: Omnibeam Upgrade\"},{\"level\":1,\"name\":\"Bionic Arms\"},{\"level\":1,\"name\":\"Photosynthetic Cells\"},{\"level\":1,\"name\":\"ECorp HVMind Implant\"},{\"level\":1,\"name\":\"Graphene Bionic Spine Upgrade\"},{\"level\":1,\"name\":\"Enhanced Myelin Sheathing\"},{\"level\":1,\"name\":\"Artificial Bio-neural Network Implant\"},{\"level\":1,\"name\":\"PC Direct-Neural Interface NeuroNet Injector\"},{\"level\":1,\"name\":\"TITN-41 Gene-Modification Injection\"}],\"sourceFiles\":[{\"lvl\":3,\"n\":1},{\"lvl\":3,\"n\":2},{\"lvl\":3,\"n\":3},{\"lvl\":3,\"n\":4},{\"lvl\":3,\"n\":5},{\"lvl\":3,\"n\":6},{\"lvl\":2,\"n\":12},{\"lvl\":3,\"n\":7},{\"lvl\":1,\"n\":8},{\"lvl\":1,\"n\":9},{\"lvl\":1,\"n\":10},{\"lvl\":1,\"n\":11},{\"lvl\":1,\"n\":13}],\"numPeopleKilled\":0,\"karma\":-377,\"crime_money_mult\":78.47061038247054,\"crime_success_mult\":43.67060056067925,\"isWorking\":false,\"focus\":true,\"workType\":\"\",\"workCostMult\":3,\"workExpMult\":2,\"currentWorkFactionName\":\"\",\"currentWorkFactionDescription\":\"\",\"workHackExpGainRate\":0,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":0,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":0,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":0,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":25,\"graftAugmentationName\":\"\",\"timeWorkedGraftAugmentation\":0,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":0,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":72000000,\"work_money_mult\":91.56940527939621,\"hacknet_node_money_mult\":70.66351447192247,\"hacknet_node_purchase_cost_mult\":0.009918589168321699,\"hacknet_node_ram_cost_mult\":0.012965476037021828,\"hacknet_node_core_cost_mult\":0.012965476037021828,\"hacknet_node_level_cost_mult\":0.011020654631468554,\"hasWseAccount\":true,\"hasTixApiAccess\":true,\"has4SData\":false,\"has4SDataTixApi\":false,\"gang\":null,\"corporation\":{\"ctor\":\"Corporation\",\"data\":{\"name\":\"CO\",\"divisions\":[{\"ctor\":\"Industry\",\"data\":{\"name\":\"AG\",\"type\":\"Agriculture\",\"sciResearch\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Scientific Research\",\"qty\":6089.21633107969,\"qlt\":0,\"dmd\":0,\"dmdR\":[0,0],\"cmp\":0,\"cmpR\":[0,0],\"mv\":0,\"mku\":0,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":0,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"researched\":{\"Hi-Tech R&D Laboratory\":true,\"Bulk Purchasing\":true,\"Market-TA.I\":true,\"AutoBrew\":true,\"AutoPartyManager\":true,\"Automatic Drug Administration\":true,\"Market-TA.II\":true,\"Self-Correcting Assemblers\":true,\"Overclock\":true,\"Sti.mu\":true,\"JoyWire\":true,\"HRBuddy-Recruitment\":true,\"Drones\":true,\"HRBuddy-Training\":true,\"Go-Juice\":true,\"CPH4 Injections\":true,\"Drones - Assembly\":true,\"Drones - Transport\":true},\"reqMats\":{\"Water\":0.5,\"Energy\":0.5},\"prodMats\":[\"Plants\",\"Food\"],\"products\":{},\"makesProducts\":false,\"awareness\":1.6420857572503801e+35,\"popularity\":6.58732046642674e+34,\"startingCost\":40000000000,\"reFac\":0.72,\"sciFac\":0.5,\"hwFac\":0.2,\"robFac\":0.3,\"aiFac\":0.3,\"advFac\":0.04,\"prodMult\":359.88655502283524,\"upgrades\":[0,57],\"state\":\"PRODUCTION\",\"newInd\":false,\"offices\":{\"Aevum\":0,\"Chongqing\":0,\"Sector-12\":{\"ctor\":\"OfficeSpace\",\"data\":{\"minEne\":0,\"maxEne\":110,\"minHap\":0,\"maxHap\":110,\"maxMor\":110,\"employees\":[{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"4bLU5Qh\",\"mor\":110,\"hap\":109.99861032812149,\"ene\":109.99861032812149,\"int\":67,\"cha\":77,\"exp\":96.16000000000008,\"cre\":83,\"eff\":91,\"sal\":1236,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"lUdrKlO\",\"mor\":110,\"hap\":109.99707746371419,\"ene\":109.99707746371419,\"int\":54,\"cha\":55,\"exp\":53.15700000000008,\"cre\":51,\"eff\":90,\"sal\":903,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"pn8Gle5\",\"mor\":110,\"hap\":109.99960103536756,\"ene\":109.99960103536756,\"int\":87,\"cha\":82,\"exp\":77.15700000000008,\"cre\":55,\"eff\":55,\"sal\":1062,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"j4yhcO9\",\"mor\":110,\"hap\":109.99759940727441,\"ene\":109.99759940727441,\"int\":52,\"cha\":62,\"exp\":84.15700000000008,\"cre\":50,\"eff\":58,\"sal\":912,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"IxQUQWE\",\"mor\":110,\"hap\":109.99765298949431,\"ene\":109.99765298949431,\"int\":66,\"cha\":100,\"exp\":76.15700000000008,\"cre\":80,\"eff\":73,\"sal\":1179,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"E4Rbczx\",\"mor\":110,\"hap\":109.99749864580328,\"ene\":109.99749864580328,\"int\":73,\"cha\":62,\"exp\":87.15700000000008,\"cre\":62,\"eff\":100,\"sal\":1146,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"C3bndOa\",\"mor\":110,\"hap\":109.99829549650323,\"ene\":109.99829549650323,\"int\":54,\"cha\":80,\"exp\":68.15700000000008,\"cre\":53,\"eff\":80,\"sal\":999,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"LdUUgHy\",\"mor\":110,\"hap\":109.99870842675067,\"ene\":109.99870842675067,\"int\":89,\"cha\":69,\"exp\":52.15700000000008,\"cre\":87,\"eff\":85,\"sal\":1140,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"9uWn4MB\",\"mor\":110,\"hap\":109.99827713727787,\"ene\":109.99827713727787,\"int\":53,\"cha\":68,\"exp\":58.15700000000008,\"cre\":78,\"eff\":77,\"sal\":996,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"wFxTBiE\",\"mor\":110,\"hap\":109.99799685127198,\"ene\":109.99799685127198,\"int\":61,\"cha\":94,\"exp\":66.15700000000008,\"cre\":74,\"eff\":79,\"sal\":1116,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"0A29gUL\",\"mor\":110,\"hap\":109.99840561438408,\"ene\":109.99840561438408,\"int\":87,\"cha\":93,\"exp\":62.15700000000008,\"cre\":68,\"eff\":98,\"sal\":1218,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"Cs91KCX\",\"mor\":110,\"hap\":109.99753181672092,\"ene\":109.99753181672092,\"int\":83,\"cha\":62,\"exp\":66.15700000000008,\"cre\":95,\"eff\":60,\"sal\":1092,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"egyQlz4\",\"mor\":110,\"hap\":109.99978922195416,\"ene\":109.99978922195416,\"int\":68,\"cha\":91,\"exp\":60.15700000000008,\"cre\":87,\"eff\":91,\"sal\":1185,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"wDGAaNl\",\"mor\":110,\"hap\":109.99887970137159,\"ene\":109.99887970137159,\"int\":78,\"cha\":73,\"exp\":69.15700000000008,\"cre\":79,\"eff\":72,\"sal\":1107,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"CO9ABue\",\"mor\":110,\"hap\":109.99965988260278,\"ene\":109.99965988260278,\"int\":63,\"cha\":95,\"exp\":64.15700000000008,\"cre\":63,\"eff\":53,\"sal\":1008,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"1zHUuSG\",\"mor\":110,\"hap\":109.99815585397445,\"ene\":109.99815585397445,\"int\":80,\"cha\":99,\"exp\":61.15700000000008,\"cre\":89,\"eff\":79,\"sal\":1218,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"ztgdlVD\",\"mor\":110,\"hap\":109.99802862629352,\"ene\":109.99802862629352,\"int\":78,\"cha\":82,\"exp\":61.15700000000008,\"cre\":93,\"eff\":51,\"sal\":1089,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"iJkBwxa\",\"mor\":110,\"hap\":109.99767823885306,\"ene\":109.99767823885306,\"int\":95,\"cha\":58,\"exp\":85.15700000000008,\"cre\":54,\"eff\":50,\"sal\":1020,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"oSvyN9p\",\"mor\":110,\"hap\":109.99999988889829,\"ene\":109.99999988889829,\"int\":88,\"cha\":71,\"exp\":102.15700000000008,\"cre\":62,\"eff\":51,\"sal\":1116,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"w1oBtJ2\",\"mor\":110,\"hap\":109.99972704612897,\"ene\":109.99972704612897,\"int\":57,\"cha\":86,\"exp\":54.15700000000008,\"cre\":72,\"eff\":86,\"sal\":1059,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"r3BDpAV\",\"mor\":110,\"hap\":109.99975515085602,\"ene\":109.99975515085602,\"int\":52,\"cha\":89,\"exp\":61.15700000000008,\"cre\":81,\"eff\":72,\"sal\":1059,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"MhIDHOl\",\"mor\":110,\"hap\":109.99840113453234,\"ene\":109.99840113453234,\"int\":50,\"cha\":61,\"exp\":100.15400000000008,\"cre\":87,\"eff\":60,\"sal\":1068,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"yaHZ59Y\",\"mor\":110,\"hap\":109.99743062244595,\"ene\":109.99743062244595,\"int\":70,\"cha\":61,\"exp\":78.15400000000008,\"cre\":62,\"eff\":96,\"sal\":1095,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"X3lTykl\",\"mor\":110,\"hap\":109.99788660532768,\"ene\":109.99788660532768,\"int\":85,\"cha\":87,\"exp\":88.15400000000008,\"cre\":60,\"eff\":76,\"sal\":1182,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"fNlNyMl\",\"mor\":110,\"hap\":109.99848911056007,\"ene\":109.99848911056007,\"int\":58,\"cha\":67,\"exp\":80.15400000000008,\"cre\":80,\"eff\":67,\"sal\":1050,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"bLEHotf\",\"mor\":110,\"hap\":109.99917783450698,\"ene\":109.99917783450698,\"int\":72,\"cha\":59,\"exp\":102.15400000000008,\"cre\":66,\"eff\":85,\"sal\":1146,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"vtDcchS\",\"mor\":110,\"hap\":109.99750956335448,\"ene\":109.99750956335448,\"int\":88,\"cha\":72,\"exp\":80.15400000000008,\"cre\":99,\"eff\":72,\"sal\":1227,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"b4dsDPn\",\"mor\":110,\"hap\":109.99897380819336,\"ene\":109.99897380819336,\"int\":88,\"cha\":86,\"exp\":89.15400000000008,\"cre\":53,\"eff\":88,\"sal\":1206,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"S4eZN0z\",\"mor\":110,\"hap\":109.99941632010342,\"ene\":109.99941632010342,\"int\":71,\"cha\":78,\"exp\":82.15400000000008,\"cre\":86,\"eff\":67,\"sal\":1146,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"II6xKQy\",\"mor\":110,\"hap\":109.99753531017039,\"ene\":109.99753531017039,\"int\":96,\"cha\":78,\"exp\":80.15400000000008,\"cre\":72,\"eff\":81,\"sal\":1215,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"sAUKu8p\",\"mor\":110,\"hap\":109.99994416780488,\"ene\":109.99994416780488,\"int\":90,\"cha\":100,\"exp\":81.15400000000008,\"cre\":83,\"eff\":97,\"sal\":1347,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"ip2R4MA\",\"mor\":110,\"hap\":109.99966559108145,\"ene\":109.99966559108145,\"int\":72,\"cha\":100,\"exp\":53.15400000000008,\"cre\":75,\"eff\":79,\"sal\":1131,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"VSiSdR2\",\"mor\":110,\"hap\":109.99729790382855,\"ene\":109.99729790382855,\"int\":76,\"cha\":55,\"exp\":56.15400000000008,\"cre\":95,\"eff\":52,\"sal\":996,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"AUcdzwn\",\"mor\":110,\"hap\":109.99797122532587,\"ene\":109.99797122532587,\"int\":74,\"cha\":74,\"exp\":64.15400000000008,\"cre\":56,\"eff\":66,\"sal\":996,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"Pj7194r\",\"mor\":110,\"hap\":109.99924902690165,\"ene\":109.99924902690165,\"int\":73,\"cha\":66,\"exp\":70.15400000000008,\"cre\":54,\"eff\":51,\"sal\":936,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"I1AFnHb\",\"mor\":110,\"hap\":109.99903364720002,\"ene\":109.99903364720002,\"int\":94,\"cha\":77,\"exp\":69.15400000000008,\"cre\":68,\"eff\":82,\"sal\":1164,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"zHiq2eR\",\"mor\":110,\"hap\":109.9989950822597,\"ene\":109.9989950822597,\"int\":76,\"cha\":93,\"exp\":93.15400000000008,\"cre\":96,\"eff\":56,\"sal\":1236,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"kV2fclS\",\"mor\":110,\"hap\":109.99900246641836,\"ene\":109.99900246641836,\"int\":84,\"cha\":94,\"exp\":75.15400000000008,\"cre\":63,\"eff\":55,\"sal\":1107,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"7tTHu8C\",\"mor\":110,\"hap\":109.99907629483768,\"ene\":109.99907629483768,\"int\":68,\"cha\":84,\"exp\":88.15400000000008,\"cre\":50,\"eff\":92,\"sal\":1140,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"sWx0Bls\",\"mor\":110,\"hap\":109.99923799765378,\"ene\":109.99923799765378,\"int\":99,\"cha\":59,\"exp\":69.15400000000008,\"cre\":71,\"eff\":86,\"sal\":1146,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"1eXnu5x\",\"mor\":110,\"hap\":109.99886319180182,\"ene\":109.99886319180182,\"int\":62,\"cha\":71,\"exp\":81.15100000000008,\"cre\":53,\"eff\":75,\"sal\":1020,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"itmzIsR\",\"mor\":110,\"hap\":109.99756612308136,\"ene\":109.99756612308136,\"int\":51,\"cha\":66,\"exp\":55.15100000000008,\"cre\":51,\"eff\":88,\"sal\":927,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"kKSBgj5\",\"mor\":110,\"hap\":109.99782509009592,\"ene\":109.99782509009592,\"int\":71,\"cha\":56,\"exp\":85.15100000000008,\"cre\":85,\"eff\":59,\"sal\":1062,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"AghTWJD\",\"mor\":110,\"hap\":109.99921457015381,\"ene\":109.99921457015381,\"int\":75,\"cha\":71,\"exp\":100.15100000000008,\"cre\":75,\"eff\":84,\"sal\":1209,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"kgfhzrZ\",\"mor\":110,\"hap\":109.99839812032398,\"ene\":109.99839812032398,\"int\":51,\"cha\":63,\"exp\":73.15100000000008,\"cre\":91,\"eff\":94,\"sal\":1110,\"loc\":\"\",\"pos\":\"Operations\"}}],\"employeeProd\":{\"Operations\":1254452.1593990654,\"Engineer\":232395.76331009436,\"Business\":130097.66132298787,\"Management\":267634.17648680764,\"Research & Development\":0,\"total\":1884579.760518955,\"Unassigned\":0},\"employeeJobs\":{\"Operations\":30,\"Engineer\":5,\"Business\":5,\"Management\":5,\"Research & Development\":0,\"Training\":0,\"Unassigned\":0,\"total\":45},\"loc\":\"Sector-12\",\"size\":45}},\"New Tokyo\":0,\"Ishima\":0,\"Volhaven\":0},\"lastCycleRevenue\":75982585185.8533,\"lastCycleExpenses\":679604565.1135808,\"thisCycleRevenue\":0,\"thisCycleExpenses\":6796629048.924356,\"warehouses\":{\"Aevum\":0,\"Chongqing\":0,\"Sector-12\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":61,\"sizeUsed\":493585.4779704905,\"smartSupplyEnabled\":true,\"smartSupplyUseLeftovers\":{\"Water\":true,\"Energy\":true,\"Food\":true,\"Plants\":true,\"Metal\":true,\"Hardware\":true,\"Chemicals\":true,\"Drugs\":true,\"Robots\":true,\"AICores\":true,\"RealEstate\":true},\"smartSupplyStore\":388856.909326874,\"loc\":\"Sector-12\",\"size\":921100,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Water\",\"qty\":0,\"qlt\":0,\"dmd\":72.54209783828524,\"dmdR\":[65,85],\"cmp\":50.166730969011354,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":194428.42373155625,\"sll\":0,\"prd\":-194428.42373155625,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1512.8253581623196,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Energy\",\"qty\":0,\"qlt\":0,\"dmd\":87.9696663659631,\"dmdR\":[80,99],\"cmp\":82.77623809336896,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":194428.42373155625,\"sll\":0,\"prd\":-194428.42373155625,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1982.616151103656,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Food\",\"qty\":3888568.4746311293,\"qlt\":2660.208578745435,\"dmd\":78.32366366013126,\"dmdR\":[70,90],\"cmp\":63.781165708280234,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":388856.1554553862,\"prd\":388856.8474631125,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":5073.86900422384,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":true,\"marketTa2Price\":102121.9938139025,\"maxsll\":388856.1554553862}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Plants\",\"qty\":3888568.474631133,\"qlt\":2660.208578745435,\"dmd\":75.46606619104381,\"dmdR\":[20,90],\"cmp\":49.08792963299353,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":388856.15545538615,\"prd\":388856.8474631125,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":3174.2956294344713,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":true,\"marketTa2Price\":93278.24383148269,\"maxsll\":388856.15545538615}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Metal\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Hardware\",\"qty\":0,\"qlt\":0,\"dmd\":86.61941849022814,\"dmdR\":[80,90],\"cmp\":76.3105090206917,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":8091.859915126682,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Chemicals\",\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Drugs\",\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Robots\",\"qty\":0,\"qlt\":0,\"dmd\":96.52740546876143,\"dmdR\":[80,99],\"cmp\":93.5445682869868,\"cmpR\":[80,99],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":75728.04404721093,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"AICores\":{\"ctor\":\"Material\",\"data\":{\"name\":\"AI Cores\",\"qty\":0,\"qlt\":0,\"dmd\":80.44002942175297,\"dmdR\":[80,99],\"cmp\":80.4849208939566,\"cmpR\":[80,99],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":16294.208573906615,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"RealEstate\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Real Estate\",\"qty\":36500000,\"qlt\":0,\"dmd\":41.7902543409386,\"dmdR\":[5,99],\"cmp\":53.84113560145912,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":75310.3038192112,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}}}}},\"New Tokyo\":0,\"Ishima\":0,\"Volhaven\":0}}}],\"funds\":1e+130,\"revenue\":75982585185.8533,\"expenses\":679604565.1135808,\"fundingRound\":0,\"public\":true,\"totalShares\":1200000000,\"numShares\":1156999999,\"shareSalesUntilPriceUpdate\":999999,\"shareSaleCooldown\":0,\"issueNewSharesCooldown\":174990,\"dividendPercentage\":80,\"dividendTaxPercentage\":35,\"issuedShares\":1,\"sharePrice\":8.504559085408932e+106,\"storedCycles\":5,\"avgProfit\":75302980620.73972,\"state\":{\"ctor\":\"CorporationState\",\"data\":{\"state\":3}},\"unlockUpgrades\":[1,1,1,1,1,1,1,1,1],\"upgrades\":[1500,1500,1500,514,1500,1500,1500,1500,1500,1500],\"upgradeMultipliers\":[46,151,2.5,3.57,151,151,151,151,16,76]}},\"bladeburner\":{\"ctor\":\"Bladeburner\",\"data\":{\"numHosp\":1,\"moneyLost\":0,\"rank\":34923.57573782193,\"maxRank\":34923.57573782193,\"skillPoints\":49,\"totalSkillPoints\":11641,\"teamSize\":0,\"sleeveSize\":0,\"teamLost\":0,\"hpLost\":49,\"storedCycles\":5,\"randomEventCounter\":88,\"actionTimeToComplete\":1,\"actionTimeCurrent\":0,\"actionTimeOverflow\":0,\"action\":{\"ctor\":\"ActionIdentifier\",\"data\":{\"name\":\"Investigation\",\"type\":3}},\"cities\":{\"Aevum\":{\"ctor\":\"City\",\"data\":{\"name\":\"Aevum\",\"pop\":1640038416,\"popEst\":742411199.7029533,\"comms\":104,\"chaos\":3.822176835998976}},\"Chongqing\":{\"ctor\":\"City\",\"data\":{\"name\":\"Chongqing\",\"pop\":2048718153,\"popEst\":854858460.7941567,\"comms\":30,\"chaos\":2.668861799999161}},\"Sector-12\":{\"ctor\":\"City\",\"data\":{\"name\":\"Sector-12\",\"pop\":871197123,\"popEst\":871197123,\"comms\":115,\"chaos\":13.559390000000576}},\"New Tokyo\":{\"ctor\":\"City\",\"data\":{\"name\":\"New Tokyo\",\"pop\":789274134,\"popEst\":1346216355.1911733,\"comms\":18,\"chaos\":0}},\"Ishima\":{\"ctor\":\"City\",\"data\":{\"name\":\"Ishima\",\"pop\":1556280359,\"popEst\":981932606.7622303,\"comms\":145,\"chaos\":2.0167399999991766}},\"Volhaven\":{\"ctor\":\"City\",\"data\":{\"name\":\"Volhaven\",\"pop\":1272039475,\"popEst\":1218267036.9374223,\"comms\":77,\"chaos\":0}}},\"city\":\"Sector-12\",\"skills\":{\"Cyber's Edge\":15,\"Hyperdrive\":18,\"Cloak\":40,\"Short-Circuit\":21,\"Digital Observer\":21,\"Tracer\":21,\"Reaper\":21,\"Evasive System\":21,\"Hands of Midas\":18,\"Blade's Intuition\":21,\"Overclock\":32,\"Datamancer\":44},\"skillMultipliers\":{\"successChanceAll\":1.63,\"successChanceStealth\":3.2,\"successChanceKill\":2.1550000000000002,\"successChanceContract\":1.8399999999999999,\"successChanceOperation\":1.8399999999999999,\"successChanceEstimate\":3.2,\"actionTime\":0.6799999999999999,\"effHack\":1,\"effStr\":1.42,\"effDef\":1.42,\"effDex\":2.6127999999999996,\"effAgi\":2.6127999999999996,\"effCha\":1,\"effInt\":1,\"stamina\":1.3,\"money\":2.8,\"expGain\":2.8},\"staminaBonus\":0,\"maxStamina\":176896.6732381583,\"stamina\":176894.63656925046,\"contracts\":{\"Tracking\":{\"ctor\":\"Contract\",\"data\":{\"name\":\"Tracking\",\"level\":25,\"maxLevel\":25,\"autoLevel\":true,\"baseDifficulty\":132.44995496678814,\"difficultyFac\":1.02,\"rewardFac\":1.041,\"successes\":348,\"failures\":17,\"rankGain\":0.3,\"rankLoss\":0,\"hpLoss\":0.5,\"hpLost\":0,\"isStealth\":true,\"isKill\":false,\"count\":2.7758333333336074,\"weights\":{\"hack\":0,\"str\":0.05,\"def\":0.05,\"dex\":0.35,\"agi\":0.35,\"cha\":0.1,\"int\":0.05},\"decays\":{\"hack\":0,\"str\":0.91,\"def\":0.91,\"dex\":0.91,\"agi\":0.91,\"cha\":0.9,\"int\":1},\"teamCount\":0}},\"Bounty Hunter\":{\"ctor\":\"Contract\",\"data\":{\"name\":\"Bounty Hunter\",\"level\":21,\"maxLevel\":21,\"autoLevel\":true,\"baseDifficulty\":271.0929216051855,\"difficultyFac\":1.04,\"rewardFac\":1.085,\"successes\":258,\"failures\":0,\"rankGain\":0.9,\"rankLoss\":0,\"hpLoss\":1,\"hpLost\":0,\"isStealth\":false,\"isKill\":true,\"count\":1.9631249999985692,\"weights\":{\"hack\":0,\"str\":0.15,\"def\":0.15,\"dex\":0.25,\"agi\":0.25,\"cha\":0.1,\"int\":0.1},\"decays\":{\"hack\":0,\"str\":0.91,\"def\":0.91,\"dex\":0.91,\"agi\":0.91,\"cha\":0.8,\"int\":0.9},\"teamCount\":0}},\"Retirement\":{\"ctor\":\"Contract\",\"data\":{\"name\":\"Retirement\",\"level\":19,\"maxLevel\":19,\"autoLevel\":true,\"baseDifficulty\":205.52823616651557,\"difficultyFac\":1.03,\"rewardFac\":1.065,\"successes\":215,\"failures\":0,\"rankGain\":0.6,\"rankLoss\":0,\"hpLoss\":1,\"hpLost\":0,\"isStealth\":false,\"isKill\":true,\"count\":96.19874999999853,\"weights\":{\"hack\":0,\"str\":0.2,\"def\":0.2,\"dex\":0.2,\"agi\":0.2,\"cha\":0.1,\"int\":0.1},\"decays\":{\"hack\":0,\"str\":0.91,\"def\":0.91,\"dex\":0.91,\"agi\":0.91,\"cha\":0.8,\"int\":0.9},\"teamCount\":0}}},\"operations\":{\"Investigation\":{\"ctor\":\"Operation\",\"data\":{\"name\":\"Investigation\",\"level\":18,\"maxLevel\":18,\"autoLevel\":true,\"baseDifficulty\":395.29156515070264,\"difficultyFac\":1.03,\"rewardFac\":1.07,\"successes\":189,\"failures\":0,\"rankGain\":2.2,\"rankLoss\":0.2,\"hpLoss\":0,\"hpLost\":0,\"isStealth\":true,\"isKill\":false,\"count\":10.891458333329377,\"weights\":{\"hack\":0.25,\"str\":0.05,\"def\":0.05,\"dex\":0.2,\"agi\":0.1,\"cha\":0.25,\"int\":0.1},\"decays\":{\"hack\":0.85,\"str\":0.9,\"def\":0.9,\"dex\":0.9,\"agi\":0.9,\"cha\":0.7,\"int\":0.9},\"teamCount\":0,\"reqdRank\":25}},\"Undercover Operation\":{\"ctor\":\"Operation\",\"data\":{\"name\":\"Undercover Operation\",\"level\":1,\"maxLevel\":1,\"autoLevel\":true,\"baseDifficulty\":512.2181189025965,\"difficultyFac\":1.04,\"rewardFac\":1.09,\"successes\":0,\"failures\":0,\"rankGain\":4.4,\"rankLoss\":0.4,\"hpLoss\":2,\"hpLost\":0,\"isStealth\":true,\"isKill\":false,\"count\":164.6483333333413,\"weights\":{\"hack\":0.2,\"str\":0.05,\"def\":0.05,\"dex\":0.2,\"agi\":0.2,\"cha\":0.2,\"int\":0.1},\"decays\":{\"hack\":0.8,\"str\":0.9,\"def\":0.9,\"dex\":0.9,\"agi\":0.9,\"cha\":0.7,\"int\":0.9},\"teamCount\":0,\"reqdRank\":100}},\"Sting Operation\":{\"ctor\":\"Operation\",\"data\":{\"name\":\"Sting Operation\",\"level\":1,\"maxLevel\":1,\"autoLevel\":true,\"baseDifficulty\":668.9376538381871,\"difficultyFac\":1.04,\"rewardFac\":1.095,\"successes\":0,\"failures\":0,\"rankGain\":5.5,\"rankLoss\":0.5,\"hpLoss\":2.5,\"hpLost\":0,\"isStealth\":true,\"isKill\":false,\"count\":230.47458333334362,\"weights\":{\"hack\":0.25,\"str\":0.05,\"def\":0.05,\"dex\":0.25,\"agi\":0.1,\"cha\":0.2,\"int\":0.1},\"decays\":{\"hack\":0.8,\"str\":0.85,\"def\":0.85,\"dex\":0.85,\"agi\":0.85,\"cha\":0.7,\"int\":0.9},\"teamCount\":0,\"reqdRank\":500}},\"Raid\":{\"ctor\":\"Operation\",\"data\":{\"name\":\"Raid\",\"level\":1,\"maxLevel\":1,\"autoLevel\":true,\"baseDifficulty\":766.8164716121812,\"difficultyFac\":1.045,\"rewardFac\":1.1,\"successes\":0,\"failures\":0,\"rankGain\":55,\"rankLoss\":2.5,\"hpLoss\":50,\"hpLost\":0,\"isStealth\":false,\"isKill\":true,\"count\":227.2114583333432,\"weights\":{\"hack\":0.1,\"str\":0.2,\"def\":0.2,\"dex\":0.2,\"agi\":0.2,\"cha\":0,\"int\":0.1},\"decays\":{\"hack\":0.7,\"str\":0.8,\"def\":0.8,\"dex\":0.8,\"agi\":0.8,\"cha\":0,\"int\":0.9},\"teamCount\":0,\"reqdRank\":3000}},\"Stealth Retirement Operation\":{\"ctor\":\"Operation\",\"data\":{\"name\":\"Stealth Retirement Operation\",\"level\":1,\"maxLevel\":1,\"autoLevel\":true,\"baseDifficulty\":1073.056906690059,\"difficultyFac\":1.05,\"rewardFac\":1.11,\"successes\":0,\"failures\":0,\"rankGain\":22,\"rankLoss\":2,\"hpLoss\":10,\"hpLost\":0,\"isStealth\":true,\"isKill\":true,\"count\":174.00625000001895,\"weights\":{\"hack\":0.1,\"str\":0.1,\"def\":0.1,\"dex\":0.3,\"agi\":0.3,\"cha\":0,\"int\":0.1},\"decays\":{\"hack\":0.7,\"str\":0.8,\"def\":0.8,\"dex\":0.8,\"agi\":0.8,\"cha\":0,\"int\":0.9},\"teamCount\":0,\"reqdRank\":20000}},\"Assassination\":{\"ctor\":\"Operation\",\"data\":{\"name\":\"Assassination\",\"level\":1,\"maxLevel\":1,\"autoLevel\":true,\"baseDifficulty\":1613.502884438868,\"difficultyFac\":1.06,\"rewardFac\":1.14,\"successes\":0,\"failures\":0,\"rankGain\":44,\"rankLoss\":4,\"hpLoss\":5,\"hpLost\":0,\"isStealth\":true,\"isKill\":true,\"count\":200.44312500002604,\"weights\":{\"hack\":0.1,\"str\":0.1,\"def\":0.1,\"dex\":0.3,\"agi\":0.3,\"cha\":0,\"int\":0.1},\"decays\":{\"hack\":0.6,\"str\":0.8,\"def\":0.8,\"dex\":0.8,\"agi\":0.8,\"cha\":0,\"int\":0.8},\"teamCount\":0,\"reqdRank\":50000}}},\"blackops\":{},\"logging\":{\"general\":true,\"contracts\":true,\"ops\":true,\"blackops\":true,\"events\":true},\"automateEnabled\":false,\"automateActionHigh\":{\"ctor\":\"ActionIdentifier\",\"data\":{\"name\":\"\",\"type\":1}},\"automateThreshHigh\":0,\"automateActionLow\":{\"ctor\":\"ActionIdentifier\",\"data\":{\"name\":\"\",\"type\":1}},\"automateThreshLow\":0,\"consoleHistory\":[],\"consoleLogs\":[\"[6/29 01:18:49] Player: Bounty Hunter contract successfully completed! Gained 1.981 rank and $3.578m\",\"[6/29 01:18:50] Player: Bounty Hunter contract successfully completed! Gained 2.225 rank and $3.578m\",\"[6/29 01:18:51] Player: Bounty Hunter contract successfully completed! Gained 2.129 rank and $3.578m\",\"[6/29 01:18:52] Player: Bounty Hunter contract successfully completed! Gained 2.047 rank and $3.578m\",\"[6/29 01:18:53] Player: Bounty Hunter contract successfully completed! Gained 2.207 rank and $3.578m\",\"[6/29 01:18:54] Player: Bounty Hunter contract successfully completed! Gained 2.025 rank and $3.578m\",\"[6/29 01:19:25] Player: Retirement contract successfully completed! Gained 0.836 rank and $2.042m\",\"[6/29 01:19:26] Player: Retirement contract successfully completed! Gained 0.769 rank and $2.042m\",\"[6/29 01:19:27] Player: Retirement contract successfully completed! Gained 0.721 rank and $2.042m\",\"[6/29 01:19:28] Player: Retirement contract successfully completed! Gained 0.825 rank and $2.042m\",\"[6/29 01:19:29] Player: Retirement contract successfully completed! Gained 0.756 rank and $2.042m\",\"[6/29 01:19:30] Player: Retirement contract successfully completed! Gained 0.858 rank and $2.042m\",\"[6/29 01:19:31] Player: Retirement contract successfully completed! Gained 0.779 rank and $2.042m\",\"[6/29 01:19:32] Player: Retirement contract successfully completed! Gained 0.784 rank and $2.042m\",\"[6/29 01:19:33] Player: Retirement contract successfully completed! Gained 0.852 rank and $2.042m\",\"[6/29 01:19:34] Player: Retirement contract successfully completed! Gained 0.820 rank and $2.042m\",\"[6/29 01:19:35] Player: Retirement contract successfully completed! Gained 0.837 rank and $2.042m\",\"[6/29 01:19:36] Player: Retirement contract successfully completed! Gained 0.874 rank and $2.175m\",\"[6/29 01:19:37] Player: Retirement contract successfully completed! Gained 0.917 rank and $2.175m\",\"[6/29 01:19:38] Player: Retirement contract successfully completed! Gained 0.832 rank and $2.175m\",\"[6/29 01:19:39] Player: Retirement contract successfully completed! Gained 0.768 rank and $2.175m\",\"[6/29 01:19:40] Player: Retirement contract successfully completed! Gained 0.778 rank and $2.175m\",\"[6/29 01:19:41] Player: Retirement contract successfully completed! Gained 0.899 rank and $2.175m\",\"[6/29 01:19:42] Player: Retirement contract successfully completed! Gained 0.875 rank and $2.175m\",\"[6/29 01:19:43] Player: Retirement contract successfully completed! Gained 0.864 rank and $2.175m\",\"[6/29 01:19:44] Player: Investigation successfully completed! Gained 2.336 rank\",\"[6/29 01:19:45] Player: Investigation successfully completed! Gained 2.597 rank\",\"[6/29 01:19:46] Player: Investigation successfully completed! Gained 2.346 rank\",\"[6/29 01:19:47] Player: Investigation successfully completed! Gained 2.378 rank\",\"[6/29 01:19:48] Player: Investigation successfully completed! Gained 2.311 rank\",\"[6/29 01:19:49] Player: Investigation successfully completed! Gained 2.246 rank\",\"[6/29 01:19:50] Player: Investigation successfully completed! Gained 2.447 rank\",\"[6/29 01:19:51] Player: Investigation successfully completed! Gained 2.384 rank\",\"[6/29 01:19:52] Player: Investigation successfully completed! Gained 2.470 rank\",\"[6/29 01:19:53] Player: Investigation successfully completed! Gained 2.220 rank\",\"[6/29 01:19:54] Player: Investigation successfully completed! Gained 2.512 rank\",\"[6/29 01:19:55] Player: Investigation successfully completed! Gained 2.586 rank\",\"[6/29 01:19:56] Player: Investigation successfully completed! Gained 2.328 rank\",\"[6/29 01:19:57] Player: Investigation successfully completed! Gained 2.485 rank\",\"[6/29 01:19:58] Player: Investigation successfully completed! Gained 2.802 rank\",\"[6/29 01:19:59] Player: Investigation successfully completed! Gained 2.647 rank\",\"[6/29 01:20:00] Player: Investigation successfully completed! Gained 2.299 rank\",\"[6/29 01:20:01] Player: Investigation successfully completed! Gained 2.727 rank\",\"[6/29 01:20:02] Player: Investigation successfully completed! Gained 2.333 rank\",\"[6/29 01:20:03] Player: Investigation successfully completed! Gained 2.298 rank\",\"[6/29 01:20:04] Player: Investigation successfully completed! Gained 2.399 rank\",\"[6/29 01:20:05] Player: Investigation successfully completed! Gained 2.768 rank\",\"[6/29 01:20:06] Player: Investigation successfully completed! Gained 2.480 rank\",\"[6/29 01:20:07] Player: Investigation successfully completed! Gained 2.557 rank\",\"[6/29 01:20:08] Player: Investigation successfully completed! Gained 2.510 rank\",\"[6/29 01:20:09] Player: Investigation successfully completed! Gained 2.632 rank\",\"[6/29 01:20:10] Player: Investigation successfully completed! Gained 2.392 rank\",\"[6/29 01:20:11] Player: Investigation successfully completed! Gained 2.470 rank\",\"[6/29 01:20:12] Player: Investigation successfully completed! Gained 2.511 rank\",\"[6/29 01:20:13] Player: Investigation successfully completed! Gained 2.493 rank\",\"[6/29 01:20:14] Player: Investigation successfully completed! Gained 2.892 rank\",\"[6/29 01:20:15] Player: Investigation successfully completed! Gained 2.943 rank\",\"[6/29 01:20:16] Player: Investigation successfully completed! Gained 2.675 rank\",\"[6/29 01:20:17] Player: Investigation successfully completed! Gained 2.918 rank\",\"[6/29 01:20:18] Player: Investigation successfully completed! Gained 2.790 rank\",\"[6/29 01:20:19] Player: Investigation successfully completed! Gained 2.888 rank\",\"[6/29 01:20:20] Player: Investigation successfully completed! Gained 2.980 rank\",\"[6/29 01:20:21] Player: Investigation successfully completed! Gained 2.859 rank\",\"[6/29 01:20:22] Player: Investigation successfully completed! Gained 2.550 rank\",\"[6/29 01:20:23] Player: Investigation successfully completed! Gained 2.727 rank\",\"[6/29 01:20:24] Player: Investigation successfully completed! Gained 2.999 rank\",\"[6/29 01:20:25] Player: Investigation successfully completed! Gained 2.494 rank\",\"[6/29 01:20:26] Player: Investigation successfully completed! Gained 2.779 rank\",\"[6/29 01:20:27] Player: Investigation successfully completed! Gained 2.472 rank\",\"[6/29 01:20:28] Player: Investigation successfully completed! Gained 2.675 rank\",\"[6/29 01:20:29] Player: Investigation successfully completed! Gained 2.634 rank\",\"[6/29 01:20:30] Player: Investigation successfully completed! Gained 2.767 rank\",\"[6/29 01:20:31] Player: Investigation successfully completed! Gained 2.646 rank\",\"[6/29 01:20:32] Player: Investigation successfully completed! Gained 3.039 rank\",\"[6/29 01:20:33] Player: Investigation successfully completed! Gained 2.683 rank\",\"[6/29 01:20:34] Player: Investigation successfully completed! Gained 2.833 rank\",\"[6/29 01:20:35] Player: Investigation successfully completed! Gained 2.866 rank\",\"[6/29 01:20:36] Player: Investigation successfully completed! Gained 3.051 rank\",\"[6/29 01:20:37] Player: Investigation successfully completed! Gained 3.136 rank\",\"[6/29 01:20:38] Player: Investigation successfully completed! Gained 2.991 rank\",\"[6/29 01:20:39] Player: Investigation successfully completed! Gained 2.690 rank\",\"[6/29 01:20:40] Player: Investigation successfully completed! Gained 3.065 rank\",\"[6/29 01:20:41] Player: Investigation successfully completed! Gained 2.776 rank\",\"[6/29 01:20:42] Player: Investigation successfully completed! Gained 2.637 rank\",\"[6/29 01:20:43] Player: Investigation successfully completed! Gained 3.133 rank\",\"[6/29 01:20:44] Player: Investigation successfully completed! Gained 3.207 rank\",\"[6/29 01:20:45] Player: Investigation successfully completed! Gained 3.167 rank\",\"[6/29 01:20:46] Player: Investigation successfully completed! Gained 3.052 rank\",\"[6/29 01:20:47] Player: Investigation successfully completed! Gained 3.131 rank\",\"[6/29 01:20:48] Player: Investigation successfully completed! Gained 2.786 rank\",\"[6/29 01:20:49] Player: Investigation successfully completed! Gained 3.047 rank\",\"[6/29 01:20:50] Player: Investigation successfully completed! Gained 3.370 rank\",\"[6/29 01:20:51] Player: Investigation successfully completed! Gained 2.891 rank\",\"[6/29 01:20:52] Player: Investigation successfully completed! Gained 2.995 rank\",\"[6/29 01:20:53] Player: Investigation successfully completed! Gained 3.033 rank\",\"[6/29 01:20:54] Player: Investigation successfully completed! Gained 2.842 rank\",\"[6/29 01:20:55] Player: Investigation successfully completed! Gained 3.240 rank\",\"[6/29 01:20:56] Player: Investigation successfully completed! Gained 3.160 rank\",\"[6/29 01:20:57] Player: Investigation successfully completed! Gained 3.006 rank\",\"[6/29 01:20:58] Player: Investigation successfully completed! Gained 3.003 rank\"]}},\"bladeburner_max_stamina_mult\":1.3825350000000003,\"bladeburner_stamina_gain_mult\":1.3337792748000001,\"bladeburner_analysis_mult\":1.7413357500000004,\"bladeburner_success_chance_mult\":2.1843081219208114,\"sleeves\":[{\"ctor\":\"Sleeve\",\"data\":{\"hacking\":68,\"strength\":185,\"defense\":185,\"dexterity\":195,\"agility\":195,\"charisma\":256,\"intelligence\":32,\"hp\":28,\"max_hp\":28,\"hacking_exp\":2552719.419149541,\"strength_exp\":2036289.4271262242,\"defense_exp\":2033471.2311262218,\"dexterity_exp\":3133346.7218470434,\"agility_exp\":3142509.7800970413,\"charisma_exp\":1572144.6074307195,\"intelligence_exp\":881.9054350956602,\"hacking_mult\":1,\"strength_mult\":1,\"defense_mult\":1,\"dexterity_mult\":1,\"agility_mult\":1,\"charisma_mult\":1,\"hacking_exp_mult\":1,\"strength_exp_mult\":1,\"defense_exp_mult\":1,\"dexterity_exp_mult\":1,\"agility_exp_mult\":1,\"charisma_exp_mult\":1,\"hacking_chance_mult\":1.9824018092477167,\"hacking_speed_mult\":1.8235184426844915,\"hacking_money_mult\":8.8266016103265,\"hacking_grow_mult\":1.75,\"company_rep_mult\":1,\"faction_rep_mult\":1,\"crime_money_mult\":1,\"crime_success_mult\":1,\"work_money_mult\":1,\"hacknet_node_money_mult\":1,\"hacknet_node_purchase_cost_mult\":1,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":1,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[],\"city\":\"Sector-12\",\"className\":\"\",\"crimeType\":\"\",\"currentTask\":2,\"currentTaskLocation\":\"ECorp\",\"currentTaskMaxTime\":0,\"currentTaskTime\":180000,\"earningsForSleeves\":{\"hack\":1955466.4040247248,\"str\":294.26441875973876,\"def\":294.26441875973876,\"dex\":1654.8509313181696,\"agi\":1654.8509313181696,\"cha\":498.3538375194776,\"int\":0,\"money\":0},\"earningsForPlayer\":{\"hack\":1955466.4040247248,\"str\":294.26441875973876,\"def\":294.26441875973876,\"dex\":1654.8509313181696,\"agi\":1654.8509313181696,\"cha\":498.3538375194776,\"int\":0,\"money\":-4203606.432245192},\"earningsForTask\":{\"hack\":45,\"str\":67.5,\"def\":67.5,\"dex\":67.5,\"agi\":67.5,\"cha\":0,\"int\":0,\"money\":0},\"factionWorkType\":3,\"gainRatesForTask\":{\"hack\":0.05,\"str\":0.075,\"def\":0.075,\"dex\":0.075,\"agi\":0.075,\"cha\":0,\"int\":0,\"money\":0},\"gymStatType\":\"\",\"bbAction\":\"\",\"bbContract\":\"------\",\"logs\":[],\"memory\":100,\"shock\":100,\"storedCycles\":2,\"sync\":100,\"queuedAugmentations\":[]}},{\"ctor\":\"Sleeve\",\"data\":{\"hacking\":68,\"strength\":185,\"defense\":185,\"dexterity\":195,\"agility\":195,\"charisma\":256,\"intelligence\":38,\"hp\":25,\"max_hp\":28,\"hacking_exp\":2552719.419149541,\"strength_exp\":2036289.4271262242,\"defense_exp\":2033471.2311262218,\"dexterity_exp\":3133346.7218470434,\"agility_exp\":3142509.7800970413,\"charisma_exp\":1572144.6074307195,\"intelligence_exp\":1180.220550103173,\"hacking_mult\":1,\"strength_mult\":1,\"defense_mult\":1,\"dexterity_mult\":1,\"agility_mult\":1,\"charisma_mult\":1,\"hacking_exp_mult\":1,\"strength_exp_mult\":1,\"defense_exp_mult\":1,\"dexterity_exp_mult\":1,\"agility_exp_mult\":1,\"charisma_exp_mult\":1,\"hacking_chance_mult\":1.2491325000000002,\"hacking_speed_mult\":1.2550791976630113,\"hacking_money_mult\":1.8367800000000003,\"hacking_grow_mult\":1,\"company_rep_mult\":1,\"faction_rep_mult\":1,\"crime_money_mult\":1,\"crime_success_mult\":1,\"work_money_mult\":1,\"hacknet_node_money_mult\":1,\"hacknet_node_purchase_cost_mult\":1,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":1,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[],\"city\":\"Sector-12\",\"className\":\"\",\"crimeType\":\"\",\"currentTask\":2,\"currentTaskLocation\":\"MegaCorp\",\"currentTaskMaxTime\":0,\"currentTaskTime\":166000,\"earningsForSleeves\":{\"hack\":384773.9129249606,\"str\":1237.9611874049026,\"def\":1237.9611874049026,\"dex\":2021.7686456748377,\"agi\":2021.7686456748377,\"cha\":1569444.3574580331,\"int\":0,\"money\":0},\"earningsForPlayer\":{\"hack\":384773.9129249606,\"str\":1237.9611874049026,\"def\":1237.9611874049026,\"dex\":2021.7686456748377,\"agi\":2021.7686456748377,\"cha\":1569444.3574580331,\"int\":0,\"money\":1726283.0882604513},\"earningsForTask\":{\"hack\":41.5,\"str\":62.25,\"def\":62.25,\"dex\":62.25,\"agi\":62.25,\"cha\":0,\"int\":0,\"money\":0},\"factionWorkType\":3,\"gainRatesForTask\":{\"hack\":0.05,\"str\":0.075,\"def\":0.075,\"dex\":0.075,\"agi\":0.075,\"cha\":0,\"int\":0,\"money\":0},\"gymStatType\":\"\",\"bbAction\":\"\",\"bbContract\":\"------\",\"logs\":[],\"memory\":100,\"shock\":100,\"storedCycles\":2,\"sync\":100,\"queuedAugmentations\":[]}},{\"ctor\":\"Sleeve\",\"data\":{\"hacking\":68,\"strength\":185,\"defense\":185,\"dexterity\":195,\"agility\":195,\"charisma\":256,\"intelligence\":18,\"hp\":28,\"max_hp\":28,\"hacking_exp\":2552719.419149541,\"strength_exp\":2036289.4271262242,\"defense_exp\":2033471.2311262218,\"dexterity_exp\":3133346.7218470434,\"agility_exp\":3142509.7800970413,\"charisma_exp\":1572144.6074307195,\"intelligence_exp\":394.42027054536464,\"hacking_mult\":1,\"strength_mult\":1,\"defense_mult\":1,\"dexterity_mult\":1,\"agility_mult\":1,\"charisma_mult\":1,\"hacking_exp_mult\":1,\"strength_exp_mult\":1,\"defense_exp_mult\":1,\"dexterity_exp_mult\":1,\"agility_exp_mult\":1,\"charisma_exp_mult\":1,\"hacking_chance_mult\":1.2491325000000004,\"hacking_speed_mult\":1.2550791976630111,\"hacking_money_mult\":1.83678,\"hacking_grow_mult\":1,\"company_rep_mult\":1,\"faction_rep_mult\":1,\"crime_money_mult\":1,\"crime_success_mult\":1,\"work_money_mult\":1,\"hacknet_node_money_mult\":1,\"hacknet_node_purchase_cost_mult\":1,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":1,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[],\"city\":\"Sector-12\",\"className\":\"\",\"crimeType\":\"\",\"currentTask\":2,\"currentTaskLocation\":\"The Syndicate\",\"currentTaskMaxTime\":0,\"currentTaskTime\":149000,\"earningsForSleeves\":{\"hack\":54835.93519996245,\"str\":2033318.001520059,\"def\":1837.2672703639234,\"dex\":546997.2672703634,\"agi\":1837.2672703639234,\"cha\":890.6961351819617,\"int\":0,\"money\":0},\"earningsForPlayer\":{\"hack\":54835.93519996245,\"str\":2033318.001520059,\"def\":1837.2672703639234,\"dex\":546997.2672703634,\"agi\":1837.2672703639234,\"cha\":890.6961351819617,\"int\":0,\"money\":-144619486.63866827},\"earningsForTask\":{\"hack\":37.25,\"str\":55.875,\"def\":55.875,\"dex\":55.875,\"agi\":55.875,\"cha\":0,\"int\":0,\"money\":0},\"factionWorkType\":3,\"gainRatesForTask\":{\"hack\":0.05,\"str\":0.075,\"def\":0.075,\"dex\":0.075,\"agi\":0.075,\"cha\":0,\"int\":0,\"money\":0},\"gymStatType\":\"\",\"bbAction\":\"\",\"bbContract\":\"------\",\"logs\":[],\"memory\":100,\"shock\":100,\"storedCycles\":2,\"sync\":100,\"queuedAugmentations\":[]}},{\"ctor\":\"Sleeve\",\"data\":{\"hacking\":68,\"strength\":185,\"defense\":185,\"dexterity\":195,\"agility\":195,\"charisma\":256,\"intelligence\":3,\"hp\":4,\"max_hp\":28,\"hacking_exp\":2552719.419149541,\"strength_exp\":2036289.4271262242,\"defense_exp\":2033471.2311262218,\"dexterity_exp\":3133346.7218470434,\"agility_exp\":3142509.7800970413,\"charisma_exp\":1572144.6074307195,\"intelligence_exp\":36.56777052872692,\"hacking_mult\":1,\"strength_mult\":1,\"defense_mult\":1,\"dexterity_mult\":1,\"agility_mult\":1,\"charisma_mult\":1,\"hacking_exp_mult\":1,\"strength_exp_mult\":1,\"defense_exp_mult\":1,\"dexterity_exp_mult\":1,\"agility_exp_mult\":1,\"charisma_exp_mult\":1,\"hacking_chance_mult\":1.2491325000000004,\"hacking_speed_mult\":1.2550791976630111,\"hacking_money_mult\":1.53065,\"hacking_grow_mult\":1,\"company_rep_mult\":1,\"faction_rep_mult\":1,\"crime_money_mult\":1,\"crime_success_mult\":1,\"work_money_mult\":1,\"hacknet_node_money_mult\":1,\"hacknet_node_purchase_cost_mult\":1,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":1,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[],\"city\":\"Sector-12\",\"className\":\"\",\"crimeType\":\"\",\"currentTask\":2,\"currentTaskLocation\":\"Illuminati\",\"currentTaskMaxTime\":0,\"currentTaskTime\":141000,\"earningsForSleeves\":{\"hack\":53821.81859996344,\"str\":232.5,\"def\":2028895.0382496943,\"dex\":232.5,\"agi\":550342.5,\"cha\":232.5,\"int\":0,\"money\":0},\"earningsForPlayer\":{\"hack\":53821.81859996344,\"str\":232.5,\"def\":2028895.0382496943,\"dex\":232.5,\"agi\":550342.5,\"cha\":232.5,\"int\":0,\"money\":-336885600},\"earningsForTask\":{\"hack\":35.25,\"str\":35.25,\"def\":35.25,\"dex\":35.25,\"agi\":35.25,\"cha\":35.25,\"int\":0,\"money\":0},\"factionWorkType\":0,\"gainRatesForTask\":{\"hack\":0.05,\"str\":0.05,\"def\":0.05,\"dex\":0.05,\"agi\":0.05,\"cha\":0.05,\"int\":0,\"money\":0},\"gymStatType\":\"\",\"bbAction\":\"\",\"bbContract\":\"------\",\"logs\":[],\"memory\":100,\"shock\":100,\"storedCycles\":2,\"sync\":100,\"queuedAugmentations\":[]}},{\"ctor\":\"Sleeve\",\"data\":{\"hacking\":68,\"strength\":185,\"defense\":185,\"dexterity\":195,\"agility\":195,\"charisma\":256,\"intelligence\":3,\"hp\":0,\"max_hp\":28,\"hacking_exp\":2552719.419149541,\"strength_exp\":2036289.4271262242,\"defense_exp\":2033471.2311262218,\"dexterity_exp\":3133346.7218470434,\"agility_exp\":3142509.7800970413,\"charisma_exp\":1572144.6074307195,\"intelligence_exp\":48.59004825635464,\"hacking_mult\":1,\"strength_mult\":1,\"defense_mult\":1,\"dexterity_mult\":1,\"agility_mult\":1,\"charisma_mult\":1,\"hacking_exp_mult\":1,\"strength_exp_mult\":1,\"defense_exp_mult\":1,\"dexterity_exp_mult\":1,\"agility_exp_mult\":1,\"charisma_exp_mult\":1,\"hacking_chance_mult\":1.2491325000000004,\"hacking_speed_mult\":1.2550791976630111,\"hacking_money_mult\":1.53065,\"hacking_grow_mult\":1,\"company_rep_mult\":1,\"faction_rep_mult\":1,\"crime_money_mult\":1,\"crime_success_mult\":1,\"work_money_mult\":1,\"hacknet_node_money_mult\":1,\"hacknet_node_purchase_cost_mult\":1,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":1,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[],\"city\":\"Sector-12\",\"className\":\"\",\"crimeType\":\"\",\"currentTask\":2,\"currentTaskLocation\":\"Daedalus\",\"currentTaskMaxTime\":0,\"currentTaskTime\":130000,\"earningsForSleeves\":{\"hack\":52593.92139996432,\"str\":972.275,\"def\":972.275,\"dex\":2582035.909999691,\"agi\":972.275,\"cha\":547.4000000000001,\"int\":0,\"money\":0},\"earningsForPlayer\":{\"hack\":52593.92139996432,\"str\":972.275,\"def\":972.275,\"dex\":2582035.909999691,\"agi\":972.275,\"cha\":547.4000000000001,\"int\":0,\"money\":-319164099.6830542},\"earningsForTask\":{\"hack\":32.5,\"str\":32.5,\"def\":32.5,\"dex\":32.5,\"agi\":32.5,\"cha\":32.5,\"int\":0,\"money\":0},\"factionWorkType\":0,\"gainRatesForTask\":{\"hack\":0.05,\"str\":0.05,\"def\":0.05,\"dex\":0.05,\"agi\":0.05,\"cha\":0.05,\"int\":0,\"money\":0},\"gymStatType\":\"\",\"bbAction\":\"\",\"bbContract\":\"------\",\"logs\":[],\"memory\":100,\"shock\":100,\"storedCycles\":2,\"sync\":100,\"queuedAugmentations\":[]}},{\"ctor\":\"Sleeve\",\"data\":{\"hacking\":68,\"strength\":185,\"defense\":185,\"dexterity\":195,\"agility\":195,\"charisma\":256,\"intelligence\":4,\"hp\":28,\"max_hp\":28,\"hacking_exp\":2552719.419149541,\"strength_exp\":2036289.4271262242,\"defense_exp\":2033471.2311262218,\"dexterity_exp\":3133346.7218470434,\"agility_exp\":3142509.7800970413,\"charisma_exp\":1572144.6074307195,\"intelligence_exp\":63.20612123498245,\"hacking_mult\":1,\"strength_mult\":1,\"defense_mult\":1,\"dexterity_mult\":1,\"agility_mult\":1,\"charisma_mult\":1,\"hacking_exp_mult\":1,\"strength_exp_mult\":1,\"defense_exp_mult\":1,\"dexterity_exp_mult\":1,\"agility_exp_mult\":1,\"charisma_exp_mult\":1,\"hacking_chance_mult\":1.2491325000000004,\"hacking_speed_mult\":1.2550791976630111,\"hacking_money_mult\":1.53065,\"hacking_grow_mult\":1,\"company_rep_mult\":1,\"faction_rep_mult\":1,\"crime_money_mult\":1,\"crime_success_mult\":1,\"work_money_mult\":1,\"hacknet_node_money_mult\":1,\"hacknet_node_purchase_cost_mult\":1,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":1,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[],\"city\":\"Sector-12\",\"className\":\"\",\"crimeType\":\"\",\"currentTask\":2,\"currentTaskLocation\":\"Blade Industries\",\"currentTaskMaxTime\":0,\"currentTaskTime\":115000,\"earningsForSleeves\":{\"hack\":51227.426999965275,\"str\":234.425,\"def\":234.425,\"dex\":404.425,\"agi\":2585681.118249689,\"cha\":531.3,\"int\":0,\"money\":0},\"earningsForPlayer\":{\"hack\":51227.426999965275,\"str\":234.425,\"def\":234.425,\"dex\":404.425,\"agi\":2585681.118249689,\"cha\":531.3,\"int\":0,\"money\":-326966019.703125},\"earningsForTask\":{\"hack\":28.75,\"str\":43.125,\"def\":43.125,\"dex\":43.125,\"agi\":43.125,\"cha\":0,\"int\":0,\"money\":0},\"factionWorkType\":3,\"gainRatesForTask\":{\"hack\":0.05,\"str\":0.075,\"def\":0.075,\"dex\":0.075,\"agi\":0.075,\"cha\":0,\"int\":0,\"money\":0},\"gymStatType\":\"\",\"bbAction\":\"\",\"bbContract\":\"------\",\"logs\":[],\"memory\":100,\"shock\":100,\"storedCycles\":2,\"sync\":100,\"queuedAugmentations\":[]}}],\"sleevesFromCovenant\":5,\"bitNodeN\":13,\"entropy\":0,\"lastUpdate\":1656480058972,\"lastSave\":1656480055986,\"totalPlaytime\":15395261200,\"playtimeSinceLastAug\":995200,\"playtimeSinceLastBitnode\":128128800,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":388851286.8210978,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":342145.66660659877,\"crime\":0,\"gang\":0,\"hacking\":86999534688377.64,\"hacknet\":0,\"hacknet_expenses\":-86907341444576.39,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":92270237234.23543,\"work\":0,\"servers\":0,\"other\":-312200000,\"augmentations\":0}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":514577703.9886429,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":-4.796089493205168e+113,\"crime\":0,\"gang\":0,\"hacking\":200949997956307.3,\"hacknet\":3102000000,\"hacknet_expenses\":-7.7659030660360705e+31,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":-1130112529.3688416,\"stock\":0,\"total\":-4.796089552365747e+113,\"work\":72192337.44116895,\"servers\":-14500599497989409000,\"other\":-1567500000,\"augmentations\":-5.91605799992153e+105}},\"scriptProdSinceLastAug\":86999534688377.64,\"exploits\":[\"N00dles\",\"EditSaveFile\",\"YoureNotMeantToAccessThis\",\"PrototypeTampering\"],\"achievements\":[{\"ID\":\"CYBERSEC\",\"unlockedOn\":1642198554797},{\"ID\":\"NITESEC\",\"unlockedOn\":1642198554810},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1642198554813},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1642198554816},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1642198554819},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1642198554823},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1642198554826},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1642198554830},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1642198554834},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1642198554837},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1642198554840},{\"ID\":\"NS2\",\"unlockedOn\":1642198554843},{\"ID\":\"FROZE\",\"unlockedOn\":1642198554847},{\"ID\":\"SCRIPTS_30\",\"unlockedOn\":1642198554849},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1642198554853},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1642198554855},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1642198554858},{\"ID\":\"DONATION\",\"unlockedOn\":1642198554862},{\"ID\":\"TOR\",\"unlockedOn\":1642198554865},{\"ID\":\"4S\",\"unlockedOn\":1642198554867},{\"ID\":\"DAEDALUS\",\"unlockedOn\":1642198794816},{\"ID\":\"SF1.1\",\"unlockedOn\":1642199274811},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1642199274820},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1642738642559},{\"ID\":\"TRAVEL\",\"unlockedOn\":1642962148551},{\"ID\":\"N00DLES\",\"unlockedOn\":1643223570990},{\"ID\":\"DISCOUNT\",\"unlockedOn\":1643342251031},{\"ID\":\"WORKOUT\",\"unlockedOn\":1643342310977},{\"ID\":\"HOSPITALIZED\",\"unlockedOn\":1643343810986},{\"ID\":\"GANG\",\"unlockedOn\":1643492387763},{\"ID\":\"FULL_GANG\",\"unlockedOn\":1643637407795},{\"ID\":\"GANG_MEMBER_POWER\",\"unlockedOn\":1643638067757},{\"ID\":\"REPUTATION_10M\",\"unlockedOn\":1643783614558},{\"ID\":\"SF2.1\",\"unlockedOn\":1643950774572},{\"ID\":\"CORPORATION\",\"unlockedOn\":1644029434551},{\"ID\":\"EDITSAVEFILE\",\"unlockedOn\":1644548478251},{\"ID\":\"30_HACKNET_NODE\",\"unlockedOn\":1644616585324},{\"ID\":\"MAX_CORES\",\"unlockedOn\":1644631058379},{\"ID\":\"MONEY_1Q\",\"unlockedOn\":1644894384975},{\"ID\":\"SF3.1\",\"unlockedOn\":1644978324968},{\"ID\":\"MAX_RAM\",\"unlockedOn\":1645322321671},{\"ID\":\"CORPORATION_REAL_ESTATE\",\"unlockedOn\":1645480601873},{\"ID\":\"CORPORATION_BRIBE\",\"unlockedOn\":1645636901815},{\"ID\":\"SF4.1\",\"unlockedOn\":1645668283454},{\"ID\":\"QUEUE_40\",\"unlockedOn\":1646158366608},{\"ID\":\"DEVMENU\",\"unlockedOn\":1646194895641},{\"ID\":\"NEUROFLUX_255\",\"unlockedOn\":1646235482188},{\"ID\":\"FAST_BN\",\"unlockedOn\":1646236682177},{\"ID\":\"SF5.1\",\"unlockedOn\":1647623945870},{\"ID\":\"CHALLENGE_BN6\",\"unlockedOn\":1647803738825},{\"ID\":\"INDECISIVE\",\"unlockedOn\":1647807388849},{\"ID\":\"SF6.1\",\"unlockedOn\":1647831088850},{\"ID\":\"BLADEBURNER_DIVISION\",\"unlockedOn\":1647914608833},{\"ID\":\"THE_COVENANT\",\"unlockedOn\":1647950068818},{\"ID\":\"ILLUMINATI\",\"unlockedOn\":1647967048840},{\"ID\":\"COMBAT_3000\",\"unlockedOn\":1647986668822},{\"ID\":\"BLADEBURNER_OVERCLOCK\",\"unlockedOn\":1648061008822},{\"ID\":\"HACKING_100000\",\"unlockedOn\":1648315289227},{\"ID\":\"SF12.1\",\"unlockedOn\":1648350149229},{\"ID\":\"SF7.1\",\"unlockedOn\":1648725699031},{\"ID\":\"CORPORATION_PROD_1000\",\"unlockedOn\":1649103101793},{\"ID\":\"CORPORATION_EMPLOYEE_3000\",\"unlockedOn\":1650171954872},{\"ID\":\"BLADEBURNER_UNSPENT_100000\",\"unlockedOn\":1650463333880},{\"ID\":\"PROTOTYPETAMPERING\",\"unlockedOn\":1653058666403},{\"ID\":\"CHALLENGE_BN8\",\"unlockedOn\":1653415061852},{\"ID\":\"SF8.1\",\"unlockedOn\":1653415138628},{\"ID\":\"FIRST_HACKNET_SERVER\",\"unlockedOn\":1653415258647},{\"ID\":\"ALL_HACKNET_SERVER\",\"unlockedOn\":1653415498651},{\"ID\":\"MAX_HACKNET_SERVER\",\"unlockedOn\":1653415558665},{\"ID\":\"HACKNET_SERVER_1B\",\"unlockedOn\":1653458098650},{\"ID\":\"MAX_CACHE\",\"unlockedOn\":1653458098652},{\"ID\":\"SF9.1\",\"unlockedOn\":1653856225450},{\"ID\":\"SF10.1\",\"unlockedOn\":1654280365445},{\"ID\":\"GANG_TERRITORY\",\"unlockedOn\":1654755265458},{\"ID\":\"INSTALL_100\",\"unlockedOn\":1654781545441},{\"ID\":\"SF11.1\",\"unlockedOn\":1654813765454},{\"ID\":\"CHALLENGE_BN13\",\"unlockedOn\":1656351915207},{\"ID\":\"MONEY_M1B\",\"unlockedOn\":1656450920003}],\"terminalCommandHistory\":[\"run /bin/tor.js\",\"run /bin/hacknetManager.js\",\"run /bin/bladeSkillManager.js\",\"run /bin/facJoiner.js\",\"run /wip/stanek.js -t 2000000\",\"buy -l\",\"free\",\"ps\",\"kill 13\",\"run /wip/stanek.js -t 2000000000\",\"run /wip/stanek.js -t 200000000\",\"run /wip/stanek.js -t 20000000\",\"free\",\"kill 186\",\"run /wip/stanek.js -t 100000000\",\"free\",\"run /bin/traceroute.js fulcrumassets\",\"connect harakiri-sushi\",\"connect max-hardware\",\"connect neo-net\",\"connect johnson-ortho\",\"connect I.I.I.I\",\"connect rho-construction\",\"connect snap-fitness\",\"connect unitalife\",\"connect solaris\",\"connect infocomm\",\"connect run4theh111z\",\"connect helios\",\"connect omnitek\",\"connect b-and-a\",\"connect fulcrumassets\",\"backdoor\",\"home\",\"run /bin/inAug.js\",\"run /wip/stanek.js -t 10000000000\",\"run /wip/stanek.js -t 1000000000\",\"run /wip/stanek.js -t 100000000\",\"free\",\"run /bin/bladeSkillManager.js\",\"run /bin/tor.js\",\"run /bin/hacknetManager.js\",\"buy -\",\"buy -;\",\"buy -l\",\"free\",\"run /bin/facJoiner.js\",\"ps\",\"kill 1\",\"run /bin/pwn.js\"],\"identifier\":\"10ba7f5ef0e5c2\",\"factionWorkType\":\"Faction Security Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":8,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"55.5.4.2\",\"isConnectedTo\":true,\"maxRam\":1073741824,\"messages\":[\"hackers-starting-handbook.lit\",\"icarus.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"b1t_flum3.exe\",\"BruteSSH.exe\",\"DeepscanV1.exe\",\"AutoLink.exe\",\"Formulas.exe\",\"ServerProfiler.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"DeepscanV2.exe\",\"HTTPWorm.exe\",\"SQLInject.exe\"],\"ramUsed\":950000034.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/wip/stanek.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":969.01000000008,\"pid\":11,\"ramUsage\":9.5,\"server\":\"home\",\"threads\":100000000,\"dependencies\":[{\"filename\":\"/wip/stanek.js\",\"url\":\"blob:file:///f769b27e-e721-4645-b925-447a4191c075\",\"moduleSequenceNumber\":106868}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/bin/bladeSkillManager.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":957.610000000078,\"pid\":12,\"ramUsage\":16.5,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/bin/bladeSkillManager.js\",\"url\":\"blob:file:///f67cf202-b644-43fd-ae8a-6c6b9d2c331b\",\"moduleSequenceNumber\":106866}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/bin/hacknetManager.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":949.6100000000769,\"pid\":14,\"ramUsage\":5.7,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/bin/hacknetManager.js\",\"url\":\"blob:file:///5d2a766e-202d-4673-949a-0afcba1a22f8\",\"moduleSequenceNumber\":106865}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/bin/facJoiner.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":877.4100000000623,\"pid\":58,\"ramUsage\":7.6,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/bin/facJoiner.js\",\"url\":\"blob:file:///b700cdad-02dc-4d21-aa30-822772ab601e\",\"moduleSequenceNumber\":106867}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/bin/pwn.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":570.6099999999932,\"pid\":317,\"ramUsage\":5.15,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"import.js\",\"url\":\"blob:file:///d2b749b1-1dfe-413d-af23-165d359a5e9a\",\"moduleSequenceNumber\":106801},{\"filename\":\"/bin/pwn.js\",\"url\":\"blob:file:///3573e074-a804-4c4b-be15-8f48249fa8ef\",\"moduleSequenceNumber\":106842}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function scan(ns, parent, server, list) {\\n\\tconst CHILDREN = ns.scan(server);\\n\\tfor (let child of CHILDREN) {\\n\\t\\tif (parent == child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tlist.push(child);\\n\\n\\t\\tscan(ns, server, child, list);\\n\\t}\\n}\\n\\nexport function list_servers(ns) {\\n\\tconst list = [];\\n\\tscan(ns, '', 'home', list);\\n\\treturn list;\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst args = ns.flags([[\\\"help\\\", false]]);\\n\\tif (args.help) {\\n\\t\\tns.tprint(\\\"This script lists all servers on which you can run scripts.\\\");\\n\\t\\tns.tprint(`Usage: run ${ns.getScriptName()}`);\\n\\t\\tns.tprint(\\\"Example:\\\");\\n\\t\\tns.tprint(`> run ${ns.getScriptName()}`);\\n\\t\\treturn;\\n\\t}\\n\\n\\tconst SERVERS = list_servers(ns).filter(s => ns.hasRootAccess(s)).concat(['home']);\\n\\tfor (const SERVER of SERVERS) {\\n\\t\\tconst USED = ns.getServerUsedRam(SERVER);\\n\\t\\tconst MAXRAM = ns.getServerMaxRam(SERVER);\\n\\t\\tns.tprint(SERVER + \\\":open:\\\" + (MAXRAM - USED));\\n\\t}\\n}\",\"filename\":\"known-servers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"known-servers.js\",\"url\":\"blob:file:///a1b4ad44-9bfd-4719-9e1f-109bcf8d879a\"}],\"dependents\":[],\"ramUsage\":1.95,\"server\":\"home\",\"moduleSequenceNumber\":108105,\"_hash\":\"ff9ee47b362bb44d4412104f4f78885ba1acd748d86fe010c149155bbca45423\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function getPortToolCount(ns) {\\n\\tconst TOOLS = [\\\"BruteSSH.exe\\\", \\\"FTPCrack.exe\\\", \\\"relaySMTP.exe\\\", \\\"HTTPWorm.exe\\\", \\\"SQLInject.exe\\\"];\\n\\tlet count = 0;\\n\\tfor (let tool of TOOLS) {\\n\\t\\tif (ns.fileExists(tool)) {\\n\\t\\t\\tns.tprint(tool + \\\" has been found\\\");\\n\\t\\t\\tcount += 1;\\n\\t\\t} else {\\n\\t\\t\\tns.tprint(tool + \\\" not found\\\");\\n\\t\\t}\\n\\t}\\n\\n\\tns.tprint(\\\"Found \\\" + count + \\\" port opening tools\\\");\\n\\treturn count;\\n}\\n\\nexport function canOpen(ns, target) {\\n\\tif (getPortToolCount(ns) >= ns.getServerNumPortsRequired(target)) {\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\treturn false;\\n\\t}\\n}\\n\\nexport function openPorts(ns, server) {\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\")) {\\n\\t\\tns.brutessh(server);\\n\\t}\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\")) {\\n\\t\\tns.ftpcrack(server);\\n\\t}\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\")) {\\n\\t\\tns.relaysmtp(server);\\n\\t}\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\")) {\\n\\t\\tns.httpworm(server);\\n\\t}\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\")) {\\n\\t\\tns.sqlinject(server);\\n\\t}\\n\\treturn;\\n}\\n\\nexport function openServer(ns, target) {\\n\\tif (canOpen(ns, target)) {\\n\\t\\topenPorts(ns, target);\\n\\t\\tns.nuke(target);\\n\\t} else {\\n\\t\\tns.tprint(\\\"No can open \\\" + target);\\n\\t}\\n\\treturn;\\n}\\n\\n/**\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n\\tconst args = ns.flags([[\\\"help\\\", false]]);\\n\\tif (args.help) {\\n\\t\\tns.tprint(\\\"This script attempts to root a target server.\\\");\\n\\t\\tns.tprint(`Usage: run ${ns.getScriptName()}`);\\n\\t\\tns.tprint(\\\"Example:\\\");\\n\\t\\tns.tprint(`> run ${ns.getScriptName()}`);\\n\\t\\treturn;\\n\\t}\\n\\n\\tconst target = ns.args[0];\\n\\topenServer(ns, target);\\n}\",\"filename\":\"open.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"open.js\",\"url\":\"blob:file:///0e5fa0c9-2ca6-4749-8e43-17e3066b223a\"}],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"home\",\"moduleSequenceNumber\":108106,\"_hash\":\"18c7464b7aac5841f5b2acd5e750cac9f1a51745ba9fb6d63123c9ac0aae4be8\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getHackScript, getServerPrefix } from 'import.js';\\nlet hackablePorts;\\n\\n/* Searches for servers that are hackable,\\n * cracks them if you don't have root access,\\n * installs a hack script, and instructs them to\\n * HACK THEMSELVES\\n */\\nexport const main = async function (ns) {\\n    do {\\n        findHackablePorts(ns);\\n        await findServer(ns, 'home', 'home', hackServer);\\n        await ns.sleep(60 * 1000);\\n    } while (true);\\n}\\n\\nasync function findServer(ns, startServer, targetServer, func) {\\n    let servers = ns.scan(targetServer, true).filter((server) => server !== startServer && !server.includes(getServerPrefix()) && !server.includes('hacknet-node'));\\n    for (const server of servers) {\\n        const success = await func.call(this, ns, server);\\n        if (success) {\\n            await findServer(ns, targetServer, server, func);\\n        }\\n    }\\n}\\n\\nasync function hackServer(ns, server) {\\n    if (!crackServer(ns, server)) {\\n        return false;\\n    }\\n\\n    let script = getHackScript();\\n    await ns.scp(script, server);\\n    if (!ns.isRunning(script, server)) {\\n        ns.killall(server);\\n        let scriptRam = ns.getScriptRam(script);\\n        let serverRam = ns.getServerMaxRam(server);\\n        let threads = Math.floor(serverRam / scriptRam);\\n        if (threads > 0) {\\n            ns.print(`Starting ${threads} processes on ${server}`);\\n            ns.exec(script, server, threads, server, threads);\\n        }\\n    }\\n    return true;\\n}\\n\\nfunction crackServer(ns, server) {\\n    if (ns.hasRootAccess(server)) {\\n        return true;\\n    }\\n\\n    if (ns.fileExists('BruteSSH.exe')) {\\n        ns.brutessh(server);\\n    }\\n    if (ns.fileExists('FTPCrack.exe')) {\\n        ns.ftpcrack(server);\\n    }\\n    if (ns.fileExists('relaySMTP.exe')) {\\n        ns.relaysmtp(server);\\n    }\\n    if (ns.fileExists('HTTPWorm.exe')) {\\n        ns.httpworm(server);\\n    }\\n    if (ns.fileExists('SQLInject.exe')) {\\n        ns.sqlinject(server);\\n    }\\n    if (ns.getServerRequiredHackingLevel(server) > ns.getHackingLevel() ||\\n        ns.getServerNumPortsRequired(server) > hackablePorts) {\\n        return false;\\n    } else {\\n        ns.nuke(server);\\n        ns.tprint(`New Server Cracked: ${server}!`);\\n        return true;\\n    }\\n}\\n\\nexport function findHackablePorts(ns) {\\n    let hackPorts = 0;\\n    if (ns.fileExists('BruteSSH.exe')) {\\n        hackPorts += 1;\\n    }\\n    if (ns.fileExists('FTPCrack.exe')) {\\n        hackPorts += 1;\\n    }\\n    if (ns.fileExists('relaySMTP.exe')) {\\n        hackPorts += 1;\\n    }\\n    if (ns.fileExists('HTTPWorm.exe')) {\\n        hackPorts += 1;\\n    }\\n    if (ns.fileExists('SQLInject.exe')) {\\n        hackPorts += 1;\\n    }\\n    hackablePorts = hackPorts;\\n}\",\"filename\":\"/bin/pwn.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"import.js\",\"url\":\"blob:file:///e24e1930-9a18-44ee-a344-c185582178c5\",\"moduleSequenceNumber\":108119},{\"filename\":\"/bin/pwn.js\",\"url\":\"blob:file:///5e1b145f-d576-46a0-8c1c-276dd621cf65\",\"moduleSequenceNumber\":110066}],\"dependents\":[],\"ramUsage\":5.15,\"server\":\"home\",\"moduleSequenceNumber\":110066,\"_hash\":\"f0240c721cd5a1d6f5a15101cebc1b3786547715d356f8d4fe1dccc6bd1019a2\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getFolder, getServerPrefix } from 'import.js';\\nlet maxValueServers;\\n\\n/* Identify servers worth more than $10 Billion,\\n * deploy the hack script and attack those servers\\n * using all purchased servers.\\n */\\nexport async function main(ns) {\\n    maxValueServers = {\\n        zero: [],\\n        million: [],\\n        billion: [],\\n        trillion: []\\n    };\\n    findServer(ns, 'home', 'home', checkValue);\\n    ns.run(`/${getFolder()}/remoteHack.js`, 1, highest(ns).join(','));\\n}\\n\\nfunction findServer(ns, startServer, targetServer, func) {\\n    let servers = ns.scan(targetServer, true).filter((server) => server !== startServer && !server.includes(getServerPrefix));\\n    if (!ns.hasRootAccess(targetServer)) { return false; }\\n    servers.forEach((server) => {\\n        func.call(this, ns, server);\\n        if (ns.hasRootAccess(server)) {\\n            findServer(ns, targetServer, server, func);\\n        }\\n    });\\n}\\n\\nfunction checkValue(ns, server) {\\n    if (!ns.hasRootAccess(server)) {\\n        return;\\n    }\\n    let serverMoney = ns.getServerMaxMoney(server);\\n    if (serverMoney > 1e12) {\\n        maxValueServers.trillion.push(server);\\n    } else if (serverMoney > 1e9) {\\n        maxValueServers.billion.push(server);\\n    } else if (serverMoney > 0) {\\n        maxValueServers.million.push(server);\\n    } else {\\n        maxValueServers.zero.push(server);\\n    }\\n}\\n\\nfunction highest(ns) {\\n    if (maxValueServers.trillion.length > 0) {\\n        return maxValueServers.trillion;\\n    }\\n    if (maxValueServers.billion.length > 0) {\\n        return maxValueServers.billion;\\n    }\\n    if (maxValueServers.million.length > 0) {\\n        return maxValueServers.million;\\n    }\\n}\",\"filename\":\"/scripts/autoRemoteHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"import.js\",\"url\":\"blob:file:///3c2a79b5-b498-400c-8125-a097bea262a0\",\"moduleSequenceNumber\":99960},{\"filename\":\"/scripts/autoRemoteHack.js\",\"url\":\"blob:file:///579333ca-bf96-4542-b8da-67f4411b51b3\",\"moduleSequenceNumber\":101007}],\"dependents\":[],\"ramUsage\":2.95,\"server\":\"home\",\"moduleSequenceNumber\":108108,\"_hash\":\"0a44f15d5c808191719bdc1a774692b405faf03d995467120b769bf80fcccaa2\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getFolder, getServerPrefix } from 'import.js';\\nimport { serverHackStatus, serverReport } from '/scripts/serverStatus.js';\\n\\n/*\\n * This is a dashboard that outputs the status\\n * of your entire server network.\\n */\\nexport async function main(ns) {\\n    findServer(ns, 'home', 'home', 1);\\n}\\n\\nfunction findServer(ns, startServer, targetServer, i) {\\n    let servers = ns.scan(targetServer, true)\\n        .filter((server) => server !== startServer && !server.includes(getServerPrefix()));\\n    servers.forEach((server) => {\\n        ns.tprint(`😹${'>'.repeat(i)}`);\\n        serverReport(ns, server);\\n        if (serverHackStatus(ns, server) !== \\\"🔐\\\") {\\n            findServer(ns, targetServer, server, i + 1);\\n        }\\n    });\\n}\\n\",\"filename\":\"/scripts/dashboard.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/serverStatus.js\",\"url\":\"blob:file:///d9384e31-f9ec-4ff1-b33a-95f592cfffa7\",\"moduleSequenceNumber\":421141},{\"filename\":\"import.js\",\"url\":\"blob:file:///8d9fc83a-3a95-4465-a603-b7bf10594c73\",\"moduleSequenceNumber\":420825},{\"filename\":\"/scripts/dashboard.js\",\"url\":\"blob:file:///a402c665-d75b-45c4-bade-33c9b12d13eb\",\"moduleSequenceNumber\":421143}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"home\",\"moduleSequenceNumber\":108109,\"_hash\":\"220e6bc01c4c625d7a960dc7a5284658e52b1df2dd9281487a64407abd3a9d5f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/* A simple lightweight script that is deployed\\n * to remote and local servers to repeatedly hack\\n * a particular server.\\n * The smaller this is, the more threads can be deployed.\\n * args[0] - server name\\n * args[1] - threads to attack with\\n */\\nexport async function main(ns, args) {\\n    await hackServer(ns, ns.args[0], ns.args[1]);\\n}\\n\\nasync function hackServer(ns, server, threads) {\\n    ns.disableLog('getServerSecurityLevel');\\n    let serverSecurityThreshold = ns.getServerMinSecurityLevel(server) + 2;\\n    let serverMoneyThreshold = ns.getServerMaxMoney(server) * 0.95;\\n    let opts = { threads: threads, stock: true };\\n    while (true) {\\n        if (ns.getServerSecurityLevel(server) > serverSecurityThreshold) {\\n            await ns.weaken(server, opts);\\n        } else if (ns.getServerMoneyAvailable(server) < serverMoneyThreshold) {\\n            await ns.grow(server, opts);\\n        } else {\\n            await ns.hack(server, opts);\\n        }\\n    }\\n}\\n\\nexport function autocomplete(data, args) {\\n    return [...data.servers];\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///a01180b6-34e0-4ba4-8007-668b81653789\",\"moduleSequenceNumber\":100880}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"home\",\"moduleSequenceNumber\":108110,\"_hash\":\"e7a82cc721932419c47eb52b39b72ad40f1e4654a5bf227061e24250e346d9fd\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getFolder } from 'import.js';\\n/* Run various scripts easily and from one interface\\n */\\nexport async function main(ns) {\\n  const command = ns.args[0];\\n  const commandArgs = ns.args.slice(1);\\n  await runCommand(ns, command, commandArgs);\\n}\\n\\nasync function runCommand(ns, command, commandArgs) {\\n  switch (command) {\\n    case 'autoHack':\\n    case 'autoRemoteHack':\\n    case 'dashboard':\\n    case 'factionManager':\\n    case 'gangManager':\\n    case 'hacknetManager':\\n    case 'hacknetNodeManager':\\n    case 'hacknetUpgradeManager':\\n    case 'purchaseServers':\\n    case 'stockManager':\\n      ns.run(`/${getFolder()}/${command}.js`);\\n      break;\\n    case 'localGrow':\\n    case 'localHack':\\n      ns.run(`/${getFolder()}/${command}.js`, 1, commandArgs[0]);\\n      break;\\n    case 'sudo autohack':\\n    case 'sudo autoHack':\\n      await runCommand(ns, 'autoHack');\\n      await runCommand(ns, 'autoRemoteHack');\\n      break;\\n    case 'autohack':\\n      await runCommand(ns, 'autoHack');\\n      break;\\n    case 'serverhack':\\n    case 'serverHack':\\n      await runCommand(ns, 'autoRemoteHack');\\n      break;\\n    case 'dash':\\n    case 'status':\\n      await runCommand(ns, 'dashboard');\\n      break;\\n    case 'buyServer':\\n    case 'purchaseServer':\\n    case 'buyServers':\\n      await runCommand(ns, 'purchaseServers');\\n      break;\\n    default:\\n      ns.tprint(`Oh no! ${command} isn't a valid command. Try: dashboard, autoHack, autoRemoteHack, or hacknetManager.`);\\n  }\\n}\\n\\nexport function autocomplete(data, args) {\\n  return [\\n    'autoHack',\\n    'autoRemoteHack',\\n    'dashboard',\\n    'factionManager',\\n    'gangManager',\\n    'hacknetManager',\\n    'localGrow',\\n    'localHack',\\n    'purchaseServer',\\n    'stockManager',\\n    ...data.servers\\n  ];\\n}\",\"filename\":\"/scripts/hax.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"import.js\",\"url\":\"blob:file:///a878ade8-9d95-4b39-8d9a-9c5eb3eae264\",\"moduleSequenceNumber\":420825},{\"filename\":\"/scripts/hax.js\",\"url\":\"blob:file:///10a5a508-43d2-4119-a4da-3389ccdc6b10\",\"moduleSequenceNumber\":421142}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"home\",\"moduleSequenceNumber\":108111,\"_hash\":\"5550ce84c18885a1959f70b91ba661d4c29ef3ced94232a4bf3b61ff9c398d14\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerPrefix } from 'import.js';\\n\\nlet maxServers;\\nlet servers;\\n\\n/*\\n * Purchases the best server available with the\\n * user's current money. If the server limit is\\n * reached, replaces the worst server. Repeatable.\\n */\\nexport async function main(ns) {\\n    // Default Values\\n    maxServers = ns.getPurchasedServerLimit();\\n    servers = ns.getPurchasedServers(true);\\n    serverInfo(ns);\\n    await buyServers(ns);\\n}\\n\\nfunction serverInfo(ns) {\\n    ns.tprint(`You have ${servers.length}/${maxServers} servers`);\\n    Object.entries(groupServers(ns)).map((ramServers) => {\\n        ns.tprint(`${ramServers[0]}GB: ${ramServers[1]}`);\\n    });\\n}\\n\\nfunction groupServers(ns) {\\n    let groupedServers = {};\\n    servers.forEach((server) => {\\n        let ram = ns.getServerRam(server)[0];\\n        groupedServers[ram] = groupedServers[ram] || [];\\n        groupedServers[ram].push(server);\\n    });\\n    return groupedServers;\\n}\\n\\nasync function buyServers(ns) {\\n    let ram = ns.getPurchasedServerMaxRam();\\n    let shopServer = true;\\n    while (shopServer) {\\n        let myMoney = ns.getServerMoneyAvailable('home');\\n        let serverCost = ns.getPurchasedServerCost(ram);\\n        while (serverCost > myMoney && ram > 2) {\\n            ram = ram / 2;\\n            serverCost = ns.getPurchasedServerCost(ram);\\n        }\\n        shopServer = await ns.prompt(`Would you like to buy a ${ram}GB server for ${ns.nFormat(serverCost, \\\"$0.00a\\\")}`);\\n        if (shopServer) { shopServer = buyServer(ns, ram); }\\n    }\\n}\\n\\nfunction buyServer(ns, ram) {\\n    if (servers.length == maxServers) {\\n        let success = removeWeakestServer(ns, ram);\\n        if (!success) { return false; }\\n    }\\n    let server = ns.purchaseServer(`${getServerPrefix()}-${ram}GB`, ram);\\n    servers.push(server);\\n    ns.tprint(`Purchased ${server}: ${ram}GB`);\\n    return true;\\n}\\n\\nfunction removeWeakestServer(ns, newRam) {\\n    let groupedServers = groupServers(ns);\\n    let min = Math.min(...Object.keys(groupedServers));\\n    if (min >= newRam) {\\n        ns.tprint(`Your smallest server has ${min}GB RAM and you wanted to purchase ${newRam}GB server`);\\n        return false;\\n    }\\n    let smallest_server = groupedServers[min][0];\\n    ns.killall(smallest_server);\\n    let result = ns.deleteServer(smallest_server);\\n    servers = ns.getPurchasedServers(true);\\n    return true;\\n}\\n\",\"filename\":\"/scripts/purchaseServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"import.js\",\"url\":\"blob:file:///bb0d0168-de56-48b8-aa6e-f56041cb67e7\",\"moduleSequenceNumber\":99960},{\"filename\":\"/scripts/purchaseServers.js\",\"url\":\"blob:file:///3ec71bc4-d435-47f9-883c-4f028209ba3a\",\"moduleSequenceNumber\":101006}],\"dependents\":[],\"ramUsage\":9.4,\"server\":\"home\",\"moduleSequenceNumber\":108112,\"_hash\":\"5da036a3b110ce5ba41fc38c559945a5158b30a3bd797235912d4fd1e8ec5c79\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getHackScript } from 'import.js';\\n\\n/* Deploys the hack script to all purchased servers\\n * Differs from autoRemoteHack because you can specify\\n * the target\\n * args[0] - list of servers\\n * args[1] - alternate Hackscript (default from import)\\n */\\nexport async function main(ns) {\\n  let myServers = ns.getPurchasedServers();\\n  let targetServers = ns.args[0].split(',');\\n  let hackScript = ns.args[1] || getHackScript();\\n  let scriptRam = ns.getScriptRam(hackScript);\\n  for (const [index, server] of myServers.entries()) {\\n    ns.killall(server);\\n    let serverRam = ns.getServerRam(server)[0];\\n    let threads = Math.floor(serverRam / scriptRam);\\n    let serverIndex = index % targetServers.length;\\n    let targetServer = targetServers[serverIndex];\\n    ns.print(`${server} is hacking ${targetServer} with ${threads} threads.`);\\n    await ns.scp(hackScript, server);\\n    if (threads > 0) {\\n      ns.exec(hackScript, server, threads, targetServer, threads);\\n    }\\n  }\\n}\\n\",\"filename\":\"/scripts/remoteHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"import.js\",\"url\":\"blob:file:///a68c88e6-10f9-4351-9855-b43b651f4a89\",\"moduleSequenceNumber\":99960},{\"filename\":\"/scripts/remoteHack.js\",\"url\":\"blob:file:///bee74205-46eb-41ed-9720-56f547400b3e\",\"moduleSequenceNumber\":101008}],\"dependents\":[],\"ramUsage\":6.45,\"server\":\"home\",\"moduleSequenceNumber\":108113,\"_hash\":\"8bb243a76c83c30301e9e187586e47c1d3c77ee5c47a1662ccebc8b13dde20dc\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"let hackPorts = 0;\\n\\n/*\\n * Utility functions that report serverStatus\\n * and Hackability \\n */\\nexport async function main(ns) {\\n  let server = ns.args[0];\\n  serverReport(ns, server);\\n}\\n\\nexport function serverReport(ns, server) {\\n  let serverLock = serverHackStatus(ns, server);\\n  ns.tprint(`${serverLock} ${server}`);\\n  if (serverLock == \\\"🔓\\\") {\\n    ns.tprint(`🛡️${Math.round(ns.getServerSecurityLevel(server))}/${ns.getServerMinSecurityLevel(server)}`);\\n    ns.tprint(`💸${ns.nFormat(ns.getServerMoneyAvailable(server), \\\"$0.000a\\\")}/${ns.nFormat(ns.getServerMaxMoney(server), \\\"$0.000a\\\")}`);\\n  } else {\\n    ns.tprint(`Hack Level: ${ns.getServerRequiredHackingLevel(server)}`);\\n    ns.tprint(`Ports: ${ns.getServerNumPortsRequired(server)}`);\\n  }\\n  ns.tprint('-----------');\\n}\\n\\nexport function serverHackStatus(ns, server) {\\n  if (ns.hasRootAccess(server)) {\\n    return \\\"🔓\\\";\\n  }\\n  if (ns.getServerRequiredHackingLevel(server) > ns.getHackingLevel() ||\\n    ns.getServerNumPortsRequired(server) > hackablePorts) {\\n    return \\\"🔐\\\";\\n  }\\n  return \\\"🔒\\\";\\n}\\n\\nexport function hackablePorts(ns) {\\n  if (hackPorts > 0) {\\n    return hackPorts;\\n  }\\n  if (ns.fileExists('BruteSSH.exe')) {\\n    hackPorts += 1;\\n  }\\n  if (ns.fileExists('FTPCrack.exe')) {\\n    hackPorts += 1;\\n  }\\n  if (ns.fileExists('relaySMTP.exe')) {\\n    hackPorts += 1;\\n  }\\n  if (ns.fileExists('HTTPWorm.exe')) {\\n    hackPorts += 1;\\n  }\\n  if (ns.fileExists('SQLInject.exe')) {\\n    hackPorts += 1;\\n  }\\n  return hackPorts;\\n}\\n\",\"filename\":\"/scripts/serverStatus.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/serverStatus.js\",\"url\":\"blob:file:///b6624d87-9afa-4c8e-8af7-f378a2294b6a\",\"moduleSequenceNumber\":421141}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"home\",\"moduleSequenceNumber\":108114,\"_hash\":\"85510f85ecc586dbae588ff794c8d87cf14b69b3a5b73818d4898853274ec57a\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const SCRIPT = '/scripts/localHack.js';\\nconst HACKSCRIPT = '/scripts/hack.js';\\nconst HOME = 'home';\\nconst RESERVERAM = 0.2; // RAM in GB to reserve for running other commands, scripts\\n\\nexport function autocomplete(data, args) {\\n\\treturn [...data.servers];\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tif (typeof target === 'undefined') {\\n\\t\\tns.tprint(`Usage: run ${SCRIPT} TARGET`);\\n\\t\\tns.tprint(`Example: run ${SCRIPT} iron-gym`);\\n\\t\\treturn;\\n\\t}\\n\\n\\tif (ns.scriptRunning(HACKSCRIPT, HOME)) {\\n\\t\\tns.scriptKill(HACKSCRIPT, HOME);\\n\\t\\tns.tprint(`Killed running instance of ${HACKSCRIPT}`);\\n\\t}\\n\\n\\tconst freeRam = ns.getServerMaxRam(HOME) - ns.getServerUsedRam(HOME);\\n\\tconst threadRam = ns.getScriptRam(HACKSCRIPT);\\n\\n\\tconst usableRam = Math.floor((1.0 - RESERVERAM) * freeRam);\\n\\tconst threads = Math.floor(usableRam / threadRam);\\n\\n\\tif (threads === 0) {\\n\\t\\tns.print(`Insufficient RAM for hack threads`);\\n\\t\\tns.exit();\\n\\t}\\n\\tns.exec(HACKSCRIPT, HOME, threads, target, threads);\\n}\",\"filename\":\"/scripts/localHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/localHack.js\",\"url\":\"blob:file:///df002c23-5efc-44b7-a7cc-50a3ba5c0251\",\"moduleSequenceNumber\":100879}],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"home\",\"moduleSequenceNumber\":108115,\"_hash\":\"408257f0255fa86e47f07f5935a1a94d266c7f26fed07dcfe9debf7864db79c3\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const ATTRIBUTES = ['hack', 'str', 'def', 'dex', 'agi', 'cha'];\\nconst TASKS = [`Train Hacking`, `Ethical Hacking`, `Money Laundering`, `Cyberterrorism`];\\nconst TICK = 10 * 1000;\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  ns.disableLog('sleep');\\n  ns.tail();\\n\\n  if (! ns.gang.inGang()) {\\n    if (! ns.gang.createGang(`NiteSec`)) { ns.exit(); }\\n  }\\n\\n  while (true) {\\n    recruitment(ns);\\n    ascension(ns);\\n    tasks(ns);\\n    await ns.sleep(TICK);\\n  }\\n}\\n\\nfunction recruitment(ns) {\\n  if (!canRecruit(ns)) { return false; }\\n  let name = getRecruitName();\\n  return (recruit(ns, name) && setTask(ns, name, `Train Hacking`));\\n}\\nfunction canRecruit(ns) { return ns.gang.canRecruitMember(); }\\nfunction getRecruitName() { return Math.random().toString(16).substring(2, 8); }\\nfunction recruit(ns, name) { return ns.gang.recruitMember(name); }\\nfunction setTask(ns, name, task) { return ns.gang.setMemberTask(name, task); }\\n\\n\\nfunction ascension(ns) {\\n  for (let member of getGangData(ns)) {\\n    let ascendResult = ns.gang.getAscensionResult(member.name);\\n    if (typeof ascendResult === 'undefined') { continue; }\\n\\n    let activeAttribute = getActiveAttribute(member, ascendResult);\\n    ns.print(`${member.name}.${activeAttribute.name}: ${activeAttribute.ascGain - ascendGainTarget(activeAttribute)}`);\\n    if (activeAttribute.ascGain > ascendGainTarget(activeAttribute)) {\\n      ns.gang.ascendMember(member.name);\\n      ns.toast(`Ascended ${member.name}`);\\n    }\\n  }\\n}\\nfunction getActiveAttribute(member, ascendResult) {\\n  let attrSnaps = [];\\n  for (let attribute of ATTRIBUTES) {\\n    let expString = `${attribute}_exp`;\\n    let baseMultString = `${attribute}_mult`;\\n    let ascMultString = `${attribute}_asc_mult`;\\n    attrSnaps.push(\\n      {\\n        'name': attribute,\\n        'rank': member[attribute],\\n        'xp': member[expString],\\n        'baseMult': member[baseMultString],\\n        'ascMult': member[ascMultString],\\n        'ascResult': ascendResult[attribute],\\n        'ascGain': member[ascMultString] * (ascendResult[attribute] - 1),\\n      }\\n    );\\n  }\\n  return attrSnaps.sort((a, b) => b.xp - a.xp)[0];\\n}\\nfunction ascendGainTarget(attributeData) { return (Math.log10(attributeData.ascMult) > 1) ? Math.log10(attributeData.ascMult) : 1; }\\n\\nfunction tasks(ns) {\\n  let gangData = getGangData(ns);\\n  let trainees = gangData.filter(hasLowAscensionMultiplier);\\n  trainees.forEach((trainee) => { setTask(ns, trainee.name, `Train Hacking`) });\\n  let workers = gangData.filter(hasHighAscensionMultiplier).sort((a, b) => b.hack_asc_mult - a.hack_asc_mult);\\n  let topWorker = workers.shift();\\n  setTask(ns, topWorker.name, `Ethical Hacking`);\\n  let aproposWorkerTask = getWorkerTask(ns);\\n  workers.forEach((worker) => {\\n    setTask(ns, worker.name, aproposWorkerTask);\\n  });\\n}\\n\\nfunction getWorkerTask(ns) {\\n  if (ns.getFactionRep(`NiteSec`) < 2500000) { return `Cyberterrorism`; }\\n  return `Money Laundering`;\\n}\\n\\nfunction getGangData(ns) {\\n  let data = [];\\n  ns.gang.getMemberNames().forEach((name) => {\\n    data.push(ns.gang.getMemberInformation(name));\\n  });\\n  return data;\\n}\\nfunction hasLowAscensionMultiplier(element) { return element.hack_asc_mult < 100.0; }\\nfunction hasHighAscensionMultiplier(element) { return element.hack_asc_mult >= 100.0; }\",\"filename\":\"/bin/gangManager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/gangManager.js\",\"url\":\"blob:file:///e45f43df-7303-422c-9738-23ee4cebac6f\",\"moduleSequenceNumber\":25595}],\"dependents\":[],\"ramUsage\":18.6,\"server\":\"home\",\"moduleSequenceNumber\":108116,\"_hash\":\"7198fd8c5c6dbc14ee78acd8ae241fbdeaa030332b9c07dec2bbc3647615c1e5\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.inGang\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.createGang\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.canRecruitMember\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.recruitMember\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getAscensionResult\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.ascendMember\",\"cost\":4},{\"type\":\"fn\",\"name\":\"singularity.getFactionRep\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getMemberInformation\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const TICK = 10 * 1000; // seconds in millis\\nconst BUYTHRESH = 0.55; // 55% or better growth forecast to buy\\nconst LOSSTHRESH = -0.0123; // 5% loss triggers sell\\nconst ROITHRESH = 0.035; // 25% or better profit\\nconst CASHFLOOR = 10e6; // have 10.000m to do other stuff with\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t// ensure access to necessary APIs\\n\\tif (!haveAPIAccess(ns)) {\\n\\t\\tns.tprint(`Not haz API accesses`);\\n\\t\\treturn;\\n\\t}\\n\\n\\tawait stockManager(ns);\\n}\\n\\nfunction haveAPIAccess(ns) { return (haveTIXAccess(ns) && have4SDataAccess(ns)); }\\nfunction haveTIXAccess(ns) { return ns.stock.getSymbols; }\\nfunction have4SDataAccess(ns) { return ns.stock.getForecast; }\\n\\nasync function stockManager(ns, funding) {\\n\\tconst symbols = ns.stock.getSymbols();\\n\\twhile (true) {\\n\\t\\t// dump everything\\n\\t\\tlet marketData = getMarketData(ns, symbols);\\n\\t\\t//ns.print(marketData.sort((a, b) => b.earnings - a.earnings));\\n\\n\\t\\t// look at what else is available for purchase\\n\\t\\tlet noHoldings = marketData.filter(haveNoShares);\\n\\t\\t//ns.print(noHoldings.filter(haveNegativeForecast).sort((a, b) => b.forecast - a.forecast));\\n\\t\\tlet projectedWinners = noHoldings.filter(havePositiveForecast);\\n\\t\\tbuyStocks(ns, projectedWinners);\\n\\n\\t\\t// look at what we have for wheat, chaff\\n\\t\\tlet myHoldings = marketData.filter(haveShares);\\n\\t\\t//ns.print(myHoldings.sort((a, b) => b.earnings - a.earnings));\\n\\t\\t//let projectedLosers = myHoldings.filter(haveNegativeForecast);\\n\\t\\t//sellStocks(ns, projectedLosers);\\n\\t\\t//let actualLosers = myHoldings.filter(haveSufficientLosses);\\n\\t\\t//sellStocks(ns, actualLosers);\\n\\t\\tlet breadWinners = myHoldings.filter(haveSufficientROI);\\n\\t\\t//ns.print(breadWinners);\\n\\t\\tsellStocks(ns, breadWinners);\\n\\n\\t\\t/*\\n\\t\\tns.tprintf(`\\\\n=========================== HOLDINGS ============================\\\\n`);\\n\\t\\tns.tprint(myHoldings);\\n\\t\\tns.tprint(`=========================== TO BUY ==========================`);\\n\\t\\tns.tprint(stuffToBuy);\\n\\t\\tns.tprint(`=========================== TO SELL ==========================`);\\n\\t\\tns.tprint(stuffToSell);\\n\\t\\t*/\\n\\n\\t\\tawait ns.sleep(TICK);\\n\\t}\\n}\\n\\nfunction sellStocks(ns, marketData) {\\n\\tfor (let symbolData of marketData) {\\n\\t\\tsellStock(ns, symbolData);\\n\\t}\\n}\\n\\nfunction sellStock(ns, symbolData) {\\n\\tlet symbol = symbolData.symbol;\\n\\tlet shares = symbolData.shares;\\n\\tns.stock.sell(symbol, shares);\\n}\\n\\nfunction buyStocks(ns, marketData) {\\n\\tfor (let symbolData of marketData) {\\n\\t\\tbuyStock(ns, symbolData);\\n\\t}\\n}\\n\\nfunction buyStock(ns, symbolData) {\\n\\tlet symbol = symbolData.symbol;\\n\\tlet availableFunds = myMoney(ns) - CASHFLOOR;\\n\\tif (availableFunds < 0) { return; }\\n\\tlet maxShares = ns.stock.getMaxShares(symbol);\\n\\tlet sharesAfforded = availableFunds / ns.stock.getPrice(symbol);\\n\\tlet sharesToBuy = sharesAfforded > 0.25 * maxShares ? 0.25 * maxShares : sharesAfforded;\\n\\tns.stock.buy(symbol, sharesToBuy);\\n}\\n\\nfunction haveNoShares(symbolData, symbolIndex, marketData) { return symbolData.shares < 1; }\\nfunction haveShares(symbolData, symbolIndex, marketData) { return symbolData.shares > 0; }\\nfunction havePositiveForecast(symbolData, symbolIndex, marketData) { return symbolData.forecast > BUYTHRESH; }\\nfunction haveNegativeForecast(symbolData, symbolIndex, marketData) { return symbolData.forecast < 0.45; }\\nfunction havePositiveGrowth(symbolData, symbolIndex, marketData) { return symbolData.earnings > 0; }\\nfunction haveSufficientROI(symbolData, symbolIndex, marketData) { return symbolData.earnings > ROITHRESH; }\\nfunction haveSufficientLosses(symbolData, symbolIndex, marketData) { return symbolData.earnings < LOSSTHRESH; }\\n\\nfunction getMarketData(ns, symbols) {\\n\\tlet marketData = [];\\n\\tfor (let symbol of symbols) { marketData.push(getSymbolData(ns, symbol)); }\\n\\treturn marketData;\\n}\\n\\nfunction getSymbolData(ns, symbol) {\\n\\tlet position = ns.stock.getPosition(symbol);\\n\\tlet shares = position[0];\\n\\tlet average = position[1];\\n\\tlet currentAverage = ns.stock.getPrice(symbol);\\n\\tlet earnings = (currentAverage - average) / average;\\n\\tlet forecast = ns.stock.getForecast(symbol);\\n\\tlet symbolData = {\\n\\t\\t'symbol': symbol,\\n\\t\\t'shares': shares,\\n\\t\\t'average': average,\\n\\t\\t'currentAverage': currentAverage,\\n\\t\\t'earnings': earnings,\\n\\t\\t'forecast': forecast,\\n\\t};\\n\\treturn symbolData;\\n}\\n\\nfunction myMoney(ns) {\\n\\treturn ns.getServerMoneyAvailable(`home`);\\n}\",\"filename\":\"/bin/stockManager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/bin/stockManager.js\",\"url\":\"blob:file:///b4dec102-72a1-41c4-a324-7d6e0e014ed3\",\"moduleSequenceNumber\":25120}],\"dependents\":[],\"ramUsage\":17.2,\"server\":\"home\",\"moduleSequenceNumber\":108117,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getForecast\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.sell\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getMaxShares\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.buy\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const FACTIONS = [\\n\\t\\\"Illuminati\\\",\\n\\t\\\"Daedalus\\\",\\n\\t\\\"The Covenant\\\",\\n\\t\\\"ECorp\\\",\\n\\t\\\"MegaCorp\\\",\\n\\t\\\"Bachman & Associates\\\",\\n\\t\\\"Blade Industries\\\",\\n\\t\\\"NWO\\\",\\n\\t\\\"Clarke Incorporated\\\",\\n\\t\\\"OmniTek Incorporated\\\",\\n\\t\\\"Four Sigma\\\",\\n\\t\\\"KuaiGong International\\\",\\n\\t\\\"Fulcrum Secret Technologies\\\",\\n\\t\\\"BitRunners\\\",\\n\\t\\\"The Black Hand\\\",\\n\\t\\\"NiteSec\\\",\\n\\t\\\"Aevum\\\",\\n\\t\\\"Chongqing\\\",\\n\\t\\\"Ishima\\\",\\n\\t\\\"New Tokyo\\\",\\n\\t\\\"Sector-12\\\",\\n\\t\\\"Volhaven\\\",\\n\\t\\\"Speakers for the Dead\\\",\\n\\t\\\"The Dark Army\\\",\\n\\t\\\"The Syndicate\\\",\\n\\t\\\"Silhouette\\\",\\n\\t\\\"Tetrads\\\",\\n\\t\\\"Slum Snakes\\\",\\n\\t\\\"Netburners\\\",\\n\\t\\\"Tian Di Hui\\\",\\n\\t\\\"CyberSec\\\",\\n\\t\\\"Bladeburners\\\",\\n\\t\\\"Church of the Machine God\\\",\\n];\\nconst WORK = `Hacking Contracts`;\\nconst TICK = 60 * 1000;\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\n\\twhile(NNNN) {\\n\\t\\tjoinFactions(ns);\\n\\t\\tlet\\n\\t}\\n\\tfor (let faction of FACTIONS) {\\n\\t\\tlet maxRep = getAugmentationData(ns, faction).sort((a, b) => b.rep - a.rep)[0].rep;\\n\\t\\twhile (ns.getFactionRep(faction) < maxRep) {\\n\\t\\t\\tns.workForFaction(faction, WORK, false);\\n\\t\\t\\tawait ns.sleep(TICK);\\n\\t\\t}\\n\\t\\tns.stopAction();\\n\\t\\tns.tprint(`Sufficient Rep: ${faction}`);\\n\\t}\\n}\\n\\nconst function joinFactions(ns) {\\n\\tlet factions = ns.checkFactionInvitations();\\n\\tfactions.forEach(faction => ns.joinFaction(faction));\\n\\treturn factions;\\n}\\n\\nconst function getAugmentationData(ns, faction) {\\n\\tlet augmentationData = [];\\n\\tfor (let augmentation of ns.getAugmentationsFromFaction(faction)) {\\n\\t\\taugmentationData.push({\\n\\t\\t\\t'name': augmentation,\\n\\t\\t\\t'price': ns.getAugmentationPrice(augmentation),\\n\\t\\t\\t'rep': ns.getAugmentationRepReq(augmentation),\\n\\t\\t});\\n\\t}\\n\\treturn augmentationData;\\n}\\n\\nconst function getFactionData(ns, faction) {\\n\\n}\\n\\nconst function getAllFactions() { return FACTIONS; }\",\"filename\":\"/wip/facMan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/factionManager.js\",\"url\":\"blob:file:///b4f8a4e8-83c9-4659-aa57-3c8adc265258\",\"moduleSequenceNumber\":2272}],\"dependents\":[],\"ramUsage\":241.6,\"server\":\"home\",\"moduleSequenceNumber\":108118,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getFactionRep\",\"cost\":16},{\"type\":\"fn\",\"name\":\"workForFaction\",\"cost\":48},{\"type\":\"fn\",\"name\":\"stopAction\",\"cost\":16},{\"type\":\"fn\",\"name\":\"getAugmentationsFromFaction\",\"cost\":80},{\"type\":\"fn\",\"name\":\"getAugmentationPrice\",\"cost\":40},{\"type\":\"fn\",\"name\":\"getAugmentationRepReq\",\"cost\":40}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"let config = {\\n    folder: 'scripts',\\n    rootUrl: 'https://raw.githubusercontent.com/FlyingJ/bitburner-scripts/main/',\\n    serverPrefix: 'j4ys3rv',\\n};\\n/*\\n* This will import all files listed in importFiles.\\n*/\\nexport async function main(ns) {\\n    let filesImported = await importFiles(ns);\\n    ns.tprint('='.repeat(20));\\n    if (filesImported) {\\n        ns.tprint('Hey! Thank you for downloading the BitBurner Scripts.');\\n        ns.tprint(`You've installed these in the ${getFolder()} directory.`);\\n        ns.tprint(\\n            `A good place to start is running \\\\`run /${getFolder()}/hax.js\\\\``\\n        );\\n    } else {\\n        ns.tprint(\\n            'You had some issues downloading files, please reach out to the repo maintainer or check your config.'\\n        );\\n    }\\n}\\n\\nasync function importFiles(ns) {\\n    let files = [\\n        'autoHack.js',\\n        'autoRemoteHack.js',\\n        'dashboard.js',\\n        'gangManager.js',\\n        'hack.js',\\n        'hacknetManager.js',\\n        'hacknetNodeManager.js',\\n        'hacknetUpgradeManager.js',\\n        'hax.js',\\n        'localHack.js',\\n        'purchaseServers.js',\\n        'remoteHack.js',\\n        'serverStatus.js',\\n        'stockManager.js',\\n    ];\\n    let filesImported = true;\\n    for (let file of files) {\\n        let remoteFileName = `${getRootUrl()}scripts/${file}`;\\n        let result = await ns.wget(remoteFileName, `/${getFolder()}/${file}`);\\n        filesImported = filesImported && result;\\n        ns.tprint(`File: ${file}: ${result ? '✔️' : '❌'}`);\\n    }\\n    return filesImported;\\n}\\n\\nexport function getFolder() { return config.folder; }\\nexport function getRootUrl() { return config.rootUrl; }\\nexport function getServerPrefix() { return config.serverPrefix; }\\n\\nexport function getHackScript() { return `/${getFolder()}/hack.js`; }\\nexport function getHacknetUpgradeScript() { return `/${getFolder()}/deployUpgrades.js`; }\",\"filename\":\"import.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"import.js\",\"url\":\"blob:file:///3e023008-1d8c-492e-8d1d-b47b189d524e\",\"moduleSequenceNumber\":80570}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":108119,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const TICK = 1250;\\nconst MAXWAIT = 3600 * 12; // 12 hours in seconds\\nconst BASEMAXNODEEARNINGS = 9171;\\nconst PARTS = ['Level', 'Ram', 'Core', 'Cache'];\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('sleep');\\n\\n\\tawait deployHacknet(ns);\\n\\n\\tns.print('Finished deploying hacknet');\\n}\\n\\n\\nasync function deployHacknet(ns) {\\n\\tlet options = getAllOptions(ns);\\n\\tlet option = leastCostlyOption(options);\\n\\tdo {\\n\\t\\tawait purchase(ns, option);\\n\\t\\toptions = getAllOptions(ns);\\n\\t\\toption = leastCostlyOption(options);\\n\\t} while (purchasesAvailable(option));\\n}\\n\\nfunction getAllOptions(ns) {\\n\\tlet options = [];\\n\\t// get upgrades\\n\\tfor (let nodeIndex = 0; nodeIndex < ns.hacknet.numNodes(); nodeIndex += 1) {\\n\\t\\toptions = options.concat(getPerNodeOptions(ns, nodeIndex));\\n\\t}\\n\\t// get next node\\n\\toptions = options.concat(\\n\\t\\t{\\n\\t\\t\\t'nodeIndex': undefined,\\n\\t\\t\\t'part': 'Node',\\n\\t\\t\\t'cost': cost(ns, undefined, 'Node')\\n\\t\\t});\\n\\treturn options;\\n}\\nfunction getPerNodeOptions(ns, nodeIndex) {\\n\\tlet options = [];\\n\\tfor (let part of PARTS) {\\n\\t\\tlet option = {\\n\\t\\t\\t'nodeIndex': nodeIndex,\\n\\t\\t\\t'part': part,\\n\\t\\t\\t'cost': cost(ns, nodeIndex, part)\\n\\t\\t};\\n\\t\\toptions.push(option);\\n\\t}\\n\\treturn options;\\n}\\nfunction cost(ns, nodeIndex, part) {\\n\\tif (part === 'Node') {\\n\\t\\treturn getNodeCost(ns);\\n\\t}\\n\\tlet costFunction = `get${part}UpgradeCost`;\\n\\treturn ns.hacknet[costFunction](nodeIndex, 1);\\n}\\nfunction getNodeCost(ns) {\\n\\t// make sure not to buy more nodes when unable to recoup the expense\\n\\t// in a reasonable amount of time\\n\\t//let cost = ns.hacknet.getPurchaseNodeCost();\\n\\t//const maxEarnings = BASEMAXNODEEARNINGS * hacknetMultProd(ns);\\n\\t//if (canRecoup(ns, cost, maxEarnings)) { return cost; }\\n\\treturn (ns.hacknet.numNodes() <= ns.hacknet.maxNumNodes()) ? ns.hacknet.getPurchaseNodeCost() : Infinity;\\n}\\n//function hacknetMultProd(ns) { return ns.getHacknetMultipliers().production; }\\n//function canRecoup(ns, cost, maxEarnings) { return breakEvenTime(cost, maxEarnings) < MAXWAIT ? true : false; }\\n//function breakEvenTime(cost, earnings) { return cost / earnings; }\\n\\nfunction leastCostlyOption(options) { return options.sort((a, b) => a.cost - b.cost)[0]; }\\nfunction purchasesAvailable(option) { return isFinite(option.cost); }\\n\\nasync function purchase(ns, option) {\\n\\tlet index = option.nodeIndex;\\n\\tlet part = option.part;\\n\\tlet cost = option.cost;\\n\\n\\twhile (cost > myMoney(ns)) { await ns.sleep(TICK); }\\n\\n\\tif (part === 'Node') {\\n\\t\\tns.print(`Purchase hacknet-node-${ns.hacknet.purchaseNode()}`);\\n\\t\\treturn true;\\n\\t}\\n\\n\\tlet upgradeFunction = `upgrade${part}`;\\n\\tns.print(`Purchase ${part} for hacknet-node-${index} at cost of $${cost}`);\\n\\treturn ns.hacknet[upgradeFunction](index, 1);\\n}\\n\\nfunction myMoney(ns) { return ns.getServerMoneyAvailable('home'); }\",\"filename\":\"/bin/hacknetManager.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/bin/hacknetManager.js\",\"url\":\"blob:file:///9da90b85-ca68-47e8-9724-3c9f4ec4e0d4\",\"moduleSequenceNumber\":108254}],\"dependents\":[],\"ramUsage\":5.7,\"server\":\"home\",\"moduleSequenceNumber\":108254,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const FACTIONS = [\\n\\t`Illuminati`,\\n\\t`Daedalus`,\\n\\t`The Covenant`,\\n\\t`Ecorp`,\\n\\t`MegaCorp`,\\n\\t`Bachman & Associates`,\\n\\t`Blade Industries`,\\n\\t`NWO`,\\n\\t`Clarke Incorporated`,\\n\\t`OmniTek Incorporated`,\\n\\t`Four Sigma`,\\n\\t`KuaiGong International`,\\n\\t`Fulcrum Secret Technologies`,\\n\\t`BitRunners`,\\n\\t`The Black Hand`,\\n\\t`NiteSec`,\\n\\t`Aevum`,\\n\\t`Chongqing`,\\n\\t`Ishima`,\\n\\t`New Tokyo`,\\n\\t`Sector-12`,\\n\\t`Volhaven`,\\n\\t`Speakers for the Dead`,\\n\\t`The Dark Army`,\\n\\t`The Syndicate`,\\n\\t`Silhouette`,\\n\\t`Tetrads`,\\n\\t`Slum Snakes`,\\n\\t`Netburners`,\\n\\t`Tian Di Hui`,\\n\\t`CyberSec`,\\n\\t`Bladeburners`,\\n\\t`Church of the Machine God`,\\n\\t];\\nconst WORKS = [`Hacking Contracts`, `Field Work`, `Security Work`];\\nconst WORK = `Security Work`;\\nconst TICK = 60 * 1000;\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\twhile (true) {\\n\\t\\tns.workForFaction(ns.args[0], WORK, false);\\n\\t\\tawait ns.sleep(TICK);\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\treturn FACTIONS;\\n}\",\"filename\":\"/scripts/factionChurn.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/factionChurn.js\",\"url\":\"blob:file:///7580b6f6-1374-4703-8341-2ea0f95b6fd9\",\"moduleSequenceNumber\":240984}],\"dependents\":[],\"ramUsage\":4.6,\"server\":\"home\",\"moduleSequenceNumber\":108121,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"singularity.workForFaction\",\"cost\":3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nconst getProps = (obj) =>\\n\\tObject.entries(obj).find(entry => entry[0]?.startsWith(`__reactProps`))?.[1]?.children?.props;\\n\\nexport async function main(ns) {\\n\\tlet boxes = Array.from(eval(`document`).querySelectorAll(`[class*=MuiBox-root]`));\\n\\tlet props = boxes.map(box => getProps(box)).find(x => x?.player);\\n\\n\\tif (props) {\\n\\t\\t// show classname to use\\n\\t\\tlet className = boxes.find(x => getProps(x)?.player).className;\\n\\t\\tns.tprintf(`INFO className: ${className}`);\\n\\n\\t\\t// get some bonuses\\n\\t\\t//props.player.money = props.player.money * 1111;\\n\\t\\t//props.player.hacking_exp = props.player.hacking_exp * 1111;\\n\\n\\t\\t// open the dev menu\\n\\t\\tprops.router.toDevMenu();\\n\\n\\t\\t//props.player.karma = props.player.karma * 1000;\\n\\t}\\n}\",\"filename\":\"/sbin/openDevMenu.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"dev.js\",\"url\":\"blob:file:///78b873b9-9475-4c3a-8c99-ce88c2f630ff\",\"moduleSequenceNumber\":497}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":108122,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const MONEYSHOT = 1e13;\\n\\n/** @param {NS} ns **/\\nconst getProps = (obj) =>\\n\\tObject.entries(obj).find(entry => entry[0]?.startsWith(`__reactProps`))?.[1]?.children?.props;\\n\\nexport async function main(ns) {\\n\\tlet boxes = Array.from(eval(`document`).querySelectorAll(`[class*=MuiBox-root]`));\\n\\tlet props = boxes.map(box => getProps(box)).find(x => x?.player);\\n\\n\\tif (props) {\\n\\t\\t// show classname to use\\n\\t\\tlet className = boxes.find(x => getProps(x)?.player).className;\\n\\t\\tns.tprintf(`INFO className: ${className}`);\\n\\n\\t\\tif (props.player['corporation']['funds'] < MONEYSHOT) {\\n\\t\\t\\tprops.player['corporation']['funds'] = MONEYSHOT;\\n\\t\\t} else {\\n\\t\\t\\tprops.player['corporation']['funds'] = props.player['corporation']['funds'] * MONEYSHOT;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/sbin/goFundCorp.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/sbin/goFundCorp.js\",\"url\":\"blob:file:///efaadde7-a822-4903-a0d4-1a51340075d7\",\"moduleSequenceNumber\":101084}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":108123,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t//let element = eval(`document`).querySelectorAll(`div[id='unclickable']`);\\n\\t//ns.tprint(Object.keys(element));\\n\\n\\tconst uc = document.getElementById(\\\"unclickable\\\");\\n\\n\\tlet evt = new MouseEvent(\\\"click\\\", {\\n\\t\\tbubbles: true,\\n\\t\\tcancelable: true,\\n\\t\\tview: window,\\n\\t});\\n\\n\\tuc.dispatchEvent(evt);\\n\\t/*\\n\\telements.forEach(element => {\\n\\t\\t\\telement.dispatchEvent(\\n\\t\\t\\tnew MouseEvent(`click`, {\\n\\t\\t\\t\\tview: window,\\n\\t\\t\\t\\tbubbles: true,\\n\\t\\t\\t\\tcancelable: true,\\n\\t\\t\\t\\tbuttons: 1,\\n\\t\\t\\t})\\n\\t\\t)\\n\\t}\\n\\t*/\\n}\",\"filename\":\"/sbin/unclickable.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/sbin/unclickable.js\",\"url\":\"blob:file:///4b4a521b-d163-43c1-82e4-a7e9a4a41abc\",\"moduleSequenceNumber\":236340}],\"dependents\":[],\"ramUsage\":51.6,\"server\":\"home\",\"moduleSequenceNumber\":108124,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"dom\",\"name\":\"document\",\"cost\":25},{\"type\":\"dom\",\"name\":\"window\",\"cost\":25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const MONEYSHOT = 1e13;\\n\\n/** @param {NS} ns **/\\nconst getProps = (obj) =>\\n\\tObject.entries(obj).find(entry => entry[0]?.startsWith(`__reactProps`))?.[1]?.children?.props;\\n\\nexport async function main(ns) {\\n\\tlet boxes = Array.from(eval(`document`).querySelectorAll(`[class*=MuiBox-root]`));\\n\\tlet props = boxes.map(box => getProps(box)).find(x => x?.player);\\n\\n\\tif (props) {\\n\\t\\t// show classname to use\\n\\t\\tlet className = boxes.find(x => getProps(x)?.player).className;\\n\\t\\tns.tprintf(`INFO className: ${className}`);\\n\\n\\t\\tif (props.player.money < 0) {\\n\\t\\t\\tprops.player.money = MONEYSHOT;\\n\\t\\t} else {\\n\\t\\t\\tprops.player.money = props.player.money * MONEYSHOT;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/sbin/goFundMe.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/sbin/goFundMe.js\",\"url\":\"blob:file:///1d1e3240-5ad3-43aa-9f18-b9b59737ed31\",\"moduleSequenceNumber\":101085}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":108125,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const stuff = 100;\\nexport const things = [\\n\\t'thing1',\\n\\t'thing2',\\n];\",\"filename\":\"/lib/constants.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":108126,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const city = `Aevum`;\\nconst industry = `Agriculture`;\\nconst headCount = 33;\\nconst employeeDistribution = {\\n\\t'Operations': 20,\\n\\t'Engineer': 5,\\n\\t'Business': 2,\\n\\t'Management': 1,\\n\\t'Research & Development': 5,\\n};\\nconst upgradeCostLimit = 250e12;\\nconst resource = `Real Estate`;\\nconst TICK = 3 * 1000;\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\n\\tlet division = ns.corporation.getCorporation().divisions[0];\\n\\n\\tif (!division.cities.includes(city)) {\\n\\t\\tns.print(`Prepping to buy office space in ${city}.`);\\n\\t\\twhile (ns.corporation.getCorporation().funds < ns.corporation.getExpandCityCost()) { await ns.sleep(TICK); }\\n\\t\\tns.corporation.expandCity(division.name, city);\\n\\t}\\n\\tns.print(`Have office space in ${city}.`);\\n\\n\\tif (!ns.corporation.hasWarehouse(division.name, city)) {\\n\\t\\tns.print(`Prepping to buy warehouse in ${city}.`);\\n\\t\\twhile (ns.corporation.getCorporation().funds < ns.corporation.getPurchaseWarehouseCost()) { await ns.sleep(TICK); }\\n\\t\\tns.corporation.purchaseWarehouse(division.name, city);\\n\\t}\\n\\tns.print(`Have warehouse in ${city}.`);\\n\\n\\twhile (ns.corporation.getUpgradeWarehouseCost(division.name, city) < upgradeCostLimit) {\\n\\t\\twhile (ns.corporation.getCorporation().funds < ns.corporation.getUpgradeWarehouseCost(division.name, city)) { await ns.sleep(TICK); }\\n\\t\\tns.corporation.upgradeWarehouse(division.name, city);\\n\\t\\tns.print(`${city} warehouse size: ${ns.corporation.getWarehouse(division.name, city).size}`);\\n\\t}\\n\\n\\tlet units = 0.8 * ns.corporation.getWarehouse(division.name, city).size * 200;\\n\\tif (ns.corporation.hasResearched(division.name, `Bulk Purchase`)) {\\n\\t\\tns.print(`Buying ${units} units of ${resource} the quick and easy way.`);\\n\\t\\tns.corporation.bulkPurchase(division.name, city, `Real Estate`, units);\\n\\t} else {\\n\\t\\tns.print(`Buying ${units} units of ${resource} in the clunky way.`);\\n\\t\\tlet rate = units / 100; // purchase over 10 market cycles, or around 100 seconds\\n\\t\\tns.corporation.buyMaterial(division.name, city, resource, rate);\\n\\t\\twhile (ns.corporation.getMaterial(division.name, city, resource).qty < units) { await ns.sleep(TICK); }\\n\\t\\tns.corporation.buyMaterial(division.name, city, resource, 0);\\n\\t}\\n\\n\\tns.tprint(ns.corporation.getOffice(division.name, city));\\n}\\n/*  CorporationInfo\\n{\\n\\t\\\"name\\\":\\\"CORP\\\",\\n\\t\\\"funds\\\":3.650707433269212e+23,\\n\\t\\\"revenue\\\":158621829.12606987,\\n\\t\\\"expenses\\\":31154768.700548045,\\n\\t\\\"public\\\":true,\\n\\t\\\"totalShares\\\":2060000000,\\n\\t\\\"numShares\\\":1801000000,\\n\\t\\\"shareSaleCooldown\\\":0,\\n\\t\\\"issuedShares\\\":0,\\n\\t\\\"sharePrice\\\":388767748203639.75,\\n\\t\\\"state\\\":\\\"START\\\",\\n\\t\\\"divisions\\\":[\\n\\t\\t{\\n\\t\\t\\t\\\"name\\\":\\\"AG\\\",\\n\\t\\t\\t\\\"type\\\":\\\"Agriculture\\\",\\n\\t\\t\\t\\\"awareness\\\":4563.843688677289,\\n\\t\\t\\t\\\"popularity\\\":1202.0806227144649,\\n\\t\\t\\t\\\"prodMult\\\":364.47082879886864,\\n\\t\\t\\t\\\"research\\\":9308.752559242022,\\n\\t\\t\\t\\\"lastCycleRevenue\\\":158621829.12606987,\\n\\t\\t\\t\\\"lastCycleExpenses\\\":31154768.700548045,\\n\\t\\t\\t\\\"thisCycleRevenue\\\":1585852176.325491,\\n\\t\\t\\t\\\"thisCycleExpenses\\\":311337116.3569713,\\n\\t\\t\\t\\\"upgrades\\\":[0,16],\\n\\t\\t\\t\\\"cities\\\":[\\\"Aevum\\\",\\\"Sector-12\\\"],\\n\\t\\t\\t\\\"products\\\":[]\\n\\t\\t}\\n\\t]\\n}\\n*/\\n\\n/*  WarehouseInfo\\n{\\n\\t\\\"level\\\":1,\\n\\t\\\"loc\\\":\\\"New Tokyo\\\",\\n\\t\\\"size\\\":100,\\n\\t\\\"sizeUsed\\\":0,\\n\\t\\\"smartSupplyEnabled\\\":true\\n}\\n*/\\n\\n/*  OfficeInfo\\n{\\n\\t\\\"loc\\\":\\\"Aevum\\\",\\n\\t\\\"size\\\":3,\\n\\t\\\"minEne\\\":0,\\n\\t\\\"maxEne\\\":100,\\n\\t\\\"minHap\\\":0,\\n\\t\\\"maxHap\\\":100,\\n\\t\\\"maxMor\\\":100,\\n\\t\\\"employees\\\":[],\\n\\t\\\"employeeProd\\\":{\\n\\t\\t\\\"Operations\\\":0,\\n\\t\\t\\\"Engineer\\\":0,\\n\\t\\t\\\"Business\\\":0,\\n\\t\\t\\\"Management\\\":0,\\n\\t\\t\\\"Research & Development\\\":0\\n\\t}\\n}\\n*/\",\"filename\":\"/wip/officeManager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/bin/officeManager.js\",\"url\":\"blob:file:///06699692-edca-4b75-9cc2-656e211265bb\",\"moduleSequenceNumber\":891187}],\"dependents\":[],\"ramUsage\":1024,\"server\":\"home\",\"moduleSequenceNumber\":108127,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"corporation\",\"cost\":1022.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const UNLOCKS = [\\n  `Export`,\\n  `Smart Supply`,\\n  `Market Research - Demand`,\\n  `Market Data - Competition`,\\n  `VeChain`,\\n  `Shady Accounting`,\\n  `Government Partnership`,\\n  `Warehouse API`,\\n  `Office API`,\\n];\\n\\nexport const UPGRADES = [\\n  `Smart Factories`,\\n  `Wilson Analytics`,\\n  `Neural Accelerators`,\\n  `Project Insight`,\\n  `Smart Storage`,\\n  `Nuoptimal Nootropic Injector Implants`,\\n  `FocusWires`,\\n  `DreamSense`,\\n  `Speech Processor Implants`,\\n  `ABC SalesBots`,\\n];\\n\\nexport const INDUSTRIES = [\\n  `Agriculture`,\\n  `Chemical`,\\n  `Computer`,\\n  `Energy`,\\n  `Fishing`,\\n  `Food`,\\n  `Healthcare`,\\n  `Mining`,\\n  `Pharmaceutical`,\\n  `RealEstate`,\\n  `Robotics`,\\n  `Software`,\\n  `Tobacco`,\\n  `utilities`,\\n];\\n\\nexport const CITIES = [\\n  `Aevum`,\\n  `Chongqing`,\\n  `New Tokyo`,\\n  `Ishima`,\\n  `Sector-12`,\\n  `Volhaven`,\\n];\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  class Upgrade {\\n    constructor(name) { this.name = name; }\\n    buy() { return ns.corporation.levelUpgrade(this.name); }\\n    cost() { return ns.corporation.getUpgradeLevelCost(this.name); }\\n  }\\n  \\n  class AllUpgrades {\\n    constructor() {\\n      this.upgrades = [];\\n      this.MAXSPEND = 1e75;\\n      UPGRADES.forEach((name) => {\\n        this.upgrades.push(new Upgrade(name));\\n      });\\n    }\\n    buy() {}\\n  }\\n\\n  class Unlock {\\n    constructor(name) { this.name = name; }\\n    buy() { return ns.corporation.unlockUpgrade(this.name); }\\n    cost() { return ns.corporation.getUnlockUpgradeCost(this.name); }\\n    purchased() { return ns.corporation.hasUnlockUpgrade(this.name); }\\n  }\\n\\n  class AllUnlocks {\\n    constructor() {\\n      this.unlocks = [];\\n      UNLOCKS.forEach( (name) => {\\n        this.unlocks.push(new Unlock(name));\\n      });\\n    }\\n    buy() {}\\n  }\\n  await manageCorporation(ns);\\n}\\n\\nasync function manageCorporation(ns) {\\n  UNLOCKS.forEach((unlock) => {\\n    if (!haveUnlock(ns, unlock) && ns.getPlayer()['money'] > ns.corporation.getUnlockUpgradeCost(unlock)) {\\n      getUnlock(ns, unlock);\\n    }\\n  });\\n  UPGRADES.forEach((upgrade) => {\\n    while (ns.corporation.getUpgradeLevelCost(upgrade) < MAXSPEND) { ns.corporation.levelUpgrade(upgrade); }\\n  });\\n}\\n\\nasync function haveUnlock(ns, unlock) { return ns.corporation.hasUnlockUpgrade(unlock); }\\nasync function getUnlock(ns, unlock) {\\n  // void functions are so fun with regard to result checking\\n  ns.corporation.unlockUpgrade(unlock);\\n  // return something useful, e.g., whether the purchase succeeded\\n  return haveUnlock(ns, unlock);\\n}\",\"filename\":\"/wip/corpMan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/bin/corporationManager.js\",\"url\":\"blob:file:///7ba09e7f-570e-44ff-b7d6-433160ac0c12\",\"moduleSequenceNumber\":245750}],\"dependents\":[],\"ramUsage\":1024.5,\"server\":\"home\",\"moduleSequenceNumber\":108128,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"corporation\",\"cost\":1022.4},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getFolder, getServerPrefix } from 'import.js';\\n\\nconst TICK = 3 * 1000;\\n\\nlet maxServers;\\nlet servers;\\n\\n/*\\n * Purchases the best server available with the\\n * user's current money. If the server limit is\\n * reached, replaces the worst server. Repeatable.\\n */\\nexport async function main(ns) {\\n    class Server {\\n        constructor() {\\n            // NNNN\\n        }\\n    }\\n    class AllServers {\\n        constructor() {\\n            this.hostnamePrefix = getServerPrefix();\\n            this.servers = [];\\n        }\\n\\n    }\\n    // Default Values\\n    maxServers = ns.getPurchasedServerLimit();\\n    servers = ns.getPurchasedServers(true);\\n    serverInfo(ns);\\n    await buyServers(ns);\\n}\\n\\nfunction serverInfo(ns) {\\n    ns.tprint(`You have ${servers.length}/${maxServers} servers`);\\n    Object.entries(groupServers(ns)).map((ramServers) => {\\n        ns.tprint(`${ramServers[0]}GB: ${ramServers[1]}`);\\n    });\\n}\\n\\nfunction groupServers(ns) {\\n    let groupedServers = {};\\n    servers.forEach((server) => {\\n        let ram = ns.getServerRam(server)[0];\\n        groupedServers[ram] = groupedServers[ram] || [];\\n        groupedServers[ram].push(server);\\n    });\\n    return groupedServers;\\n}\\n\\nasync function buyServers(ns) {\\n    let ram = ns.getPurchasedServerMaxRam();\\n    let myMoney = ns.getServerMoneyAvailable('home');\\n    let cost = ns.getPurchasedServerCost(ram);\\n    let belowServerLimit = true;\\n    while (belowServerLimit) {\\n        while (cost > myMoney) { ns.sleep(TICK); }\\n        belowServerLimit = buyServer(ns, ram);\\n    }\\n}\\n\\nfunction buyServer(ns, ram) {\\n    if (servers.length == maxServers) {\\n        let success = removeWeakestServer(ns, ram);\\n        if (!success) { return false; }\\n    }\\n    let server = ns.purchaseServer(`${getServerPrefix()}-${ram}GB`, ram);\\n    servers.push(server);\\n    ns.tprint(`Purchased ${server}: ${ram}GB`);\\n    return true;\\n}\\n\\nfunction removeWeakestServer(ns, newRam) {\\n    let groupedServers = groupServers(ns);\\n    let min = Math.min(...Object.keys(groupedServers));\\n    if (min >= newRam) {\\n        ns.tprint(`Your smallest server has ${min}GB RAM and you wanted to purchase ${newRam}GB server`);\\n        return false;\\n    }\\n    let smallest_server = groupedServers[min][0];\\n    ns.killall(smallest_server);\\n    let result = ns.deleteServer(smallest_server);\\n    servers = ns.getPurchasedServers(true);\\n    return true;\\n}\\n\\n\\n// ================================================================================================= //\\n// ================================================================================================= //\\n// ================================================================================================= //\\n// ================================================================================================= //\\n// ================================================================================================= //\\nlet maxValueServers;\\nlet serverValue = 0;\\n\\n/* Identify servers worth more than $10 Billion,\\n * deploy the hack script and attack those servers\\n * using all purchased servers.\\n */\\nexport async function main(ns) {\\n    maxValueServers = {\\n        zero: [],\\n        million: [],\\n        billion: [],\\n        trillion: []\\n    };\\n    findServer(ns, 'home', 'home', checkValue);\\n    ns.run(`/${getFolder()}/remoteHack.js`, 1, highest(ns).join(','));\\n}\\n\\nfunction findServer(ns, startServer, targetServer, func) {\\n    let servers = ns.scan(targetServer, true).filter((server) => server !== startServer && !server.includes(getServerPrefix));\\n    if (!ns.hasRootAccess(targetServer)) { return false; }\\n    servers.forEach((server) => {\\n        func.call(this, ns, server);\\n        if (ns.hasRootAccess(server)) {\\n            findServer(ns, targetServer, server, func);\\n        }\\n    });\\n}\\n\\nfunction checkValue(ns, server) {\\n    if (!ns.hasRootAccess(server)) {\\n        return;\\n    }\\n    let serverMoney = ns.getServerMaxMoney(server);\\n    if (serverMoney > 1e12) {\\n        maxValueServers.trillion.push(server);\\n    } else if (serverMoney > 1e9) {\\n        maxValueServers.billion.push(server);\\n    } else if (serverMoney > 0) {\\n        maxValueServers.million.push(server);\\n    } else {\\n        maxValueServers.zero.push(server);\\n    }\\n}\\n\\nfunction highest(ns) {\\n    if (maxValueServers.trillion.length > 0) {\\n        return maxValueServers.trillion;\\n    }\\n    if (maxValueServers.billion.length > 0) {\\n        return maxValueServers.billion;\\n    }\\n    if (maxValueServers.million.length > 0) {\\n        return maxValueServers.million;\\n    }\\n}\\n\\n\\n\\n\\n\\n\\ngetPurchasedServerCost(ram)\\tGet cost of purchasing a server.\\ngetPurchasedServerLimit()\\tReturns the maximum number of servers you can purchase.\\ngetPurchasedServerMaxRam()\\tReturns the maximum RAM that a purchased server can have.\\ngetPurchasedServers()\\tReturns an array with the hostnames of all of the servers you have purchased.\\n\\ndeleteServer(host)\\tDelete a purchased server.\\n\\nexec(script, host, numThreads, args)\\tStart another script on any server.\\n\\ngetScriptRam(script, host)\\tGet the ram cost of a script.\\ngetServer(host)\\tReturns a server object for the given server. Defaults to the running script's server if host is not specified.\",\"filename\":\"/wip/serverFarmManager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.4,\"server\":\"home\",\"moduleSequenceNumber\":108129,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nconst getProps = (obj) =>\\n\\tObject.entries(obj).find(entry => entry[0]?.startsWith(`__reactProps`))?.[1]?.children?.props;\\n\\nexport async function main(ns) {\\n\\tlet boxes = Array.from(eval(`document`).querySelectorAll(`[class*=MuiBox-root]`));\\n\\tlet props = boxes.map(box => getProps(box)).find(x => x?.player);\\n\\n\\tif (props) {\\n\\t\\t// show classname to use\\n\\t\\tlet className = boxes.find(x => getProps(x)?.player).className;\\n\\t\\tns.tprintf(`INFO className: ${className}`);\\n\\n\\t\\t// get some bonuses\\n\\t\\t//props.player.money = props.player.money * 1111;\\n\\t\\t//props.player.hacking_exp = props.player.hacking_exp * 1111;\\n\\n\\t\\t// open the dev menu\\n\\t\\t//props.router.toDevMenu();\\n\\n\\t\\t//props.player.karma = props.player.karma * 1000;\\n\\t}\\n}\",\"filename\":\"/sbin/findProperties.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/bin/findProperties.js\",\"url\":\"blob:file:///9aaebec9-8b70-4845-9eaa-c3c454ecfcf1\",\"moduleSequenceNumber\":453357}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":108130,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst TICK = 10 * 1000;    // sleep millis\\n\\n\\tclass Program {\\n\\t\\tconstructor(name) { this.name = name; }\\n\\t\\tbuy() { return this.purchased() ? this.purchased() : ns.purchaseProgram(this.name); }\\n\\t\\tcost() { return ns.getDarkwebProgramCost(this.name); }\\n\\t\\tpurchased() { return (this.cost() === 0) ? true : false; }\\n\\t}\\n\\n\\tclass Tor {\\n\\t\\tconstructor() { this.name = 'tor'; }\\n\\t\\tbuy() { return ns.purchaseTor(); }\\n\\t}\\n\\n\\tclass AllPrograms {\\n\\t\\tconstructor() {\\n\\t\\t\\tthis.programs = [];\\n\\t\\t\\tfor (let name of ns.getDarkwebPrograms()) { this.programs.push(new Program(name)); }\\n\\t\\t}\\n\\t\\tasync buy() {\\n\\t\\t\\tfor (let program of this.programs.sort((a, b) => a.cost() - b.cost())) {\\n\\t\\t\\t\\twhile (!program.buy()) { await ns.sleep(TICK); }\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tns.disableLog('sleep');\\n\\tns.clearLog();\\n\\n\\tlet tor = new Tor();\\n\\twhile (!tor.buy()) { await ns.sleep(TICK); }\\n\\n\\tlet programs = new AllPrograms();\\n\\tawait programs.buy();\\n}\",\"filename\":\"/bin/tor.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/bin/tor.js\",\"url\":\"blob:file:///9a1e3d28-b53b-45ac-b19c-04938d74ad46\",\"moduleSequenceNumber\":108253}],\"dependents\":[],\"ramUsage\":9.1,\"server\":\"home\",\"moduleSequenceNumber\":108253,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"singularity.purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"singularity.getDarkwebProgramCost\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"singularity.getDarkwebPrograms\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"stock.buy\",\"cost\":2.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// poor man's api reference\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tfunction list(obj, indent) {\\n\\t\\tfor (const key in obj) {\\n\\t\\t\\tns.tprintf(\\\"%s\\\", \\\"    \\\".repeat(indent) + key + \\\": \\\" + typeof obj[key]);\\n\\t\\t\\tif (typeof obj[key] == \\\"object\\\")\\n\\t\\t\\t\\tlist(obj[key], indent + 1);\\n\\t\\t}\\n\\t}\\n\\n\\t//list(ns, 0);\\n\\tlet n = 1;\\n\\tlist(Object.getPrototypeOf(n), 0);\\n}\",\"filename\":\"/sbin/apiref.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/sbin/apiref.js\",\"url\":\"blob:file:///5af0be85-3a44-49a9-83de-f7422084a895\",\"moduleSequenceNumber\":1554426}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":108132,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst TICK = 3 * 1000;    // sleep millis\\n\\tconst overclockLevelMax = 90;\\n\\n\\tclass BladeSkillLevel {\\n\\t\\tconstructor(name) {\\n\\t\\t\\tthis.name = name;\\n\\t\\t}\\n\\t\\tbuy() {\\n\\t\\t\\treturn ns.bladeburner.upgradeSkill(this.name);\\n\\t\\t}\\n\\t\\tcost() {\\n\\t\\t\\tif (this.name === 'Overclock' && this.level() >= overclockLevelMax) { return Infinity; }\\n\\t\\t\\treturn ns.bladeburner.getSkillUpgradeCost(this.name);\\n\\t\\t}\\n\\t\\tlevel() { return ns.bladeburner.getSkillLevel(this.name); }\\n\\t}\\n\\tclass AllBladeSkillLevels {\\n\\t\\tconstructor() {\\n\\t\\t\\tthis.levels = [];\\n\\t\\t\\tfor (let name of ns.bladeburner.getSkillNames()) { this.levels.push(new BladeSkillLevel(name)); }\\n\\t\\t}\\n\\t\\tasync buy() {\\n\\t\\t\\twhile (true) {\\n\\t\\t\\t\\tlet level = this.levels.sort((a, b) => a.cost() - b.cost())[0];\\n\\t\\t\\t\\twhile (!level.buy()) { await ns.sleep(TICK); }\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\tns.disableLog('sleep');\\n\\n\\tlet bladeSkillLevels = new AllBladeSkillLevels();\\n\\tawait bladeSkillLevels.buy();\\n}\",\"filename\":\"/bin/bladeSkillManager.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/bin/bladeSkillManager.js\",\"url\":\"blob:file:///c0fd9b50-1b6b-4021-9c77-c9cfe5143d13\",\"moduleSequenceNumber\":108252}],\"dependents\":[],\"ramUsage\":16.5,\"server\":\"home\",\"moduleSequenceNumber\":108252,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"bladeburner.upgradeSkill\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.getSkillUpgradeCost\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.getSkillLevel\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.getSkillNames\",\"cost\":0.4},{\"type\":\"fn\",\"name\":\"stock.buy\",\"cost\":2.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\n\\tclass Action {\\n\\t\\tconstructor(type, name) {\\n\\t\\t\\tthis.type = type;\\n\\t\\t\\tthis.name = name;\\n\\t\\t}\\n\\t\\tchances() {\\n\\t\\t\\tlet chances = ns.bladeburner.getActionEstimatedSuccessChance(this.type, this.name);\\n\\t\\t\\tlet high = chances[1];\\n\\t\\t\\tlet low = chances[0];\\n\\t\\t\\tlet spread = high - low;\\n\\t\\t\\tlet mean = spread / 2;\\n\\t\\t\\treturn {\\n\\t\\t\\t\\t'low': low,\\n\\t\\t\\t\\t'high': high,\\n\\t\\t\\t\\t'mean': mean,\\n\\t\\t\\t\\t'spread': spread,\\n\\t\\t\\t};\\n\\t\\t}\\n\\t\\tlevel() { return ns.bladeburner.getActionCurrentLevel(this.type, this.name); }\\n\\t\\tremaining() { return ns.bladeburner.getActionCountRemaining(this.type, this.name); }\\n\\t\\trepGain() { return ns.bladeburner.getActionRepGain(this.type, this.name, this.level()); }\\n\\t\\tstart() { return ns.bladeburner.startAction(this.type, this.name); }\\n\\t\\tstop() { return ns.bladeburner.stopBladeburnerAction(); }\\n\\t\\ttime() { return ns.bladeburner.getActionTime(this.type, this.name); }\\n\\t}\\n\\n}\\n\\n/*\\n\\ngetBonusTime()\\tGet bladeburner bonus time.\\ngetCity()\\tGet current city.\\nswitchCity(name)\\tTravel to another city in bladeburner.\\ngetCityChaos(name)\\tGet chaos of a city.\\ngetCityCommunities(name)\\tGet number of communities in a city.\\ngetCityEstimatedPopulation(name)\\tGet estimated population in city.\\n\\ngetCurrentAction()\\tGet current action.\\n\\ngetActionAutolevel(type, name)\\tGet whether an action is set to autolevel.\\n\\ngetActionMaxLevel(type, name)\\tGet the maximum level of an action.\\ngetActionRepGain(type, name, level)\\tGet the reputation gain of an action.\\ngetActionTime(type, name)\\tGet the time to complete an action.\\n\\nsetActionAutolevel(type, name, autoLevel)\\tSet an action autolevel.\\nsetActionLevel(type, name, level)\\tSet the level of an action.\\n\\ngetGeneralActionNames()\\tList all general actions.\\ngetContractNames()\\tList all contracts.\\ngetOperationNames()\\tList all operations.\\ngetBlackOpNames()\\tList all black ops.\\ngetBlackOpRank(name)\\tGet black op required rank.\\ngetRank()\\tGet player bladeburner rank.\\n\\ngetStamina()\\tGet bladeburner stamina.\\ngetTeamSize(type, name)\\tGet team size.\\n\\nsetTeamSize(type, name, size)\\tSet team size.\\n\\njoinBladeburnerDivision()\\tJoin the bladeburner division.\\njoinBladeburnerFaction()\\tJoin the bladeburner faction.\\ngetSkillLevel(name)\\tGet skill level.\\ngetSkillNames()\\tList all skills.\\ngetSkillPoints()\\tGet bladeburner skill points.\\ngetSkillUpgradeCost(name)\\tGet cost to upgrade skill.\\nupgradeSkill(name)\\tUpgrade skill.\\n\\n*/\",\"filename\":\"/wip/bladeActionManager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":27.6,\"server\":\"home\",\"moduleSequenceNumber\":108134,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"bladeburner.getActionEstimatedSuccessChance\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.getActionCurrentLevel\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.getActionCountRemaining\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.getActionRepGain\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.startAction\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.stopBladeburnerAction\",\"cost\":2},{\"type\":\"fn\",\"name\":\"bladeburner.getActionTime\",\"cost\":4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"class Node {\\n\\tconstructor(id) {\\n\\t\\tthis.id = id;\\n\\t\\tthis.core = {\\n\\t\\t\\tbuy(n=1) { return ns.hacknet.upgradeCore(this.id, n); }\\n\\t\\t\\tcost(n=1) { return ns.hacknet.getCoreUpgradeCost(this.id, n); }\\n\\t\\t};\\n\\t\\tthis.level = {\\n\\t\\t\\tbuy(n=1) { return ns.hacknet.upgradeLevel(this.id, n); }\\n\\t\\t\\tcost(n=1) { return ns.hacknet.getLevelUpgradeCost(this.id, n); }\\n\\t\\t}\\n\\t\\tthis.ram = {\\n\\t\\t\\tbuy(n=1) { return ns.hacknet.upgradeRam(this.id, n); }\\n\\t\\t\\tcost(n=1) { return ns.hacknet.getRamUpgradeCost(this.id, n); }\\n\\t\\t}\\n\\t}\\n\\tstats() { return ns.hacknet.getNodeStats(this.id); }\\n}\\n\\nclass Hacknet {\\n\\tconstructor() {\\n\\t\\tthis.nodes = [];\\n\\t\\tthis.servers = [];\\n\\t}\\n\\tbuyNode() { this.nodes.push(new Node(ns.hacknet.purchaseNode())); }\\n\\tbuyNodes() { }\\n\\tbuyServer() { }\\n\\tbuyServers() { ns.print(`Hacknet server functionality coming soon!`); }\\n\\tnodeCost() { return ns.hacknet.getPurchaseNodeCost(); }\\n}\\n\\n/*\\ngetCacheUpgradeCost(index, n)\\tCalculate the cost of upgrading hacknet node cache.\\nupgradeCache(index, n)\\t        Upgrade the cache of a hacknet node.\\n\\ngetCoreUpgradeCost(index, n)\\tCalculate the cost of upgrading hacknet node cores.\\nupgradeCore(index, n)\\t        Upgrade the core of a hacknet node.\\n\\ngetLevelUpgradeCost(index, n)\\tCalculate the cost of upgrading hacknet node levels.\\nupgradeLevel(index, n)\\t        Upgrade the level of a hacknet node.\\n\\ngetRamUpgradeCost(index, n)\\t    Calculate the cost of upgrading hacknet node RAM.\\nupgradeRam(index, n)\\t        Upgrade the RAM of a hacknet node.\\n\\n\\ngetHashUpgradeLevel(upgName)\\tGet the level of a hash upgrade.\\nhashCapacity()\\t                Get the maximum number of hashes you can store.\\nhashCost(upgName)\\t            Get the cost of a hash upgrade.\\ngetHashUpgrades()\\t            Get the list of hash upgrades\\nnumHashes()\\t                    Get the total number of hashes stored.\\nspendHashes(upgName, upgTarget)\\tPurchase a hash upgrade.\\n\\ngetStudyMult()\\t                Get the multiplier to study.\\ngetTrainingMult()\\t            Get the multiplier to training.\\n\\nmaxNumNodes()\\t                Get the maximum number of hacknet nodes.\\nnumNodes()\\t                    Get the number of hacknet nodes you own.\\npurchaseNode()\\t                Purchase a new hacknet node.\\n\\nProperty        Type    Description\\ncache           number  Cache level. Only applicable for Hacknet Servers\\ncores           number  Node's number of cores\\nhashCapacity    number  Hash Capacity provided by this Node. Only applicable for Hacknet Servers\\nlevel           number  Node's level\\nname            string  Node's name\\nproduction      number  Node's production per second\\nram             number  Node's RAM (GB)\\nramUsed         number  Node's used RAM (GB)\\ntimeOnline      number  Number of seconds since Node has been purchased\\ntotalProduction number  Total number of money Node has produced\\n\\n*/\",\"filename\":\"/lib/hacknet.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"CSEC\",\"moduleSequenceNumber\":108135,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tns.tprint(ns.bladeburner.getCurrentAction());\\n\\t\\tawait ns.sleep(3000);\\n\\t}\\n}\",\"filename\":\"/tmp/blade.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/tmp/blade.js\",\"url\":\"blob:file:///784fcc2c-d7ab-423f-a90b-ff3d0a5c7f5f\",\"moduleSequenceNumber\":108077}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"home\",\"moduleSequenceNumber\":108136,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"bladeburner.getCurrentAction\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.gang.createGang('NiteSec');\\n}\",\"filename\":\"gang.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"gang.js\",\"url\":\"blob:file:///c439b3f3-0272-435d-8d20-59d228920654\",\"moduleSequenceNumber\":114022}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"home\",\"moduleSequenceNumber\":108137,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.createGang\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function recursiveScan(ns, parent, server, target, route) {\\n    const children = ns.scan(server);\\n    for (let child of children) {\\n        if (parent == child) {\\n            continue;\\n        }\\n        if (child == target) {\\n            route.unshift(child);\\n            route.unshift(server);\\n            return true;\\n        }\\n\\n        if (recursiveScan(ns, server, child, target, route)) {\\n            route.unshift(server);\\n            return true;\\n        }\\n    }\\n    return false;\\n}\\n\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    let route = [];\\n    let server = args._[0];\\n    if (!server || args.help) {\\n        ns.tprint(\\\"This script helps you find a server on the network and shows you the path to get to it.\\\");\\n        ns.tprint(`Usage: run ${ns.getScriptName()} SERVER`);\\n        ns.tprint(\\\"Example:\\\");\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`);\\n        return;\\n    }\\n\\n    recursiveScan(ns, '', 'home', server, route);\\n    for (const i in route) {\\n        await ns.sleep(500);\\n        const extra = i > 0 ? \\\"└ \\\" : \\\"\\\";\\n        ns.tprint(`${\\\" \\\".repeat(i)}${extra}${route[i]}`);\\n    }\\n}\\n\\nexport function autocomplete(data, args) {\\n    return data.servers;\\n}\",\"filename\":\"/bin/traceroute.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/bin/traceroute.js\",\"url\":\"blob:file:///ebc991dc-27b9-46df-8f0c-8c8f33d1977b\",\"moduleSequenceNumber\":107599}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"home\",\"moduleSequenceNumber\":108138,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tconst data = ns.flags([\\n\\t\\t['faction', 'Sector-12'],\\n\\t\\t['work', 'Security Work'],\\n\\t\\t['focus', false],\\n\\t\\t['period', 10 * 1000],\\n\\t\\t['goal', 100],\\n\\t]);\\n\\tlet faction = data.faction;\\n\\tlet work = data.work;\\n\\tlet focus = data.focus;\\n\\tlet period = data.period;\\n\\tlet goal = data.goal;\\n\\n\\tfunction goalAchieved(skills, goal) {\\n\\t\\tlet player = ns.getPlayer();\\n\\t\\tlet achieved = true;\\n\\t\\tfor (let skill of skills) {\\n\\t\\t\\tachieved = achieved && player[skill] >= goal;\\n\\t\\t}\\n\\t\\treturn achieved;\\n\\t}\\n\\n\\tconst skillSets = {\\n\\t\\t'Hacking Contracts': ['hacking'],\\n\\t\\t'Field Work': ['hacking', 'strength', 'defense', 'dexterity', 'agility', 'charisma'],\\n\\t\\t'Security Work': ['hacking', 'strength', 'defense', 'dexterity', 'agility'],\\n\\t}\\n\\n\\tdo {\\n\\t\\tns.workForFaction(faction, work, focus);\\n\\t\\tawait ns.sleep(period);\\n\\t} while (!goalAchieved(skillSets[work], goal));\\n\\n\\tns.stopAction();\\n}\",\"filename\":\"/bin/hulk.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/bin/hulk.js\",\"url\":\"blob:file:///82fb1445-7a33-4464-a124-b26731efc358\",\"moduleSequenceNumber\":378}],\"dependents\":[],\"ramUsage\":6.1,\"server\":\"home\",\"moduleSequenceNumber\":108139,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.workForFaction\",\"cost\":3},{\"type\":\"fn\",\"name\":\"singularity.stopAction\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tconst SCRIPT = `/bin/hack.js`;\\n\\tconst scriptRam = ns.getScriptRam(SCRIPT);\\n\\tfor (let rank = 1; rank <= 20; rank++) {\\n\\t\\tlet ram = Math.pow(2, rank);\\n\\t\\tlet cost = ns.getPurchasedServerCost(ram);\\n\\t\\tlet threads = Math.floor(ram / scriptRam);\\n\\t\\tns.tprintf(\\\"%-3d -> %7d -> %15d -> %6d\\\", rank, ram, cost, threads);\\n\\t}\\n}\",\"filename\":\"length.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"length.js\",\"url\":\"blob:file:///b7a8ec4b-674f-4506-aa9a-9f5130302efe\",\"moduleSequenceNumber\":30480}],\"dependents\":[],\"ramUsage\":1.95,\"server\":\"home\",\"moduleSequenceNumber\":108140,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/* A simple lightweight script that is deployed\\n * to remote and local servers to repeatedly hack\\n * a particular server.\\n * The smaller this is, the more threads can be deployed.\\n * args[0] - server name\\n * args[1] - threads to attack with\\n */\\nexport async function main(ns, args) {\\n    await hackServer(ns, ns.args[0], ns.args[1]);\\n}\\n\\nasync function hackServer(ns, server, threads) {\\n    ns.disableLog('getServerSecurityLevel');\\n    let serverSecurityThreshold = ns.getServerMinSecurityLevel(server) + 2;\\n    let serverMoneyThreshold = ns.getServerMaxMoney(server) * 0.95;\\n    let opts = { threads: threads, stock: true };\\n    while (true) {\\n        if (ns.getServerSecurityLevel(server) > serverSecurityThreshold) {\\n            await ns.weaken(server, opts);\\n        } else if (ns.getServerMoneyAvailable(server) < serverMoneyThreshold) {\\n            await ns.grow(server, opts);\\n        } else {\\n            await ns.hack(server, opts);\\n        }\\n    }\\n}\\n\\nexport function autocomplete(data, args) {\\n    return [...data.servers];\\n}\",\"filename\":\"/bin/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"home\",\"moduleSequenceNumber\":108141,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tconst n = 0;\\n\\tns.tprint(`${n} -> ${n.toExponential()}`);\\n\\tn.__proto__.toExponential = () => { return 'poop' };\\n\\tns.tprint(`Polluted ${n.__proto__}`);\\n\\tfor (let i = 0; i < 30; i++) {\\n\\t\\tns.tprint(`${n} -> ${n.toExponential()}`);\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"/sbin/number.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/sbin/number.js\",\"url\":\"blob:file:///fe28487c-0f1c-418d-984e-5e8e478537d0\",\"moduleSequenceNumber\":25731}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":108142,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tconst n = 0;\\n\\tns.tprint(`${n} -> ${n.toExponential()}`);\\n}\",\"filename\":\"/sbin/number2.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/sbin/number2.js\",\"url\":\"blob:file:///3a4c63e6-3229-4f8e-adaa-083b3264bde1\",\"moduleSequenceNumber\":133}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":108143,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.tprint(`timeOrigin -> ${performance.timeOrigin}`);\\n\\tns.tprint(`now -> ${performance.now()}`);\\n\\n\\tns.tprint(`${Object.getOwnPropertyNames(performance).sort()}`);\\n}\",\"filename\":\"/sbin/now.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/sbin/now.js\",\"url\":\"blob:file:///16b4230d-93c7-4696-b54c-951650d6adfe\",\"moduleSequenceNumber\":2438}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":108144,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const TICK = 1250;\\nconst MAXWAIT = 3600 * 12; // 12 hours in seconds\\nconst BASEMAXNODEEARNINGS = 9171;\\nconst PARTS = ['Level', 'Ram', 'Core', 'Cache'];\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('sleep');\\n\\n\\tawait deployHacknet(ns);\\n\\n\\tns.print('Finished deploying hacknet');\\n}\\n\\n\\nasync function deployHacknet(ns) {\\n\\tlet options = getAllOptions(ns);\\n\\tlet option = leastCostlyOption(options);\\n\\tdo {\\n\\t\\tawait purchase(ns, option);\\n\\t\\toptions = getAllOptions(ns);\\n\\t\\toption = leastCostlyOption(options);\\n\\t} while (purchasesAvailable(option));\\n}\\n\\nfunction getAllOptions(ns) {\\n\\tlet options = [];\\n\\t// get upgrades\\n\\tfor (let nodeIndex = 0; nodeIndex < ns.hacknet.numNodes(); nodeIndex += 1) {\\n\\t\\toptions = options.concat(getPerNodeOptions(ns, nodeIndex));\\n\\t}\\n\\t// get next node\\n\\toptions = options.concat(\\n\\t\\t{\\n\\t\\t\\t'nodeIndex': undefined,\\n\\t\\t\\t'part': 'Node',\\n\\t\\t\\t'cost': cost(ns, undefined, 'Node')\\n\\t\\t});\\n\\treturn options;\\n}\\nfunction getPerNodeOptions(ns, nodeIndex) {\\n\\tlet options = [];\\n\\tfor (let part of PARTS) {\\n\\t\\tlet option = {\\n\\t\\t\\t'nodeIndex': nodeIndex,\\n\\t\\t\\t'part': part,\\n\\t\\t\\t'cost': cost(ns, nodeIndex, part)\\n\\t\\t};\\n\\t\\toptions.push(option);\\n\\t}\\n\\treturn options;\\n}\\nfunction cost(ns, nodeIndex, part) {\\n\\tif (part === 'Node') {\\n\\t\\treturn getNodeCost(ns);\\n\\t}\\n\\tlet costFunction = `get${part}UpgradeCost`;\\n\\treturn ns.hacknet[costFunction](nodeIndex, 1);\\n}\\nfunction getNodeCost(ns) {\\n\\t// make sure not to buy more nodes when unable to recoup the expense\\n\\t// in a reasonable amount of time\\n\\tlet cost = ns.hacknet.getPurchaseNodeCost();\\n\\tconst maxEarnings = BASEMAXNODEEARNINGS * hacknetMultProd(ns);\\n\\tif (canRecoup(ns, cost, maxEarnings)) { return cost; }\\n\\treturn Infinity;\\n}\\nfunction hacknetMultProd(ns) { return ns.getHacknetMultipliers().production; }\\nfunction canRecoup(ns, cost, maxEarnings) { return breakEvenTime(cost, maxEarnings) < MAXWAIT ? true : false; }\\nfunction breakEvenTime(cost, earnings) { return cost / earnings; }\\n\\nfunction leastCostlyOption(options) { return options.sort((a, b) => a.cost - b.cost)[0]; }\\nfunction purchasesAvailable(option) { return isFinite(option.cost); }\\n\\nasync function purchase(ns, option) {\\n\\tlet index = option.nodeIndex;\\n\\tlet part = option.part;\\n\\tlet cost = option.cost;\\n\\n\\twhile (cost > myMoney(ns)) { await ns.sleep(TICK); }\\n\\n\\tif (part === 'Node') {\\n\\t\\tns.print(`Purchase hacknet-node-${ns.hacknet.purchaseNode()}`);\\n\\t\\treturn true;\\n\\t}\\n\\n\\tlet upgradeFunction = `upgrade${part}`;\\n\\tns.print(`Purchase ${part} for hacknet-node-${index} at cost of $${cost}`);\\n\\treturn ns.hacknet[upgradeFunction](index, 1);\\n}\\n\\nfunction myMoney(ns) { return ns.getServerMoneyAvailable('home'); }\",\"filename\":\"/wip/hnMan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.7,\"server\":\"home\",\"moduleSequenceNumber\":108145,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getHacknetMultipliers\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.singularity.installAugmentations('/bin/pwn.js');\\n}\",\"filename\":\"/bin/inAug.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/bin/inAug.js\",\"url\":\"blob:file:///07eb39ca-d519-41be-90bc-24dd18f9fa61\",\"moduleSequenceNumber\":108104}],\"dependents\":[],\"ramUsage\":6.6,\"server\":\"home\",\"moduleSequenceNumber\":108146,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"singularity.installAugmentations\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const ATTRIBUTES = ['hack', 'str', 'def', 'dex', 'agi', 'cha'];\\nconst TASKS = [`Train Hacking`, `Ethical Hacking`, `Money Laundering`, `Cyberterrorism`];\\nconst TICK = 10 * 1000;\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  ns.disableLog('sleep');\\n  ns.tail();\\n\\n  if (! ns.gang.inGang()) {\\n    if (! ns.gang.createGang(`NiteSec`)) { ns.exit(); }\\n  }\\n\\n  while (true) {\\n    recruitment(ns);\\n    ascension(ns);\\n    tasks(ns);\\n    await ns.sleep(TICK);\\n  }\\n}\\n\\nfunction recruitment(ns) {\\n  if (!canRecruit(ns)) { return false; }\\n  let name = getRecruitName();\\n  return (recruit(ns, name) && setTask(ns, name, `Train Hacking`));\\n}\\nfunction canRecruit(ns) { return ns.gang.canRecruitMember(); }\\nfunction getRecruitName() { return Math.random().toString(16).substring(2, 8); }\\nfunction recruit(ns, name) { return ns.gang.recruitMember(name); }\\nfunction setTask(ns, name, task) { return ns.gang.setMemberTask(name, task); }\\n\\n\\nfunction ascension(ns) {\\n  for (let member of getGangData(ns)) {\\n    let ascendResult = ns.gang.getAscensionResult(member.name);\\n    if (typeof ascendResult === 'undefined') { continue; }\\n\\n    let activeAttribute = getActiveAttribute(member, ascendResult);\\n    ns.print(`${member.name}.${activeAttribute.name}: ${activeAttribute.ascGain - ascendGainTarget(activeAttribute)}`);\\n    if (activeAttribute.ascGain > ascendGainTarget(activeAttribute)) {\\n      ns.gang.ascendMember(member.name);\\n      ns.toast(`Ascended ${member.name}`);\\n    }\\n  }\\n}\\nfunction getActiveAttribute(member, ascendResult) {\\n  let attrSnaps = [];\\n  for (let attribute of ATTRIBUTES) {\\n    let expString = `${attribute}_exp`;\\n    let baseMultString = `${attribute}_mult`;\\n    let ascMultString = `${attribute}_asc_mult`;\\n    attrSnaps.push(\\n      {\\n        'name': attribute,\\n        'rank': member[attribute],\\n        'xp': member[expString],\\n        'baseMult': member[baseMultString],\\n        'ascMult': member[ascMultString],\\n        'ascResult': ascendResult[attribute],\\n        'ascGain': member[ascMultString] * (ascendResult[attribute] - 1),\\n      }\\n    );\\n  }\\n  return attrSnaps.sort((a, b) => b.xp - a.xp)[0];\\n}\\nfunction ascendGainTarget(attributeData) { return (Math.log10(attributeData.ascMult) > 1) ? Math.log10(attributeData.ascMult) : 1; }\\n\\nfunction tasks(ns) {\\n  let gangData = getGangData(ns);\\n  let trainees = gangData.filter(hasLowAscensionMultiplier);\\n  trainees.forEach((trainee) => { setTask(ns, trainee.name, `Train Hacking`) });\\n  let workers = gangData.filter(hasHighAscensionMultiplier).sort((a, b) => b.hack_asc_mult - a.hack_asc_mult);\\n  let topWorker = workers.shift();\\n  setTask(ns, topWorker.name, `Ethical Hacking`);\\n  let aproposWorkerTask = getWorkerTask(ns);\\n  workers.forEach((worker) => {\\n    setTask(ns, worker.name, aproposWorkerTask);\\n  });\\n}\\n\\nfunction getWorkerTask(ns) {\\n  if (ns.getFactionRep(`NiteSec`) < 2500000) { return `Cyberterrorism`; }\\n  return `Money Laundering`;\\n}\\n\\nfunction getGangData(ns) {\\n  let data = [];\\n  ns.gang.getMemberNames().forEach((name) => {\\n    data.push(ns.gang.getMemberInformation(name));\\n  });\\n  return data;\\n}\\nfunction hasLowAscensionMultiplier(element) { return element.hack_asc_mult < 100.0; }\\nfunction hasHighAscensionMultiplier(element) { return element.hack_asc_mult >= 100.0; }\",\"filename\":\"/wip/gangMan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":18.6,\"server\":\"home\",\"moduleSequenceNumber\":108147,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.inGang\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.createGang\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.canRecruitMember\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.recruitMember\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getAscensionResult\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.ascendMember\",\"cost\":4},{\"type\":\"fn\",\"name\":\"singularity.getFactionRep\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getMemberInformation\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst TICK = 10 * 1000;    // sleep millis\\n\\n\\tclass Program {\\n\\t\\tconstructor(name) { this.name = name; }\\n\\t\\tbuy() { return this.purchased() ? this.purchased() : ns.purchaseProgram(this.name); }\\n\\t\\tcost() { return ns.getDarkwebProgramCost(this.name); }\\n\\t\\tpurchased() { return (this.cost() === 0) ? true : false; }\\n\\t}\\n\\n\\tclass Tor {\\n\\t\\tconstructor() { this.name = 'tor'; }\\n\\t\\tbuy() { return ns.purchaseTor(); }\\n\\t}\\n\\n\\tclass AllPrograms {\\n\\t\\tconstructor() {\\n\\t\\t\\tthis.programs = [];\\n\\t\\t\\tfor (let name of ns.getDarkwebPrograms()) { this.programs.push(new Program(name)); }\\n\\t\\t}\\n\\t\\tasync buy() {\\n\\t\\t\\tfor (let program of this.programs.sort((a, b) => a.cost() - b.cost())) {\\n\\t\\t\\t\\twhile (!program.buy()) { await ns.sleep(TICK); }\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tns.disableLog('sleep');\\n\\tns.clearLog();\\n\\n\\tlet tor = new Tor();\\n\\twhile (!tor.buy()) { await ns.sleep(TICK); }\\n\\n\\tlet programs = new AllPrograms();\\n\\tawait programs.buy();\\n}\",\"filename\":\"/wip/mkhome.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.1,\"server\":\"home\",\"moduleSequenceNumber\":108148,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"singularity.purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"singularity.getDarkwebProgramCost\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"singularity.getDarkwebPrograms\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"stock.buy\",\"cost\":2.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.tprint(`${ns.singularity.upgradeHomeRam()}`);\\n}\",\"filename\":\"/bin/buyRam.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/bin/buyRam.js\",\"url\":\"blob:file:///42343b4c-f438-4eaf-bde2-d2e62a97bba5\",\"moduleSequenceNumber\":93175}],\"dependents\":[],\"ramUsage\":4.6,\"server\":\"home\",\"moduleSequenceNumber\":108149,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"singularity.upgradeHomeRam\",\"cost\":3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nconst getProps = (obj) =>\\n\\tObject.entries(obj).find(entry => entry[0]?.startsWith(`__reactProps`))?.[1]?.children?.props;\\n\\nexport async function main(ns) {\\n\\tlet boxes = Array.from(eval(`document`).querySelectorAll(`[class*=MuiBox-root]`));\\n\\tlet props = boxes.map(box => getProps(box)).find(x => x?.player);\\n\\n\\tif (props) {\\n\\t\\tns.tprintf(`Karma: ${props.player.karma}`);\\n\\t}\\n}\",\"filename\":\"/sbin/getKarma.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/sbin/getKarma.js\",\"url\":\"blob:file:///411c19fe-6c2f-4e84-a1aa-3002b43cf88b\",\"moduleSequenceNumber\":1751511}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":108150,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.tprint(`${ns.singularity.upgradeHomeCores()}`);\\n}\",\"filename\":\"/bin/buyCores.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/bin/buyCores.js\",\"url\":\"blob:file:///c9217cbe-95c2-4034-aee3-c4201e910591\",\"moduleSequenceNumber\":93176}],\"dependents\":[],\"ramUsage\":4.6,\"server\":\"home\",\"moduleSequenceNumber\":108151,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"singularity.upgradeHomeCores\",\"cost\":3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tconst TICK = 10 * 1000;\\n\\tdo {\\n\\t\\tns.singularity.checkFactionInvitations().forEach((faction) => {\\n\\t\\t\\tns.singularity.joinFaction(faction);\\n\\t\\t})\\n\\t\\tawait ns.sleep(TICK);\\n\\t} while (true);\\n}\",\"filename\":\"/bin/facJoiner.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/bin/facJoiner.js\",\"url\":\"blob:file:///be87b93e-567a-428d-bb52-89330842ab31\",\"moduleSequenceNumber\":108539}],\"dependents\":[],\"ramUsage\":7.6,\"server\":\"home\",\"moduleSequenceNumber\":108539,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"singularity.checkFactionInvitations\",\"cost\":3},{\"type\":\"fn\",\"name\":\"singularity.joinFaction\",\"cost\":3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet corp = ns.corporation.getCorporation();\\n\\tns.tprint(`${Object.toString(corp)}`);\\n}\\n\\n/*\\nacceptInvestmentOffer()\\tAccept investment based on you companies current valuation\\nbribe(factionName, amountCash, amountShares)\\tBribe a faction\\nbuyBackShares(amount)\\tBuyback Shares\\ncreateCorporation(corporationName, selfFund)\\tCreate a Corporation\\nexpandCity(divisionName, cityName)\\tExpand to a new city\\nexpandIndustry(industryType, divisionName)\\tExpand to a new industry\\ngetBonusTime()\\tGet bonus time.“Bonus time” is accumulated when the game is offline or if the game is inactive in the browser.“Bonus time” makes the game progress faster.\\ngetCorporation()\\tGet corporation data\\ngetDivision(divisionName)\\tGet division data\\ngetExpandCityCost()\\tGets the cost to expand into a new city\\ngetExpandIndustryCost(industryName)\\tGets the cost to expand into a new industry\\ngetInvestmentOffer()\\tGet an offer for investment based on you companies current valuation\\ngetUnlockUpgradeCost(upgradeName)\\tGets the cost to unlock a one time unlockable upgrade\\ngetUpgradeLevel(upgradeName)\\tGet the level of a levelable upgrade\\ngetUpgradeLevelCost(upgradeName)\\tGets the cost to unlock the next level of a levelable upgrade\\ngoPublic(numShares)\\tGo public\\nhasUnlockUpgrade(upgradeName)\\tCheck if you have a one time unlockable upgrade\\nissueDividends(percent)\\tIssue dividends\\nlevelUpgrade(upgradeName)\\tLevel an upgrade.\\nsellShares(amount)\\tSell Shares\\nunlockUpgrade(upgradeName)\\tUnlock an upgrade\\n*/\",\"filename\":\"/wip/corpBuyUnlocks.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/wip/corpBuyUnlocks.js\",\"url\":\"blob:file:///fe06f259-0e38-421e-b8ae-b0ccd1a3c694\",\"moduleSequenceNumber\":8542}],\"dependents\":[],\"ramUsage\":1024,\"server\":\"home\",\"moduleSequenceNumber\":108153,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"corporation\",\"cost\":1022.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.corporation.createCorporation(`CO`, true);\\n\\tns.corporation.expandIndustry(`Agriculture`, `AG`);\\n\\tns.corporation.unlockUpgrade(`Smart Supply`);\\n\\tns.corporation.setSmartSupply(`AG`, `Sector-12`, true);\\n}\\n\\n/*\\nconst city = `New Tokyo`;\\nconst industry = `Agriculture`;\\nconst headCount = 33;\\nconst employeeDistribution = {\\n\\t'Operations': 20,\\n\\t'Engineer': 5,\\n\\t'Business': 2,\\n\\t'Management': 1,\\n\\t'Research & Development': 5,\\n};\\nconst warehouseSize = 56 * 1000;\\nconst realEstateBuyVolume = 10 * 1000 * 1000;\\n\\n/** @param {NS} ns **/\\n/*\\nexport async function main(ns) {\\n\\tlet myCorporation = ns.corporation.getCorporation();\\n\\tmyCorporation.divisions.forEach((division) => {\\n\\t\\tns.tprint(division);\\n\\t});\\n\\tmyCorporation.divisions\\n}\\n\\n{\\n\\t\\\"name\\\":\\\"CORP\\\",\\n\\t\\\"funds\\\":3.650707433269212e+23,\\n\\t\\\"revenue\\\":158621829.12606987,\\n\\t\\\"expenses\\\":31154768.700548045,\\n\\t\\\"public\\\":true,\\n\\t\\\"totalShares\\\":2060000000,\\n\\t\\\"numShares\\\":1801000000,\\n\\t\\\"shareSaleCooldown\\\":0,\\n\\t\\\"issuedShares\\\":0,\\n\\t\\\"sharePrice\\\":388767748203639.75,\\n\\t\\\"state\\\":\\\"START\\\",\\n\\t\\\"divisions\\\":[\\n\\t\\t{\\n\\t\\t\\t\\\"name\\\":\\\"AG\\\",\\n\\t\\t\\t\\\"type\\\":\\\"Agriculture\\\",\\n\\t\\t\\t\\\"awareness\\\":4563.843688677289,\\n\\t\\t\\t\\\"popularity\\\":1202.0806227144649,\\n\\t\\t\\t\\\"prodMult\\\":364.47082879886864,\\n\\t\\t\\t\\\"research\\\":9308.752559242022,\\n\\t\\t\\t\\\"lastCycleRevenue\\\":158621829.12606987,\\n\\t\\t\\t\\\"lastCycleExpenses\\\":31154768.700548045,\\n\\t\\t\\t\\\"thisCycleRevenue\\\":1585852176.325491,\\n\\t\\t\\t\\\"thisCycleExpenses\\\":311337116.3569713,\\n\\t\\t\\t\\\"upgrades\\\":[0,16],\\n\\t\\t\\t\\\"cities\\\":[\\\"Aevum\\\",\\\"Sector-12\\\"],\\n\\t\\t\\t\\\"products\\\":[]\\n\\t\\t}\\n\\t]\\n}\\n*/\",\"filename\":\"/wip/coMan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/wip/coMan.js\",\"url\":\"blob:file:///b5fb259e-025f-4610-bd06-b8d1cb955edf\",\"moduleSequenceNumber\":93243}],\"dependents\":[],\"ramUsage\":1024,\"server\":\"home\",\"moduleSequenceNumber\":108793,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"corporation\",\"cost\":1022.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tconst TICK = 0.5 * 1000;\\n\\n\\tconst division = \\\"AG\\\";\\n\\tconst city = \\\"Sector-12\\\";\\n\\n\\t// warehouse initialization\\n\\twhile (!ns.corporation.hasWarehouse(division, city)) {\\n\\t\\tawait ns.sleep(TICK);\\n\\t\\tns.corporation.purchaseWarehouse(division, city);\\n\\t}\\n\\n\\tif (!ns.corporation.getWarehouse(division, city)[\\\"smartSupplyEnabled\\\"]) { ns.corporation.setSmartSupply(division, city, true); }\\n\\tfor (let material of [\\\"Water\\\", \\\"Energy\\\"]) { ns.corporation.setSmartSupplyUseLeftovers(division, city, material, true); }\\n\\n\\tfor (let material of [\\\"Food\\\", \\\"Plants\\\"]) {\\n\\t\\tns.tprint(`Getting details for material: ${material}`);\\n\\t\\tlet details = ns.corporation.getMaterial(division, city, material);\\n\\t\\tns.tprint(`${JSON.stringify(details)}`);\\n\\t\\tif (!details.sell === 'MAX' || !details.sCost === 'MP') {\\n\\t\\t\\tns.corporation.sellMaterial(division, city, material, `MAX`, `MP`);\\n\\t\\t}\\n\\t}\\n\\n\\t// office initialization\\n\\tconst maxEmployees = 45;\\n\\t// set office size\\n\\twhile (ns.corporation.getOffice(division, city).size < maxEmployees) {\\n\\t\\tawait ns.sleep(TICK);\\n\\t\\tns.corporation.upgradeOfficeSize(division, city, 1);\\n\\t}\\n\\t// get employees\\n\\twhile (ns.corporation.getOffice(division, city).employees.length < maxEmployees) {\\n\\t\\tawait ns.sleep(TICK);\\n\\t\\tns.corporation.hireEmployee(division, city);\\n\\t}\\n\\n\\tawait ns.corporation.setAutoJobAssignment(division, city, `Operations`, 25);\\n\\tawait ns.corporation.setAutoJobAssignment(division, city, `Engineer`, 5);\\n\\tawait ns.corporation.setAutoJobAssignment(division, city, `Business`, 5);\\n\\tawait ns.corporation.setAutoJobAssignment(division, city, `Management`, 5);\\n\\tawait ns.corporation.setAutoJobAssignment(division, city, `Research & Development`, 5);\\n}\\n\\n/*\\nAllMaterials: [\\n\\t\\\"Water\\\",\\n\\t\\\"Energy\\\",\\n\\t\\\"Food\\\",\\n\\t\\\"Plants\\\",\\n\\t\\\"Metal\\\",\\n\\t\\\"Hardware\\\",\\n\\t\\\"Chemicals\\\",\\n\\t\\\"Drugs\\\",\\n\\t\\\"Robots\\\",\\n\\t\\\"AI Cores\\\",\\n\\t\\\"Real Estate\\\",\\n  ],\\n  */\",\"filename\":\"/wip/offMan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/wip/offMan.js\",\"url\":\"blob:file:///3be4d878-7196-4ca5-a3d3-37332d532a9e\",\"moduleSequenceNumber\":95626}],\"dependents\":[],\"ramUsage\":1026.5,\"server\":\"home\",\"moduleSequenceNumber\":108155,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"corporation\",\"cost\":1022.4},{\"type\":\"fn\",\"name\":\"stock.sell\",\"cost\":2.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  let maxSpend = 1e100;\\n  let maxLevel = 1500;\\n\\n  [\\n    `Smart Factories`,\\n    `Wilson Analytics`,\\n    `Neural Accelerators`,\\n    `Project Insight`,\\n    `Smart Storage`,\\n    `Nuoptimal Nootropic Injector Implants`,\\n    `FocusWires`,\\n    `DreamSense`,\\n    `Speech Processor Implants`,\\n    `ABC SalesBots`,\\n  ].forEach((upgrade) => {\\n    while (\\n      ns.corporation.getUpgradeLevelCost(upgrade) < maxSpend &&\\n      ns.corporation.getUpgradeLevel(upgrade) < maxLevel\\n    ) {\\n      ns.corporation.levelUpgrade(upgrade);\\n    }\\n  });\\n}\",\"filename\":\"/bin/buyCorpUpgrades.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/bin/buyCorpUpgrades.js\",\"url\":\"blob:file:///b476306e-19a7-4cad-8a8c-3f6195cc8aeb\",\"moduleSequenceNumber\":93245}],\"dependents\":[],\"ramUsage\":1024,\"server\":\"home\",\"moduleSequenceNumber\":108156,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"corporation\",\"cost\":1022.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\t[\\n\\t\\t`Export`,\\n\\t\\t`Smart Supply`,\\n\\t\\t`Market Research - Demand`,\\n\\t\\t`Market Data - Competition`,\\n\\t\\t`VeChain`,\\n\\t\\t`Shady Accounting`,\\n\\t\\t`Government Partnership`,\\n\\t\\t`Warehouse API`,\\n\\t\\t`Office API`,\\n\\t].forEach((upgrade) => {\\n\\t\\tif (!ns.corporation.hasUnlockUpgrade(upgrade)) { ns.corporation.unlockUpgrade(upgrade); }\\n\\t})\\n}\",\"filename\":\"/bin/buyCorpUnlocks.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/bin/buyCorpUnlocks.js\",\"url\":\"blob:file:///e0185f60-a41c-4576-abfa-4102343ac9db\",\"moduleSequenceNumber\":93244}],\"dependents\":[],\"ramUsage\":1024,\"server\":\"home\",\"moduleSequenceNumber\":108157,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"corporation\",\"cost\":1022.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.tprint(`Have Stanek : ${ns.stanek.acceptGift()}`);\\n\\tns.tprint(``);\\n\\n\\t/*\\n\\tns.tprint(`Defined Fragments:`);\\n\\tns.stanek.fragmentDefinitions().forEach((fragment) => {\\n\\t\\tns.tprint(`  * ${JSON.stringify(fragment)}`);\\n\\t});\\n\\tns.tprint(``);\\n\\t*/\\n\\t\\n\\t// ns.tprint(`Active Fragments:`);\\n\\tdo {\\n\\t\\tfor (let fragment of ns.stanek.activeFragments()) {\\n\\t\\t\\tif (fragment.id < 100) {\\n\\t\\t\\t\\tns.print(`Charging fragment ${fragment.id}...`);\\n\\t\\t\\t\\tawait ns.stanek.chargeFragment(fragment.x, fragment.y);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t} while (ns.getPlayer().money < 1e150);\\n}\\n\\n/*\\nacceptGift()\\t                Accept Stanek's Gift by joining the Church of the Machine God\\nactiveFragments()\\t            List of fragments in Stanek's Gift.\\ncanPlaceFragment(rootX, rootY, rotation, fragmentId)\\tCheck if fragment can be placed at specified location.\\nchargeFragment(rootX, rootY)\\tCharge a fragment, increasing its power.\\nclearGift()\\t                    Clear the board of all fragments.\\nfragmentDefinitions()\\t        List possible fragments.\\ngetFragment(rootX, rootY)\\t    Get placed fragment at location.\\ngiftHeight()\\t                Stanek's Gift height.\\ngiftWidth()\\t                    Stanek's Gift width.\\nplaceFragment(rootX, rootY, rotation, fragmentId)\\tPlace fragment on Stanek's Gift.\\nremoveFragment(rootX, rootY)\\tRemove fragment at location.\\n\\n/wip/stanek.js: Defined Fragments:\\n/wip/stanek.js:   * {\\\"id\\\":0,\\\"shape\\\":[[false,true,true],[true,true,false]],\\\"type\\\":6,\\\"power\\\":1,\\\"limit\\\":1}\\n/wip/stanek.js:   * {\\\"id\\\":1,\\\"shape\\\":[[true,true,false],[false,true,true]],\\\"type\\\":6,\\\"power\\\":1,\\\"limit\\\":1}\\n/wip/stanek.js:   * {\\\"id\\\":5,\\\"shape\\\":[[true,true,true],[false,true,false]],\\\"type\\\":3,\\\"power\\\":1.3,\\\"limit\\\":1}\\n/wip/stanek.js:   * {\\\"id\\\":6,\\\"shape\\\":[[true,true,true,true]],\\\"type\\\":4,\\\"power\\\":2,\\\"limit\\\":1}\\n/wip/stanek.js:   * {\\\"id\\\":7,\\\"shape\\\":[[true,false,false],[true,true,true]],\\\"type\\\":5,\\\"power\\\":0.5,\\\"limit\\\":1}\\n/wip/stanek.js:   * {\\\"id\\\":10,\\\"shape\\\":[[true,true,true],[false,true,false]],\\\"type\\\":7,\\\"power\\\":2,\\\"limit\\\":1}\\n/wip/stanek.js:   * {\\\"id\\\":12,\\\"shape\\\":[[false,false,true],[true,true,true]],\\\"type\\\":8,\\\"power\\\":2,\\\"limit\\\":1}\\n/wip/stanek.js:   * {\\\"id\\\":14,\\\"shape\\\":[[false,false,true],[true,true,true]],\\\"type\\\":9,\\\"power\\\":2,\\\"limit\\\":1}\\n/wip/stanek.js:   * {\\\"id\\\":16,\\\"shape\\\":[[false,true,true],[true,true,false]],\\\"type\\\":10,\\\"power\\\":2,\\\"limit\\\":1}\\n/wip/stanek.js:   * {\\\"id\\\":18,\\\"shape\\\":[[false,true,true],[true,true,false]],\\\"type\\\":11,\\\"power\\\":3,\\\"limit\\\":1}\\n/wip/stanek.js:   * {\\\"id\\\":20,\\\"shape\\\":[[true,true,true,true]],\\\"type\\\":12,\\\"power\\\":1,\\\"limit\\\":1}\\n/wip/stanek.js:   * {\\\"id\\\":21,\\\"shape\\\":[[true,true],[true,true]],\\\"type\\\":13,\\\"power\\\":2,\\\"limit\\\":1}\\n/wip/stanek.js:   * {\\\"id\\\":25,\\\"shape\\\":[[true,false,false],[true,true,true]],\\\"type\\\":14,\\\"power\\\":0.5,\\\"limit\\\":1}\\n/wip/stanek.js:   * {\\\"id\\\":27,\\\"shape\\\":[[true,false,false],[true,true,true]],\\\"type\\\":15,\\\"power\\\":10,\\\"limit\\\":1}\\n/wip/stanek.js:   * {\\\"id\\\":28,\\\"shape\\\":[[false,false,true],[true,true,true]],\\\"type\\\":16,\\\"power\\\":2,\\\"limit\\\":1}\\n/wip/stanek.js:   * {\\\"id\\\":30,\\\"shape\\\":[[false,true,true],[true,true,false]],\\\"type\\\":17,\\\"power\\\":0.4,\\\"limit\\\":1}\\n/wip/stanek.js:   * {\\\"id\\\":100,\\\"shape\\\":[[false,true,true],[true,true,false],[false,true,false]],\\\"type\\\":18,\\\"power\\\":1.1,\\\"limit\\\":99}\\n/wip/stanek.js:   * {\\\"id\\\":101,\\\"shape\\\":[[true,true,true,true],[true,false,false,false]],\\\"type\\\":18,\\\"power\\\":1.1,\\\"limit\\\":99}\\n/wip/stanek.js:   * {\\\"id\\\":102,\\\"shape\\\":[[false,true,true,true],[true,true,false,false]],\\\"type\\\":18,\\\"power\\\":1.1,\\\"limit\\\":99}\\n/wip/stanek.js:   * {\\\"id\\\":103,\\\"shape\\\":[[true,true,true,false],[false,false,true,true]],\\\"type\\\":18,\\\"power\\\":1.1,\\\"limit\\\":99}\\n/wip/stanek.js:   * {\\\"id\\\":104,\\\"shape\\\":[[false,true,true],[false,true,false],[true,true,false]],\\\"type\\\":18,\\\"power\\\":1.1,\\\"limit\\\":99}\\n/wip/stanek.js:   * {\\\"id\\\":105,\\\"shape\\\":[[false,false,true],[false,true,true],[true,true,false]],\\\"type\\\":18,\\\"power\\\":1.1,\\\"limit\\\":99}\\n/wip/stanek.js:   * {\\\"id\\\":106,\\\"shape\\\":[[true,false,false],[true,true,true],[true,false,false]],\\\"type\\\":18,\\\"power\\\":1.1,\\\"limit\\\":99}\\n/wip/stanek.js:   * {\\\"id\\\":107,\\\"shape\\\":[[false,true,false],[true,true,true],[false,true,false]],\\\"type\\\":18,\\\"power\\\":1.1,\\\"limit\\\":99}\\n*/\",\"filename\":\"/wip/stanek.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/wip/stanek.js\",\"url\":\"blob:file:///49b8c076-a53d-4c48-984f-afaa1b2aef5d\",\"moduleSequenceNumber\":108251}],\"dependents\":[],\"ramUsage\":9.5,\"server\":\"home\",\"moduleSequenceNumber\":108251,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.acceptGift\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"stanek.activeFragments\",\"cost\":5},{\"type\":\"fn\",\"name\":\"stanek.chargeFragment\",\"cost\":0.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.bladeburner.joinBladeburnerDivision();\\n}\",\"filename\":\"/wip/blade.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/wip/blade.js\",\"url\":\"blob:file:///88eca6d5-0da2-444f-8c8a-945b53e8fedc\",\"moduleSequenceNumber\":91904}],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"home\",\"moduleSequenceNumber\":108159,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"bladeburner.joinBladeburnerDivision\",\"cost\":4}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\",\"hacknet-node-0\",\"hacknet-node-1\",\"hacknet-node-2\",\"hacknet-node-3\",\"hacknet-node-4\",\"hacknet-node-5\",\"hacknet-node-6\",\"hacknet-node-7\",\"hacknet-node-8\",\"hacknet-node-9\",\"hacknet-node-10\",\"hacknet-node-11\",\"hacknet-node-12\",\"hacknet-node-13\",\"hacknet-node-14\",\"hacknet-node-15\",\"hacknet-node-16\",\"hacknet-node-17\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":1,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"ecorp\",\"httpPortOpen\":true,\"ip\":\"11.4.4.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/* A simple lightweight script that is deployed\\n * to remote and local servers to repeatedly hack\\n * a particular server.\\n * The smaller this is, the more threads can be deployed.\\n * args[0] - server name\\n * args[1] - threads to attack with\\n */\\nexport async function main(ns, args) {\\n    await hackServer(ns, ns.args[0], ns.args[1]);\\n}\\n\\nasync function hackServer(ns, server, threads) {\\n    ns.disableLog('getServerSecurityLevel');\\n    let serverSecurityThreshold = ns.getServerMinSecurityLevel(server) + 2;\\n    let serverMoneyThreshold = ns.getServerMaxMoney(server) * 0.95;\\n    let opts = { threads: threads, stock: true };\\n    while (true) {\\n        if (ns.getServerSecurityLevel(server) > serverSecurityThreshold) {\\n            await ns.weaken(server, opts);\\n        } else if (ns.getServerMoneyAvailable(server) < serverMoneyThreshold) {\\n            await ns.grow(server, opts);\\n        } else {\\n            await ns.hack(server, opts);\\n        }\\n    }\\n}\\n\\nexport function autocomplete(data, args) {\\n    return [...data.servers];\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"ecorp\",\"moduleSequenceNumber\":108327,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":297,\"hackDifficulty\":297,\"minDifficulty\":99,\"moneyAvailable\":45062326245.75,\"moneyMax\":506951170264.6875,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1354,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"megacorp\",\"httpPortOpen\":true,\"ip\":\"37.8.3.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/* A simple lightweight script that is deployed\\n * to remote and local servers to repeatedly hack\\n * a particular server.\\n * The smaller this is, the more threads can be deployed.\\n * args[0] - server name\\n * args[1] - threads to attack with\\n */\\nexport async function main(ns, args) {\\n    await hackServer(ns, ns.args[0], ns.args[1]);\\n}\\n\\nasync function hackServer(ns, server, threads) {\\n    ns.disableLog('getServerSecurityLevel');\\n    let serverSecurityThreshold = ns.getServerMinSecurityLevel(server) + 2;\\n    let serverMoneyThreshold = ns.getServerMaxMoney(server) * 0.95;\\n    let opts = { threads: threads, stock: true };\\n    while (true) {\\n        if (ns.getServerSecurityLevel(server) > serverSecurityThreshold) {\\n            await ns.weaken(server, opts);\\n        } else if (ns.getServerMoneyAvailable(server) < serverMoneyThreshold) {\\n            await ns.grow(server, opts);\\n        } else {\\n            await ns.hack(server, opts);\\n        }\\n    }\\n}\\n\\nexport function autocomplete(data, args) {\\n    return [...data.servers];\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"megacorp\",\"moduleSequenceNumber\":108337,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":297,\"hackDifficulty\":297,\"minDifficulty\":99,\"moneyAvailable\":31066470736.5,\"moneyMax\":349497795785.625,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1231,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"b-and-a\",\"httpPortOpen\":true,\"ip\":\"88.5.9.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/* A simple lightweight script that is deployed\\n * to remote and local servers to repeatedly hack\\n * a particular server.\\n * The smaller this is, the more threads can be deployed.\\n * args[0] - server name\\n * args[1] - threads to attack with\\n */\\nexport async function main(ns, args) {\\n    await hackServer(ns, ns.args[0], ns.args[1]);\\n}\\n\\nasync function hackServer(ns, server, threads) {\\n    ns.disableLog('getServerSecurityLevel');\\n    let serverSecurityThreshold = ns.getServerMinSecurityLevel(server) + 2;\\n    let serverMoneyThreshold = ns.getServerMaxMoney(server) * 0.95;\\n    let opts = { threads: threads, stock: true };\\n    while (true) {\\n        if (ns.getServerSecurityLevel(server) > serverSecurityThreshold) {\\n            await ns.weaken(server, opts);\\n        } else if (ns.getServerMoneyAvailable(server) < serverMoneyThreshold) {\\n            await ns.grow(server, opts);\\n        } else {\\n            await ns.hack(server, opts);\\n        }\\n    }\\n}\\n\\nexport function autocomplete(data, args) {\\n    return [...data.servers];\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"b-and-a\",\"moduleSequenceNumber\":108344,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"4sigma\",\"fulcrumassets\",\"The-Cave\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":237,\"hackDifficulty\":237,\"minDifficulty\":79,\"moneyAvailable\":13241831778,\"moneyMax\":148970607502.5,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1027,\"serverGrowth\":64}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"blade\",\"httpPortOpen\":true,\"ip\":\"14.1.0.4\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":127.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\",53],\"dataMap\":{\"blade\":[560878531093.125,106,2544,212]},\"filename\":\"/scripts/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":9769788.2354916,\"onlineMoneyMade\":560878531093.125,\"onlineRunningTime\":16.809999999999974,\"pid\":719,\"ramUsage\":2.4,\"server\":\"blade\",\"threads\":53,\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///634167ac-0e2d-4857-aedc-a12de1d3868f\",\"moduleSequenceNumber\":108318}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/* A simple lightweight script that is deployed\\n * to remote and local servers to repeatedly hack\\n * a particular server.\\n * The smaller this is, the more threads can be deployed.\\n * args[0] - server name\\n * args[1] - threads to attack with\\n */\\nexport async function main(ns, args) {\\n    await hackServer(ns, ns.args[0], ns.args[1]);\\n}\\n\\nasync function hackServer(ns, server, threads) {\\n    ns.disableLog('getServerSecurityLevel');\\n    let serverSecurityThreshold = ns.getServerMinSecurityLevel(server) + 2;\\n    let serverMoneyThreshold = ns.getServerMaxMoney(server) * 0.95;\\n    let opts = { threads: threads, stock: true };\\n    while (true) {\\n        if (ns.getServerSecurityLevel(server) > serverSecurityThreshold) {\\n            await ns.weaken(server, opts);\\n        } else if (ns.getServerMoneyAvailable(server) < serverMoneyThreshold) {\\n            await ns.grow(server, opts);\\n        } else {\\n            await ns.hack(server, opts);\\n        }\\n    }\\n}\\n\\nexport function autocomplete(data, args) {\\n    return [...data.servers];\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///634167ac-0e2d-4857-aedc-a12de1d3868f\",\"moduleSequenceNumber\":108318}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"blade\",\"moduleSequenceNumber\":108318,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":273,\"hackDifficulty\":93.12000000000003,\"minDifficulty\":91,\"moneyAvailable\":9772344320.823542,\"moneyMax\":280439265546.5625,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1103,\"serverGrowth\":78}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nwo\",\"httpPortOpen\":true,\"ip\":\"3.6.3.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/* A simple lightweight script that is deployed\\n * to remote and local servers to repeatedly hack\\n * a particular server.\\n * The smaller this is, the more threads can be deployed.\\n * args[0] - server name\\n * args[1] - threads to attack with\\n */\\nexport async function main(ns, args) {\\n    await hackServer(ns, ns.args[0], ns.args[1]);\\n}\\n\\nasync function hackServer(ns, server, threads) {\\n    ns.disableLog('getServerSecurityLevel');\\n    let serverSecurityThreshold = ns.getServerMinSecurityLevel(server) + 2;\\n    let serverMoneyThreshold = ns.getServerMaxMoney(server) * 0.95;\\n    let opts = { threads: threads, stock: true };\\n    while (true) {\\n        if (ns.getServerSecurityLevel(server) > serverSecurityThreshold) {\\n            await ns.weaken(server, opts);\\n        } else if (ns.getServerMoneyAvailable(server) < serverMoneyThreshold) {\\n            await ns.grow(server, opts);\\n        } else {\\n            await ns.hack(server, opts);\\n        }\\n    }\\n}\\n\\nexport function autocomplete(data, args) {\\n    return [...data.servers];\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"nwo\",\"moduleSequenceNumber\":108320,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":297,\"hackDifficulty\":297,\"minDifficulty\":99,\"moneyAvailable\":23439689181,\"moneyMax\":263696503286.25,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":971,\"serverGrowth\":74}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"clarkinc\",\"httpPortOpen\":true,\"ip\":\"70.3.2.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/* A simple lightweight script that is deployed\\n * to remote and local servers to repeatedly hack\\n * a particular server.\\n * The smaller this is, the more threads can be deployed.\\n * args[0] - server name\\n * args[1] - threads to attack with\\n */\\nexport async function main(ns, args) {\\n    await hackServer(ns, ns.args[0], ns.args[1]);\\n}\\n\\nasync function hackServer(ns, server, threads) {\\n    ns.disableLog('getServerSecurityLevel');\\n    let serverSecurityThreshold = ns.getServerMinSecurityLevel(server) + 2;\\n    let serverMoneyThreshold = ns.getServerMaxMoney(server) * 0.95;\\n    let opts = { threads: threads, stock: true };\\n    while (true) {\\n        if (ns.getServerSecurityLevel(server) > serverSecurityThreshold) {\\n            await ns.weaken(server, opts);\\n        } else if (ns.getServerMoneyAvailable(server) < serverMoneyThreshold) {\\n            await ns.grow(server, opts);\\n        } else {\\n            await ns.hack(server, opts);\\n        }\\n    }\\n}\\n\\nexport function autocomplete(data, args) {\\n    return [...data.servers];\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"clarkinc\",\"moduleSequenceNumber\":108325,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\".\",\"ecorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":189,\"hackDifficulty\":189,\"minDifficulty\":63,\"moneyAvailable\":13923471858,\"moneyMax\":156639058402.5,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1165,\"serverGrowth\":51}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnitek\",\"httpPortOpen\":true,\"ip\":\"28.4.4.2\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":511.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\",213],\"dataMap\":{},\"filename\":\"/scripts/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":31828143.625131775,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.809999999999974,\"pid\":721,\"ramUsage\":2.4,\"server\":\"omnitek\",\"threads\":213,\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///5cb1342a-b91f-4f35-bb93-2db92de0a35a\",\"moduleSequenceNumber\":108333}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/* A simple lightweight script that is deployed\\n * to remote and local servers to repeatedly hack\\n * a particular server.\\n * The smaller this is, the more threads can be deployed.\\n * args[0] - server name\\n * args[1] - threads to attack with\\n */\\nexport async function main(ns, args) {\\n    await hackServer(ns, ns.args[0], ns.args[1]);\\n}\\n\\nasync function hackServer(ns, server, threads) {\\n    ns.disableLog('getServerSecurityLevel');\\n    let serverSecurityThreshold = ns.getServerMinSecurityLevel(server) + 2;\\n    let serverMoneyThreshold = ns.getServerMaxMoney(server) * 0.95;\\n    let opts = { threads: threads, stock: true };\\n    while (true) {\\n        if (ns.getServerSecurityLevel(server) > serverSecurityThreshold) {\\n            await ns.weaken(server, opts);\\n        } else if (ns.getServerMoneyAvailable(server) < serverMoneyThreshold) {\\n            await ns.grow(server, opts);\\n        } else {\\n            await ns.hack(server, opts);\\n        }\\n    }\\n}\\n\\nexport function autocomplete(data, args) {\\n    return [...data.servers];\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///5cb1342a-b91f-4f35-bb93-2db92de0a35a\",\"moduleSequenceNumber\":108333}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"omnitek\",\"moduleSequenceNumber\":108333,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"stormtech\",\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":294,\"hackDifficulty\":100,\"minDifficulty\":98,\"moneyAvailable\":143814716924.0625,\"moneyMax\":143814716924.0625,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1085,\"serverGrowth\":97}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"4sigma\",\"httpPortOpen\":true,\"ip\":\"88.5.2.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/* A simple lightweight script that is deployed\\n * to remote and local servers to repeatedly hack\\n * a particular server.\\n * The smaller this is, the more threads can be deployed.\\n * args[0] - server name\\n * args[1] - threads to attack with\\n */\\nexport async function main(ns, args) {\\n    await hackServer(ns, ns.args[0], ns.args[1]);\\n}\\n\\nasync function hackServer(ns, server, threads) {\\n    ns.disableLog('getServerSecurityLevel');\\n    let serverSecurityThreshold = ns.getServerMinSecurityLevel(server) + 2;\\n    let serverMoneyThreshold = ns.getServerMaxMoney(server) * 0.95;\\n    let opts = { threads: threads, stock: true };\\n    while (true) {\\n        if (ns.getServerSecurityLevel(server) > serverSecurityThreshold) {\\n            await ns.weaken(server, opts);\\n        } else if (ns.getServerMoneyAvailable(server) < serverMoneyThreshold) {\\n            await ns.grow(server, opts);\\n        } else {\\n            await ns.hack(server, opts);\\n        }\\n    }\\n}\\n\\nexport function autocomplete(data, args) {\\n    return [...data.servers];\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"4sigma\",\"moduleSequenceNumber\":108342,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"vitalife\",\"b-and-a\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":177,\"hackDifficulty\":177,\"minDifficulty\":59,\"moneyAvailable\":16269470695.5,\"moneyMax\":183031545324.375,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1043,\"serverGrowth\":81}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"kuai-gong\",\"httpPortOpen\":true,\"ip\":\"13.2.1.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/* A simple lightweight script that is deployed\\n * to remote and local servers to repeatedly hack\\n * a particular server.\\n * The smaller this is, the more threads can be deployed.\\n * args[0] - server name\\n * args[1] - threads to attack with\\n */\\nexport async function main(ns, args) {\\n    await hackServer(ns, ns.args[0], ns.args[1]);\\n}\\n\\nasync function hackServer(ns, server, threads) {\\n    ns.disableLog('getServerSecurityLevel');\\n    let serverSecurityThreshold = ns.getServerMinSecurityLevel(server) + 2;\\n    let serverMoneyThreshold = ns.getServerMaxMoney(server) * 0.95;\\n    let opts = { threads: threads, stock: true };\\n    while (true) {\\n        if (ns.getServerSecurityLevel(server) > serverSecurityThreshold) {\\n            await ns.weaken(server, opts);\\n        } else if (ns.getServerMoneyAvailable(server) < serverMoneyThreshold) {\\n            await ns.grow(server, opts);\\n        } else {\\n            await ns.hack(server, opts);\\n        }\\n    }\\n}\\n\\nexport function autocomplete(data, args) {\\n    return [...data.servers];\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":108315,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"fulcrumtech\",\"blade\",\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":297,\"hackDifficulty\":297,\"minDifficulty\":99,\"moneyAvailable\":18485499078.75,\"moneyMax\":207961864635.9375,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1038,\"serverGrowth\":97}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":true,\"ip\":\"69.9.5.1\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":2047.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\",853],\"dataMap\":{\"fulcrumtech\":[284077124493.75,17060,17060,17060]},\"filename\":\"/scripts/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":167302901.24178645,\"onlineMoneyMade\":284077124493.75,\"onlineRunningTime\":16.809999999999974,\"pid\":718,\"ramUsage\":2.4,\"server\":\"fulcrumtech\",\"threads\":853,\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///1c95a97b-4305-4380-8448-fb9793194563\",\"moduleSequenceNumber\":108314}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/* A simple lightweight script that is deployed\\n * to remote and local servers to repeatedly hack\\n * a particular server.\\n * The smaller this is, the more threads can be deployed.\\n * args[0] - server name\\n * args[1] - threads to attack with\\n */\\nexport async function main(ns, args) {\\n    await hackServer(ns, ns.args[0], ns.args[1]);\\n}\\n\\nasync function hackServer(ns, server, threads) {\\n    ns.disableLog('getServerSecurityLevel');\\n    let serverSecurityThreshold = ns.getServerMinSecurityLevel(server) + 2;\\n    let serverMoneyThreshold = ns.getServerMaxMoney(server) * 0.95;\\n    let opts = { threads: threads, stock: true };\\n    while (true) {\\n        if (ns.getServerSecurityLevel(server) > serverSecurityThreshold) {\\n            await ns.weaken(server, opts);\\n        } else if (ns.getServerMoneyAvailable(server) < serverMoneyThreshold) {\\n            await ns.grow(server, opts);\\n        } else {\\n            await ns.hack(server, opts);\\n        }\\n    }\\n}\\n\\nexport function autocomplete(data, args) {\\n    return [...data.servers];\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///1c95a97b-4305-4380-8448-fb9793194563\",\"moduleSequenceNumber\":108314}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":108314,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"microdyne\",\"kuai-gong\",\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":261,\"hackDifficulty\":89.116,\"minDifficulty\":87,\"moneyAvailable\":14203856224.6875,\"moneyMax\":14203856224.6875,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1238,\"serverGrowth\":96}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":true,\"ip\":\"93.2.0.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/* A simple lightweight script that is deployed\\n * to remote and local servers to repeatedly hack\\n * a particular server.\\n * The smaller this is, the more threads can be deployed.\\n * args[0] - server name\\n * args[1] - threads to attack with\\n */\\nexport async function main(ns, args) {\\n    await hackServer(ns, ns.args[0], ns.args[1]);\\n}\\n\\nasync function hackServer(ns, server, threads) {\\n    ns.disableLog('getServerSecurityLevel');\\n    let serverSecurityThreshold = ns.getServerMinSecurityLevel(server) + 2;\\n    let serverMoneyThreshold = ns.getServerMaxMoney(server) * 0.95;\\n    let opts = { threads: threads, stock: true };\\n    while (true) {\\n        if (ns.getServerSecurityLevel(server) > serverSecurityThreshold) {\\n            await ns.weaken(server, opts);\\n        } else if (ns.getServerMoneyAvailable(server) < serverMoneyThreshold) {\\n            await ns.grow(server, opts);\\n        } else {\\n            await ns.hack(server, opts);\\n        }\\n    }\\n}\\n\\nexport function autocomplete(data, args) {\\n    return [...data.servers];\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":108346,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":297,\"hackDifficulty\":297,\"minDifficulty\":99,\"moneyAvailable\":750000,\"moneyMax\":8437500,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1321,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"stormtech\",\"httpPortOpen\":true,\"ip\":\"48.0.8.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/* A simple lightweight script that is deployed\\n * to remote and local servers to repeatedly hack\\n * a particular server.\\n * The smaller this is, the more threads can be deployed.\\n * args[0] - server name\\n * args[1] - threads to attack with\\n */\\nexport async function main(ns, args) {\\n    await hackServer(ns, ns.args[0], ns.args[1]);\\n}\\n\\nasync function hackServer(ns, server, threads) {\\n    ns.disableLog('getServerSecurityLevel');\\n    let serverSecurityThreshold = ns.getServerMinSecurityLevel(server) + 2;\\n    let serverMoneyThreshold = ns.getServerMaxMoney(server) * 0.95;\\n    let opts = { threads: threads, stock: true };\\n    while (true) {\\n        if (ns.getServerSecurityLevel(server) > serverSecurityThreshold) {\\n            await ns.weaken(server, opts);\\n        } else if (ns.getServerMoneyAvailable(server) < serverMoneyThreshold) {\\n            await ns.grow(server, opts);\\n        } else {\\n            await ns.hack(server, opts);\\n        }\\n    }\\n}\\n\\nexport function autocomplete(data, args) {\\n    return [...data.servers];\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"stormtech\",\"moduleSequenceNumber\":108329,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"microdyne\",\"omnitek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":237,\"hackDifficulty\":237,\"minDifficulty\":79,\"moneyAvailable\":775344546.75,\"moneyMax\":8722626150.9375,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":897,\"serverGrowth\":83}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"defcomm\",\"httpPortOpen\":true,\"ip\":\"82.9.2.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/* A simple lightweight script that is deployed\\n * to remote and local servers to repeatedly hack\\n * a particular server.\\n * The smaller this is, the more threads can be deployed.\\n * args[0] - server name\\n * args[1] - threads to attack with\\n */\\nexport async function main(ns, args) {\\n    await hackServer(ns, ns.args[0], ns.args[1]);\\n}\\n\\nasync function hackServer(ns, server, threads) {\\n    ns.disableLog('getServerSecurityLevel');\\n    let serverSecurityThreshold = ns.getServerMinSecurityLevel(server) + 2;\\n    let serverMoneyThreshold = ns.getServerMaxMoney(server) * 0.95;\\n    let opts = { threads: threads, stock: true };\\n    while (true) {\\n        if (ns.getServerSecurityLevel(server) > serverSecurityThreshold) {\\n            await ns.weaken(server, opts);\\n        } else if (ns.getServerMoneyAvailable(server) < serverMoneyThreshold) {\\n            await ns.grow(server, opts);\\n        } else {\\n            await ns.hack(server, opts);\\n        }\\n    }\\n}\\n\\nexport function autocomplete(data, args) {\\n    return [...data.servers];\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"defcomm\",\"moduleSequenceNumber\":108292,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":285,\"hackDifficulty\":285,\"minDifficulty\":95,\"moneyAvailable\":604850410.5,\"moneyMax\":6804567118.125,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":927,\"serverGrowth\":48}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"infocomm\",\"httpPortOpen\":true,\"ip\":\"85.1.4.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/* A simple lightweight script that is deployed\\n * to remote and local servers to repeatedly hack\\n * a particular server.\\n * The smaller this is, the more threads can be deployed.\\n * args[0] - server name\\n * args[1] - threads to attack with\\n */\\nexport async function main(ns, args) {\\n    await hackServer(ns, ns.args[0], ns.args[1]);\\n}\\n\\nasync function hackServer(ns, server, threads) {\\n    ns.disableLog('getServerSecurityLevel');\\n    let serverSecurityThreshold = ns.getServerMinSecurityLevel(server) + 2;\\n    let serverMoneyThreshold = ns.getServerMaxMoney(server) * 0.95;\\n    let opts = { threads: threads, stock: true };\\n    while (true) {\\n        if (ns.getServerSecurityLevel(server) > serverSecurityThreshold) {\\n            await ns.weaken(server, opts);\\n        } else if (ns.getServerMoneyAvailable(server) < serverMoneyThreshold) {\\n            await ns.grow(server, opts);\\n        } else {\\n            await ns.hack(server, opts);\\n        }\\n    }\\n}\\n\\nexport function autocomplete(data, args) {\\n    return [...data.servers];\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"infocomm\",\"moduleSequenceNumber\":108296,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"icarus\",\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":213,\"hackDifficulty\":213,\"minDifficulty\":71,\"moneyAvailable\":508669221,\"moneyMax\":5722528736.25,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":933,\"serverGrowth\":44}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"helios\",\"httpPortOpen\":true,\"ip\":\"77.8.2.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"helios\",13],\"dataMap\":{\"helios\":[48417131438,117,806,65]},\"filename\":\"/scripts/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3158162.144281174,\"onlineMoneyMade\":48417131438,\"onlineRunningTime\":16.809999999999974,\"pid\":715,\"ramUsage\":2.4,\"server\":\"helios\",\"threads\":13,\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///b67e06ad-a1df-4d73-9774-1a2cc3ecace8\",\"moduleSequenceNumber\":108302}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/* A simple lightweight script that is deployed\\n * to remote and local servers to repeatedly hack\\n * a particular server.\\n * The smaller this is, the more threads can be deployed.\\n * args[0] - server name\\n * args[1] - threads to attack with\\n */\\nexport async function main(ns, args) {\\n    await hackServer(ns, ns.args[0], ns.args[1]);\\n}\\n\\nasync function hackServer(ns, server, threads) {\\n    ns.disableLog('getServerSecurityLevel');\\n    let serverSecurityThreshold = ns.getServerMinSecurityLevel(server) + 2;\\n    let serverMoneyThreshold = ns.getServerMaxMoney(server) * 0.95;\\n    let opts = { threads: threads, stock: true };\\n    while (true) {\\n        if (ns.getServerSecurityLevel(server) > serverSecurityThreshold) {\\n            await ns.weaken(server, opts);\\n        } else if (ns.getServerMoneyAvailable(server) < serverMoneyThreshold) {\\n            await ns.grow(server, opts);\\n        } else {\\n            await ns.hack(server, opts);\\n        }\\n    }\\n}\\n\\nexport function autocomplete(data, args) {\\n    return [...data.servers];\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///b67e06ad-a1df-4d73-9774-1a2cc3ecace8\",\"moduleSequenceNumber\":108302}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"helios\",\"moduleSequenceNumber\":108302,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":255,\"hackDifficulty\":86.44800000001491,\"minDifficulty\":85,\"moneyAvailable\":3365872950.6149545,\"moneyMax\":6273186851.25,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":897,\"serverGrowth\":70}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"vitalife\",\"httpPortOpen\":true,\"ip\":\"42.6.8.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vitalife\",13],\"dataMap\":{\"vitalife\":[56460392352,143,858,65]},\"filename\":\"/scripts/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3446056.6820784686,\"onlineMoneyMade\":56460392352,\"onlineRunningTime\":16.809999999999974,\"pid\":723,\"ramUsage\":2.4,\"server\":\"vitalife\",\"threads\":13,\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///70e68acf-2678-44c1-8401-2cc5165c1e2a\",\"moduleSequenceNumber\":108341}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/* A simple lightweight script that is deployed\\n * to remote and local servers to repeatedly hack\\n * a particular server.\\n * The smaller this is, the more threads can be deployed.\\n * args[0] - server name\\n * args[1] - threads to attack with\\n */\\nexport async function main(ns, args) {\\n    await hackServer(ns, ns.args[0], ns.args[1]);\\n}\\n\\nasync function hackServer(ns, server, threads) {\\n    ns.disableLog('getServerSecurityLevel');\\n    let serverSecurityThreshold = ns.getServerMinSecurityLevel(server) + 2;\\n    let serverMoneyThreshold = ns.getServerMaxMoney(server) * 0.95;\\n    let opts = { threads: threads, stock: true };\\n    while (true) {\\n        if (ns.getServerSecurityLevel(server) > serverSecurityThreshold) {\\n            await ns.weaken(server, opts);\\n        } else if (ns.getServerMoneyAvailable(server) < serverMoneyThreshold) {\\n            await ns.grow(server, opts);\\n        } else {\\n            await ns.hack(server, opts);\\n        }\\n    }\\n}\\n\\nexport function autocomplete(data, args) {\\n    return [...data.servers];\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///70e68acf-2678-44c1-8401-2cc5165c1e2a\",\"moduleSequenceNumber\":108341}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"vitalife\",\"moduleSequenceNumber\":108341,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"microdyne\",\"4sigma\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":258,\"hackDifficulty\":87.754000000016,\"minDifficulty\":86,\"moneyAvailable\":2868731047.0637913,\"moneyMax\":6520249119.375,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":831,\"serverGrowth\":60}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"icarus\",\"httpPortOpen\":true,\"ip\":\"29.3.5.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/* A simple lightweight script that is deployed\\n * to remote and local servers to repeatedly hack\\n * a particular server.\\n * The smaller this is, the more threads can be deployed.\\n * args[0] - server name\\n * args[1] - threads to attack with\\n */\\nexport async function main(ns, args) {\\n    await hackServer(ns, ns.args[0], ns.args[1]);\\n}\\n\\nasync function hackServer(ns, server, threads) {\\n    ns.disableLog('getServerSecurityLevel');\\n    let serverSecurityThreshold = ns.getServerMinSecurityLevel(server) + 2;\\n    let serverMoneyThreshold = ns.getServerMaxMoney(server) * 0.95;\\n    let opts = { threads: threads, stock: true };\\n    while (true) {\\n        if (ns.getServerSecurityLevel(server) > serverSecurityThreshold) {\\n            await ns.weaken(server, opts);\\n        } else if (ns.getServerMoneyAvailable(server) < serverMoneyThreshold) {\\n            await ns.grow(server, opts);\\n        } else {\\n            await ns.hack(server, opts);\\n        }\\n    }\\n}\\n\\nexport function autocomplete(data, args) {\\n    return [...data.servers];\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"icarus\",\"moduleSequenceNumber\":108294,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"unitalife\",\"infocomm\",\"zb-def\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":279,\"hackDifficulty\":279,\"minDifficulty\":93,\"moneyAvailable\":742404853.5,\"moneyMax\":8352054601.875,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":913,\"serverGrowth\":93}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"univ-energy\",\"httpPortOpen\":true,\"ip\":\"40.5.6.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\",6],\"dataMap\":{\"univ-energy\":[62716762362,120,372,36]},\"filename\":\"/scripts/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1725967.4698269863,\"onlineMoneyMade\":62716762362,\"onlineRunningTime\":16.809999999999974,\"pid\":712,\"ramUsage\":2.4,\"server\":\"univ-energy\",\"threads\":6,\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///8c28b042-ee80-474d-9dd6-10af991df147\",\"moduleSequenceNumber\":108286}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/* A simple lightweight script that is deployed\\n * to remote and local servers to repeatedly hack\\n * a particular server.\\n * The smaller this is, the more threads can be deployed.\\n * args[0] - server name\\n * args[1] - threads to attack with\\n */\\nexport async function main(ns, args) {\\n    await hackServer(ns, ns.args[0], ns.args[1]);\\n}\\n\\nasync function hackServer(ns, server, threads) {\\n    ns.disableLog('getServerSecurityLevel');\\n    let serverSecurityThreshold = ns.getServerMinSecurityLevel(server) + 2;\\n    let serverMoneyThreshold = ns.getServerMaxMoney(server) * 0.95;\\n    let opts = { threads: threads, stock: true };\\n    while (true) {\\n        if (ns.getServerSecurityLevel(server) > serverSecurityThreshold) {\\n            await ns.weaken(server, opts);\\n        } else if (ns.getServerMoneyAvailable(server) < serverMoneyThreshold) {\\n            await ns.grow(server, opts);\\n        } else {\\n            await ns.hack(server, opts);\\n        }\\n    }\\n}\\n\\nexport function autocomplete(data, args) {\\n    return [...data.servers];\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///8c28b042-ee80-474d-9dd6-10af991df147\",\"moduleSequenceNumber\":108286}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"univ-energy\",\"moduleSequenceNumber\":108286,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"deltaone\",\"taiyang-digital\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":261,\"hackDifficulty\":88.70000000000424,\"minDifficulty\":87,\"moneyAvailable\":9435164529.375,\"moneyMax\":9435164529.375,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":822,\"serverGrowth\":81}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"titan-labs\",\"httpPortOpen\":true,\"ip\":\"12.5.9.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"titan-labs\",13],\"dataMap\":{\"titan-labs\":[6441563854.6875,13,988,78]},\"filename\":\"/scripts/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3136669.248447916,\"onlineMoneyMade\":6441563854.6875,\"onlineRunningTime\":16.809999999999974,\"pid\":716,\"ramUsage\":2.4,\"server\":\"titan-labs\",\"threads\":13,\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///af1936b7-4997-4b79-84d8-cda9e5cae7d4\",\"moduleSequenceNumber\":108307}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/* A simple lightweight script that is deployed\\n * to remote and local servers to repeatedly hack\\n * a particular server.\\n * The smaller this is, the more threads can be deployed.\\n * args[0] - server name\\n * args[1] - threads to attack with\\n */\\nexport async function main(ns, args) {\\n    await hackServer(ns, ns.args[0], ns.args[1]);\\n}\\n\\nasync function hackServer(ns, server, threads) {\\n    ns.disableLog('getServerSecurityLevel');\\n    let serverSecurityThreshold = ns.getServerMinSecurityLevel(server) + 2;\\n    let serverMoneyThreshold = ns.getServerMaxMoney(server) * 0.95;\\n    let opts = { threads: threads, stock: true };\\n    while (true) {\\n        if (ns.getServerSecurityLevel(server) > serverSecurityThreshold) {\\n            await ns.weaken(server, opts);\\n        } else if (ns.getServerMoneyAvailable(server) < serverMoneyThreshold) {\\n            await ns.grow(server, opts);\\n        } else {\\n            await ns.hack(server, opts);\\n        }\\n    }\\n}\\n\\nexport function autocomplete(data, args) {\\n    return [...data.servers];\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///af1936b7-4997-4b79-84d8-cda9e5cae7d4\",\"moduleSequenceNumber\":108307}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"titan-labs\",\"moduleSequenceNumber\":108307,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"zb-def\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":231,\"hackDifficulty\":78.81600000002274,\"minDifficulty\":77,\"moneyAvailable\":3465860230.81717,\"moneyMax\":6441563854.6875,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":831,\"serverGrowth\":71}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"microdyne\",\"httpPortOpen\":true,\"ip\":\"41.2.9.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"microdyne\",13],\"dataMap\":{\"microdyne\":[5354501203.125,13,988,91]},\"filename\":\"/scripts/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3095426.9886818705,\"onlineMoneyMade\":5354501203.125,\"onlineRunningTime\":16.809999999999974,\"pid\":717,\"ramUsage\":2.4,\"server\":\"microdyne\",\"threads\":13,\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///9be2259e-2fa6-4030-86a2-f69e2b4752e7\",\"moduleSequenceNumber\":108311}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/* A simple lightweight script that is deployed\\n * to remote and local servers to repeatedly hack\\n * a particular server.\\n * The smaller this is, the more threads can be deployed.\\n * args[0] - server name\\n * args[1] - threads to attack with\\n */\\nexport async function main(ns, args) {\\n    await hackServer(ns, ns.args[0], ns.args[1]);\\n}\\n\\nasync function hackServer(ns, server, threads) {\\n    ns.disableLog('getServerSecurityLevel');\\n    let serverSecurityThreshold = ns.getServerMinSecurityLevel(server) + 2;\\n    let serverMoneyThreshold = ns.getServerMaxMoney(server) * 0.95;\\n    let opts = { threads: threads, stock: true };\\n    while (true) {\\n        if (ns.getServerSecurityLevel(server) > serverSecurityThreshold) {\\n            await ns.weaken(server, opts);\\n        } else if (ns.getServerMoneyAvailable(server) < serverMoneyThreshold) {\\n            await ns.grow(server, opts);\\n        } else {\\n            await ns.hack(server, opts);\\n        }\\n    }\\n}\\n\\nexport function autocomplete(data, args) {\\n    return [...data.servers];\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///9be2259e-2fa6-4030-86a2-f69e2b4752e7\",\"moduleSequenceNumber\":108311}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"microdyne\",\"moduleSequenceNumber\":108311,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"zb-def\",\"fulcrumtech\",\"stormtech\",\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":225,\"hackDifficulty\":76.40200000002368,\"minDifficulty\":75,\"moneyAvailable\":162852513.21566096,\"moneyMax\":5354501203.125,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":815,\"serverGrowth\":84}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":true,\"ip\":\"22.1.8.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/* A simple lightweight script that is deployed\\n * to remote and local servers to repeatedly hack\\n * a particular server.\\n * The smaller this is, the more threads can be deployed.\\n * args[0] - server name\\n * args[1] - threads to attack with\\n */\\nexport async function main(ns, args) {\\n    await hackServer(ns, ns.args[0], ns.args[1]);\\n}\\n\\nasync function hackServer(ns, server, threads) {\\n    ns.disableLog('getServerSecurityLevel');\\n    let serverSecurityThreshold = ns.getServerMinSecurityLevel(server) + 2;\\n    let serverMoneyThreshold = ns.getServerMaxMoney(server) * 0.95;\\n    let opts = { threads: threads, stock: true };\\n    while (true) {\\n        if (ns.getServerSecurityLevel(server) > serverSecurityThreshold) {\\n            await ns.weaken(server, opts);\\n        } else if (ns.getServerMoneyAvailable(server) < serverMoneyThreshold) {\\n            await ns.grow(server, opts);\\n        } else {\\n            await ns.hack(server, opts);\\n        }\\n    }\\n}\\n\\nexport function autocomplete(data, args) {\\n    return [...data.servers];\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":108287,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"univ-energy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":240,\"hackDifficulty\":240,\"minDifficulty\":80,\"moneyAvailable\":648740097.75,\"moneyMax\":7298326099.6875,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":899,\"serverGrowth\":78}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":true,\"ip\":\"66.6.0.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/* A simple lightweight script that is deployed\\n * to remote and local servers to repeatedly hack\\n * a particular server.\\n * The smaller this is, the more threads can be deployed.\\n * args[0] - server name\\n * args[1] - threads to attack with\\n */\\nexport async function main(ns, args) {\\n    await hackServer(ns, ns.args[0], ns.args[1]);\\n}\\n\\nasync function hackServer(ns, server, threads) {\\n    ns.disableLog('getServerSecurityLevel');\\n    let serverSecurityThreshold = ns.getServerMinSecurityLevel(server) + 2;\\n    let serverMoneyThreshold = ns.getServerMaxMoney(server) * 0.95;\\n    let opts = { threads: threads, stock: true };\\n    while (true) {\\n        if (ns.getServerSecurityLevel(server) > serverSecurityThreshold) {\\n            await ns.weaken(server, opts);\\n        } else if (ns.getServerMoneyAvailable(server) < serverMoneyThreshold) {\\n            await ns.grow(server, opts);\\n        } else {\\n            await ns.hack(server, opts);\\n        }\\n    }\\n}\\n\\nexport function autocomplete(data, args) {\\n    return [...data.servers];\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":108280,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"aevum-police\",\"deltaone\",\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":165,\"hackDifficulty\":165,\"minDifficulty\":55,\"moneyAvailable\":579145567.5,\"moneyMax\":6515387634.375,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":860,\"serverGrowth\":79}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aerocorp\",\"httpPortOpen\":true,\"ip\":\"49.2.8.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/* A simple lightweight script that is deployed\\n * to remote and local servers to repeatedly hack\\n * a particular server.\\n * The smaller this is, the more threads can be deployed.\\n * args[0] - server name\\n * args[1] - threads to attack with\\n */\\nexport async function main(ns, args) {\\n    await hackServer(ns, ns.args[0], ns.args[1]);\\n}\\n\\nasync function hackServer(ns, server, threads) {\\n    ns.disableLog('getServerSecurityLevel');\\n    let serverSecurityThreshold = ns.getServerMinSecurityLevel(server) + 2;\\n    let serverMoneyThreshold = ns.getServerMaxMoney(server) * 0.95;\\n    let opts = { threads: threads, stock: true };\\n    while (true) {\\n        if (ns.getServerSecurityLevel(server) > serverSecurityThreshold) {\\n            await ns.weaken(server, opts);\\n        } else if (ns.getServerMoneyAvailable(server) < serverMoneyThreshold) {\\n            await ns.grow(server, opts);\\n        } else {\\n            await ns.hack(server, opts);\\n        }\\n    }\\n}\\n\\nexport function autocomplete(data, args) {\\n    return [...data.servers];\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"aerocorp\",\"moduleSequenceNumber\":108370,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":261,\"hackDifficulty\":261,\"minDifficulty\":87,\"moneyAvailable\":886114928.25,\"moneyMax\":9968792942.8125,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":886,\"serverGrowth\":55}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnia\",\"httpPortOpen\":true,\"ip\":\"89.4.6.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnia\",13],\"dataMap\":{\"omnia\":[73287742411,260,728,52]},\"filename\":\"/scripts/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3550194.2753898823,\"onlineMoneyMade\":73287742411,\"onlineRunningTime\":16.809999999999974,\"pid\":725,\"ramUsage\":2.4,\"server\":\"omnia\",\"threads\":13,\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///90ac93a3-afd2-4be0-a7ce-ae0ff8bf50da\",\"moduleSequenceNumber\":108359}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/* A simple lightweight script that is deployed\\n * to remote and local servers to repeatedly hack\\n * a particular server.\\n * The smaller this is, the more threads can be deployed.\\n * args[0] - server name\\n * args[1] - threads to attack with\\n */\\nexport async function main(ns, args) {\\n    await hackServer(ns, ns.args[0], ns.args[1]);\\n}\\n\\nasync function hackServer(ns, server, threads) {\\n    ns.disableLog('getServerSecurityLevel');\\n    let serverSecurityThreshold = ns.getServerMinSecurityLevel(server) + 2;\\n    let serverMoneyThreshold = ns.getServerMaxMoney(server) * 0.95;\\n    let opts = { threads: threads, stock: true };\\n    while (true) {\\n        if (ns.getServerSecurityLevel(server) > serverSecurityThreshold) {\\n            await ns.weaken(server, opts);\\n        } else if (ns.getServerMoneyAvailable(server) < serverMoneyThreshold) {\\n            await ns.grow(server, opts);\\n        } else {\\n            await ns.hack(server, opts);\\n        }\\n    }\\n}\\n\\nexport function autocomplete(data, args) {\\n    return [...data.servers];\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///90ac93a3-afd2-4be0-a7ce-ae0ff8bf50da\",\"moduleSequenceNumber\":108359}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"omnia\",\"moduleSequenceNumber\":108359,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"global-pharm\",\"solaris\",\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":273,\"hackDifficulty\":92.99200000001085,\"minDifficulty\":91,\"moneyAvailable\":4290818112.75,\"moneyMax\":7849420458.75,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":867,\"serverGrowth\":68}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-def\",\"httpPortOpen\":true,\"ip\":\"56.2.4.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/* A simple lightweight script that is deployed\\n * to remote and local servers to repeatedly hack\\n * a particular server.\\n * The smaller this is, the more threads can be deployed.\\n * args[0] - server name\\n * args[1] - threads to attack with\\n */\\nexport async function main(ns, args) {\\n    await hackServer(ns, ns.args[0], ns.args[1]);\\n}\\n\\nasync function hackServer(ns, server, threads) {\\n    ns.disableLog('getServerSecurityLevel');\\n    let serverSecurityThreshold = ns.getServerMinSecurityLevel(server) + 2;\\n    let serverMoneyThreshold = ns.getServerMaxMoney(server) * 0.95;\\n    let opts = { threads: threads, stock: true };\\n    while (true) {\\n        if (ns.getServerSecurityLevel(server) > serverSecurityThreshold) {\\n            await ns.weaken(server, opts);\\n        } else if (ns.getServerMoneyAvailable(server) < serverMoneyThreshold) {\\n            await ns.grow(server, opts);\\n        } else {\\n            await ns.hack(server, opts);\\n        }\\n    }\\n}\\n\\nexport function autocomplete(data, args) {\\n    return [...data.servers];\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"zb-def\",\"moduleSequenceNumber\":108304,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"icarus\",\"titan-labs\",\"microdyne\",\"applied-energetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":177,\"hackDifficulty\":177,\"minDifficulty\":59,\"moneyAvailable\":787289415,\"moneyMax\":8857005918.75,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":780,\"serverGrowth\":65}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"applied-energetics\",\"httpPortOpen\":true,\"ip\":\"14.2.2.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/* A simple lightweight script that is deployed\\n * to remote and local servers to repeatedly hack\\n * a particular server.\\n * The smaller this is, the more threads can be deployed.\\n * args[0] - server name\\n * args[1] - threads to attack with\\n */\\nexport async function main(ns, args) {\\n    await hackServer(ns, ns.args[0], ns.args[1]);\\n}\\n\\nasync function hackServer(ns, server, threads) {\\n    ns.disableLog('getServerSecurityLevel');\\n    let serverSecurityThreshold = ns.getServerMinSecurityLevel(server) + 2;\\n    let serverMoneyThreshold = ns.getServerMaxMoney(server) * 0.95;\\n    let opts = { threads: threads, stock: true };\\n    while (true) {\\n        if (ns.getServerSecurityLevel(server) > serverSecurityThreshold) {\\n            await ns.weaken(server, opts);\\n        } else if (ns.getServerMoneyAvailable(server) < serverMoneyThreshold) {\\n            await ns.grow(server, opts);\\n        } else {\\n            await ns.hack(server, opts);\\n        }\\n    }\\n}\\n\\nexport function autocomplete(data, args) {\\n    return [...data.servers];\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":108352,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"zb-def\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":198,\"hackDifficulty\":198,\"minDifficulty\":66,\"moneyAvailable\":655795569.75,\"moneyMax\":7377700159.6875,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":820,\"serverGrowth\":71}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"solaris\",\"httpPortOpen\":true,\"ip\":\"87.2.0.2\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":127.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\",53],\"dataMap\":{\"solaris\":[34216174870.3125,265,3975,424]},\"filename\":\"/scripts/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":14064618.065933272,\"onlineMoneyMade\":34216174870.3125,\"onlineRunningTime\":16.809999999999974,\"pid\":726,\"ramUsage\":2.4,\"server\":\"solaris\",\"threads\":53,\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///bc7bded8-4640-4a4a-8399-614a347fe19f\",\"moduleSequenceNumber\":108362}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/* A simple lightweight script that is deployed\\n * to remote and local servers to repeatedly hack\\n * a particular server.\\n * The smaller this is, the more threads can be deployed.\\n * args[0] - server name\\n * args[1] - threads to attack with\\n */\\nexport async function main(ns, args) {\\n    await hackServer(ns, ns.args[0], ns.args[1]);\\n}\\n\\nasync function hackServer(ns, server, threads) {\\n    ns.disableLog('getServerSecurityLevel');\\n    let serverSecurityThreshold = ns.getServerMinSecurityLevel(server) + 2;\\n    let serverMoneyThreshold = ns.getServerMaxMoney(server) * 0.95;\\n    let opts = { threads: threads, stock: true };\\n    while (true) {\\n        if (ns.getServerSecurityLevel(server) > serverSecurityThreshold) {\\n            await ns.weaken(server, opts);\\n        } else if (ns.getServerMoneyAvailable(server) < serverMoneyThreshold) {\\n            await ns.grow(server, opts);\\n        } else {\\n            await ns.hack(server, opts);\\n        }\\n    }\\n}\\n\\nexport function autocomplete(data, args) {\\n    return [...data.servers];\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///bc7bded8-4640-4a4a-8399-614a347fe19f\",\"moduleSequenceNumber\":108362}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"solaris\",\"moduleSequenceNumber\":108362,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"omnia\",\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":240,\"hackDifficulty\":80.84800000000001,\"minDifficulty\":80,\"moneyAvailable\":3800859487.0650887,\"moneyMax\":6843234974.0625,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":772,\"serverGrowth\":70}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"deltaone\",\"httpPortOpen\":true,\"ip\":\"49.0.6.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/* A simple lightweight script that is deployed\\n * to remote and local servers to repeatedly hack\\n * a particular server.\\n * The smaller this is, the more threads can be deployed.\\n * args[0] - server name\\n * args[1] - threads to attack with\\n */\\nexport async function main(ns, args) {\\n    await hackServer(ns, ns.args[0], ns.args[1]);\\n}\\n\\nasync function hackServer(ns, server, threads) {\\n    ns.disableLog('getServerSecurityLevel');\\n    let serverSecurityThreshold = ns.getServerMinSecurityLevel(server) + 2;\\n    let serverMoneyThreshold = ns.getServerMaxMoney(server) * 0.95;\\n    let opts = { threads: threads, stock: true };\\n    while (true) {\\n        if (ns.getServerSecurityLevel(server) > serverSecurityThreshold) {\\n            await ns.weaken(server, opts);\\n        } else if (ns.getServerMoneyAvailable(server) < serverMoneyThreshold) {\\n            await ns.grow(server, opts);\\n        } else {\\n            await ns.hack(server, opts);\\n        }\\n    }\\n}\\n\\nexport function autocomplete(data, args) {\\n    return [...data.servers];\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"deltaone\",\"moduleSequenceNumber\":108282,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"galactic-cyber\",\"univ-energy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":240,\"hackDifficulty\":240,\"minDifficulty\":80,\"moneyAvailable\":1150198820.25,\"moneyMax\":12939736727.8125,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":878,\"serverGrowth\":69}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"76.3.7.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":62.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",26],\"dataMap\":{\"global-pharm\":[39057918221.25,78,1768,156]},\"filename\":\"/scripts/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6399407.146539729,\"onlineMoneyMade\":39057918221.25,\"onlineRunningTime\":16.809999999999974,\"pid\":724,\"ramUsage\":2.4,\"server\":\"global-pharm\",\"threads\":26,\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///e00b14b9-5f22-469a-b6c8-2fed74c9fe3b\",\"moduleSequenceNumber\":108356}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/* A simple lightweight script that is deployed\\n * to remote and local servers to repeatedly hack\\n * a particular server.\\n * The smaller this is, the more threads can be deployed.\\n * args[0] - server name\\n * args[1] - threads to attack with\\n */\\nexport async function main(ns, args) {\\n    await hackServer(ns, ns.args[0], ns.args[1]);\\n}\\n\\nasync function hackServer(ns, server, threads) {\\n    ns.disableLog('getServerSecurityLevel');\\n    let serverSecurityThreshold = ns.getServerMinSecurityLevel(server) + 2;\\n    let serverMoneyThreshold = ns.getServerMaxMoney(server) * 0.95;\\n    let opts = { threads: threads, stock: true };\\n    while (true) {\\n        if (ns.getServerSecurityLevel(server) > serverSecurityThreshold) {\\n            await ns.weaken(server, opts);\\n        } else if (ns.getServerMoneyAvailable(server) < serverMoneyThreshold) {\\n            await ns.grow(server, opts);\\n        } else {\\n            await ns.hack(server, opts);\\n        }\\n    }\\n}\\n\\nexport function autocomplete(data, args) {\\n    return [...data.servers];\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///e00b14b9-5f22-469a-b6c8-2fed74c9fe3b\",\"moduleSequenceNumber\":108356}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"global-pharm\",\"moduleSequenceNumber\":108356,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"aevum-police\",\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":255,\"hackDifficulty\":85.99199999999838,\"minDifficulty\":85,\"moneyAvailable\":5178976.716927613,\"moneyMax\":13019306073.75,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":841,\"serverGrowth\":86}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nova-med\",\"httpPortOpen\":true,\"ip\":\"47.5.8.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/* A simple lightweight script that is deployed\\n * to remote and local servers to repeatedly hack\\n * a particular server.\\n * The smaller this is, the more threads can be deployed.\\n * args[0] - server name\\n * args[1] - threads to attack with\\n */\\nexport async function main(ns, args) {\\n    await hackServer(ns, ns.args[0], ns.args[1]);\\n}\\n\\nasync function hackServer(ns, server, threads) {\\n    ns.disableLog('getServerSecurityLevel');\\n    let serverSecurityThreshold = ns.getServerMinSecurityLevel(server) + 2;\\n    let serverMoneyThreshold = ns.getServerMaxMoney(server) * 0.95;\\n    let opts = { threads: threads, stock: true };\\n    while (true) {\\n        if (ns.getServerSecurityLevel(server) > serverSecurityThreshold) {\\n            await ns.weaken(server, opts);\\n        } else if (ns.getServerMoneyAvailable(server) < serverMoneyThreshold) {\\n            await ns.grow(server, opts);\\n        } else {\\n            await ns.hack(server, opts);\\n        }\\n    }\\n}\\n\\nexport function autocomplete(data, args) {\\n    return [...data.servers];\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"nova-med\",\"moduleSequenceNumber\":108363,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"solaris\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":213,\"hackDifficulty\":213,\"minDifficulty\":71,\"moneyAvailable\":851814453.75,\"moneyMax\":9582912604.6875,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":786,\"serverGrowth\":65}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zeus-med\",\"httpPortOpen\":true,\"ip\":\"9.7.9.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/* A simple lightweight script that is deployed\\n * to remote and local servers to repeatedly hack\\n * a particular server.\\n * The smaller this is, the more threads can be deployed.\\n * args[0] - server name\\n * args[1] - threads to attack with\\n */\\nexport async function main(ns, args) {\\n    await hackServer(ns, ns.args[0], ns.args[1]);\\n}\\n\\nasync function hackServer(ns, server, threads) {\\n    ns.disableLog('getServerSecurityLevel');\\n    let serverSecurityThreshold = ns.getServerMinSecurityLevel(server) + 2;\\n    let serverMoneyThreshold = ns.getServerMaxMoney(server) * 0.95;\\n    let opts = { threads: threads, stock: true };\\n    while (true) {\\n        if (ns.getServerSecurityLevel(server) > serverSecurityThreshold) {\\n            await ns.weaken(server, opts);\\n        } else if (ns.getServerMoneyAvailable(server) < serverMoneyThreshold) {\\n            await ns.grow(server, opts);\\n        } else {\\n            await ns.hack(server, opts);\\n        }\\n    }\\n}\\n\\nexport function autocomplete(data, args) {\\n    return [...data.servers];\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"zeus-med\",\"moduleSequenceNumber\":108365,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":213,\"hackDifficulty\":213,\"minDifficulty\":71,\"moneyAvailable\":1009069296,\"moneyMax\":11352029580,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":818,\"serverGrowth\":79}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"unitalife\",\"httpPortOpen\":true,\"ip\":\"48.5.0.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":62.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\",26],\"dataMap\":{\"unitalife\":[26661016476.5625,78,1976,182]},\"filename\":\"/scripts/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6338250.156189635,\"onlineMoneyMade\":26661016476.5625,\"onlineRunningTime\":16.809999999999974,\"pid\":713,\"ramUsage\":2.4,\"server\":\"unitalife\",\"threads\":26,\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///c050b6b3-251a-4b70-a490-fcfdc66b0d7d\",\"moduleSequenceNumber\":108291}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/* A simple lightweight script that is deployed\\n * to remote and local servers to repeatedly hack\\n * a particular server.\\n * The smaller this is, the more threads can be deployed.\\n * args[0] - server name\\n * args[1] - threads to attack with\\n */\\nexport async function main(ns, args) {\\n    await hackServer(ns, ns.args[0], ns.args[1]);\\n}\\n\\nasync function hackServer(ns, server, threads) {\\n    ns.disableLog('getServerSecurityLevel');\\n    let serverSecurityThreshold = ns.getServerMinSecurityLevel(server) + 2;\\n    let serverMoneyThreshold = ns.getServerMaxMoney(server) * 0.95;\\n    let opts = { threads: threads, stock: true };\\n    while (true) {\\n        if (ns.getServerSecurityLevel(server) > serverSecurityThreshold) {\\n            await ns.weaken(server, opts);\\n        } else if (ns.getServerMoneyAvailable(server) < serverMoneyThreshold) {\\n            await ns.grow(server, opts);\\n        } else {\\n            await ns.hack(server, opts);\\n        }\\n    }\\n}\\n\\nexport function autocomplete(data, args) {\\n    return [...data.servers];\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///c050b6b3-251a-4b70-a490-fcfdc66b0d7d\",\"moduleSequenceNumber\":108291}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"unitalife\",\"moduleSequenceNumber\":108291,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"galactic-cyber\",\"defcomm\",\"icarus\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":225,\"hackDifficulty\":75.74999999999848,\"minDifficulty\":75,\"moneyAvailable\":1108843927.1741698,\"moneyMax\":8887005492.1875,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":799,\"serverGrowth\":76}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"72.8.2.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":62.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\",26],\"dataMap\":{\"lexo-corp\":[20178170769.375,78,2444,182]},\"filename\":\"/scripts/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7860578.907336218,\"onlineMoneyMade\":20178170769.375,\"onlineRunningTime\":16.809999999999974,\"pid\":708,\"ramUsage\":2.4,\"server\":\"lexo-corp\",\"threads\":26,\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///682164e6-f7f5-46e5-bf47-654be7f1c68c\",\"moduleSequenceNumber\":108268}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/* A simple lightweight script that is deployed\\n * to remote and local servers to repeatedly hack\\n * a particular server.\\n * The smaller this is, the more threads can be deployed.\\n * args[0] - server name\\n * args[1] - threads to attack with\\n */\\nexport async function main(ns, args) {\\n    await hackServer(ns, ns.args[0], ns.args[1]);\\n}\\n\\nasync function hackServer(ns, server, threads) {\\n    ns.disableLog('getServerSecurityLevel');\\n    let serverSecurityThreshold = ns.getServerMinSecurityLevel(server) + 2;\\n    let serverMoneyThreshold = ns.getServerMaxMoney(server) * 0.95;\\n    let opts = { threads: threads, stock: true };\\n    while (true) {\\n        if (ns.getServerSecurityLevel(server) > serverSecurityThreshold) {\\n            await ns.weaken(server, opts);\\n        } else if (ns.getServerMoneyAvailable(server) < serverMoneyThreshold) {\\n            await ns.grow(server, opts);\\n        } else {\\n            await ns.hack(server, opts);\\n        }\\n    }\\n}\\n\\nexport function autocomplete(data, args) {\\n    return [...data.servers];\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///682164e6-f7f5-46e5-bf47-654be7f1c68c\",\"moduleSequenceNumber\":108268}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":108268,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"syscore\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":231,\"hackDifficulty\":79.003999999997,\"minDifficulty\":77,\"moneyAvailable\":11939.343683651541,\"moneyMax\":6726056923.125,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":658,\"serverGrowth\":60}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":true,\"ip\":\"92.7.8.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":62.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",26],\"dataMap\":{\"rho-construction\":[28675210950,156,4368,338]},\"filename\":\"/scripts/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":9911366.374910636,\"onlineMoneyMade\":28675210950,\"onlineRunningTime\":16.809999999999974,\"pid\":733,\"ramUsage\":2.4,\"server\":\"rho-construction\",\"threads\":26,\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///2b979d8d-4905-45ac-9cdf-3f60886f06fc\",\"moduleSequenceNumber\":108378}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/* A simple lightweight script that is deployed\\n * to remote and local servers to repeatedly hack\\n * a particular server.\\n * The smaller this is, the more threads can be deployed.\\n * args[0] - server name\\n * args[1] - threads to attack with\\n */\\nexport async function main(ns, args) {\\n    await hackServer(ns, ns.args[0], ns.args[1]);\\n}\\n\\nasync function hackServer(ns, server, threads) {\\n    ns.disableLog('getServerSecurityLevel');\\n    let serverSecurityThreshold = ns.getServerMinSecurityLevel(server) + 2;\\n    let serverMoneyThreshold = ns.getServerMaxMoney(server) * 0.95;\\n    let opts = { threads: threads, stock: true };\\n    while (true) {\\n        if (ns.getServerSecurityLevel(server) > serverSecurityThreshold) {\\n            await ns.weaken(server, opts);\\n        } else if (ns.getServerMoneyAvailable(server) < serverMoneyThreshold) {\\n            await ns.grow(server, opts);\\n        } else {\\n            await ns.hack(server, opts);\\n        }\\n    }\\n}\\n\\nexport function autocomplete(data, args) {\\n    return [...data.servers];\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///2b979d8d-4905-45ac-9cdf-3f60886f06fc\",\"moduleSequenceNumber\":108378}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"rho-construction\",\"moduleSequenceNumber\":108378,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"zb-institute\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":159,\"hackDifficulty\":54.12799999999451,\"minDifficulty\":53,\"moneyAvailable\":13888.200165510505,\"moneyMax\":4779201825,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":498,\"serverGrowth\":49}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"73.7.9.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\",13],\"dataMap\":{\"alpha-ent\":[11664505558.125,26,1560,117]},\"filename\":\"/scripts/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4519274.427763026,\"onlineMoneyMade\":11664505558.125,\"onlineRunningTime\":16.809999999999974,\"pid\":709,\"ramUsage\":2.4,\"server\":\"alpha-ent\",\"threads\":13,\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///e3ebe942-8540-4aa6-aeac-d9274074c35c\",\"moduleSequenceNumber\":108272}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/* A simple lightweight script that is deployed\\n * to remote and local servers to repeatedly hack\\n * a particular server.\\n * The smaller this is, the more threads can be deployed.\\n * args[0] - server name\\n * args[1] - threads to attack with\\n */\\nexport async function main(ns, args) {\\n    await hackServer(ns, ns.args[0], ns.args[1]);\\n}\\n\\nasync function hackServer(ns, server, threads) {\\n    ns.disableLog('getServerSecurityLevel');\\n    let serverSecurityThreshold = ns.getServerMinSecurityLevel(server) + 2;\\n    let serverMoneyThreshold = ns.getServerMaxMoney(server) * 0.95;\\n    let opts = { threads: threads, stock: true };\\n    while (true) {\\n        if (ns.getServerSecurityLevel(server) > serverSecurityThreshold) {\\n            await ns.weaken(server, opts);\\n        } else if (ns.getServerMoneyAvailable(server) < serverMoneyThreshold) {\\n            await ns.grow(server, opts);\\n        } else {\\n            await ns.hack(server, opts);\\n        }\\n    }\\n}\\n\\nexport function autocomplete(data, args) {\\n    return [...data.servers];\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///e3ebe942-8540-4aa6-aeac-d9274074c35c\",\"moduleSequenceNumber\":108272}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":108272,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":210,\"hackDifficulty\":71.97200000003583,\"minDifficulty\":70,\"moneyAvailable\":3537.0084449762335,\"moneyMax\":5832252779.0625,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":564,\"serverGrowth\":52}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"59.5.8.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",13],\"dataMap\":{\"aevum-police\":[3251766000.9375,13,2015,156]},\"filename\":\"/scripts/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5795702.795980598,\"onlineMoneyMade\":3251766000.9375,\"onlineRunningTime\":16.809999999999974,\"pid\":711,\"ramUsage\":2.4,\"server\":\"aevum-police\",\"threads\":13,\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///b6a692e7-6b79-44b1-aeaf-7022f145bc44\",\"moduleSequenceNumber\":108279}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/* A simple lightweight script that is deployed\\n * to remote and local servers to repeatedly hack\\n * a particular server.\\n * The smaller this is, the more threads can be deployed.\\n * args[0] - server name\\n * args[1] - threads to attack with\\n */\\nexport async function main(ns, args) {\\n    await hackServer(ns, ns.args[0], ns.args[1]);\\n}\\n\\nasync function hackServer(ns, server, threads) {\\n    ns.disableLog('getServerSecurityLevel');\\n    let serverSecurityThreshold = ns.getServerMinSecurityLevel(server) + 2;\\n    let serverMoneyThreshold = ns.getServerMaxMoney(server) * 0.95;\\n    let opts = { threads: threads, stock: true };\\n    while (true) {\\n        if (ns.getServerSecurityLevel(server) > serverSecurityThreshold) {\\n            await ns.weaken(server, opts);\\n        } else if (ns.getServerMoneyAvailable(server) < serverMoneyThreshold) {\\n            await ns.grow(server, opts);\\n        } else {\\n            await ns.hack(server, opts);\\n        }\\n    }\\n}\\n\\nexport function autocomplete(data, args) {\\n    return [...data.servers];\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///b6a692e7-6b79-44b1-aeaf-7022f145bc44\",\"moduleSequenceNumber\":108279}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"aevum-police\",\"moduleSequenceNumber\":108279,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"catalyst\",\"galactic-cyber\",\"global-pharm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":210,\"hackDifficulty\":72.01000000004935,\"minDifficulty\":70,\"moneyAvailable\":2535580083.0671206,\"moneyMax\":3251766000.9375,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":410,\"serverGrowth\":30}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":true,\"ip\":\"87.9.2.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\",6],\"dataMap\":{\"rothman-uni\":[2985694702.3442073,12,1320,108]},\"filename\":\"/scripts/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2883380.0706008305,\"onlineMoneyMade\":2985694702.3442073,\"onlineRunningTime\":16.809999999999974,\"pid\":744,\"ramUsage\":2.4,\"server\":\"rothman-uni\",\"threads\":6,\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///9c599b95-a694-48f2-a09c-7d3e4f7e3eef\",\"moduleSequenceNumber\":108404}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/* A simple lightweight script that is deployed\\n * to remote and local servers to repeatedly hack\\n * a particular server.\\n * The smaller this is, the more threads can be deployed.\\n * args[0] - server name\\n * args[1] - threads to attack with\\n */\\nexport async function main(ns, args) {\\n    await hackServer(ns, ns.args[0], ns.args[1]);\\n}\\n\\nasync function hackServer(ns, server, threads) {\\n    ns.disableLog('getServerSecurityLevel');\\n    let serverSecurityThreshold = ns.getServerMinSecurityLevel(server) + 2;\\n    let serverMoneyThreshold = ns.getServerMaxMoney(server) * 0.95;\\n    let opts = { threads: threads, stock: true };\\n    while (true) {\\n        if (ns.getServerSecurityLevel(server) > serverSecurityThreshold) {\\n            await ns.weaken(server, opts);\\n        } else if (ns.getServerMoneyAvailable(server) < serverMoneyThreshold) {\\n            await ns.grow(server, opts);\\n        } else {\\n            await ns.hack(server, opts);\\n        }\\n    }\\n}\\n\\nexport function autocomplete(data, args) {\\n    return [...data.servers];\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///9c599b95-a694-48f2-a09c-7d3e4f7e3eef\",\"moduleSequenceNumber\":108404}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":108404,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"netlink\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":156,\"hackDifficulty\":53.72800000001258,\"minDifficulty\":52,\"moneyAvailable\":699.807958711286,\"moneyMax\":1501683713.4375,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":383,\"serverGrowth\":39}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-institute\",\"httpPortOpen\":true,\"ip\":\"87.8.0.6\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":127.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\",53],\"dataMap\":{\"zb-institute\":[63353375859.375,371,4240,424]},\"filename\":\"/scripts/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":14454687.279863726,\"onlineMoneyMade\":63353375859.375,\"onlineRunningTime\":16.809999999999974,\"pid\":732,\"ramUsage\":2.4,\"server\":\"zb-institute\",\"threads\":53,\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///a43d9949-ea1e-4a05-99e2-d65243a101a5\",\"moduleSequenceNumber\":108376}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/* A simple lightweight script that is deployed\\n * to remote and local servers to repeatedly hack\\n * a particular server.\\n * The smaller this is, the more threads can be deployed.\\n * args[0] - server name\\n * args[1] - threads to attack with\\n */\\nexport async function main(ns, args) {\\n    await hackServer(ns, ns.args[0], ns.args[1]);\\n}\\n\\nasync function hackServer(ns, server, threads) {\\n    ns.disableLog('getServerSecurityLevel');\\n    let serverSecurityThreshold = ns.getServerMinSecurityLevel(server) + 2;\\n    let serverMoneyThreshold = ns.getServerMaxMoney(server) * 0.95;\\n    let opts = { threads: threads, stock: true };\\n    while (true) {\\n        if (ns.getServerSecurityLevel(server) > serverSecurityThreshold) {\\n            await ns.weaken(server, opts);\\n        } else if (ns.getServerMoneyAvailable(server) < serverMoneyThreshold) {\\n            await ns.grow(server, opts);\\n        } else {\\n            await ns.hack(server, opts);\\n        }\\n    }\\n}\\n\\nexport function autocomplete(data, args) {\\n    return [...data.servers];\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///a43d9949-ea1e-4a05-99e2-d65243a101a5\",\"moduleSequenceNumber\":108376}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"zb-institute\",\"moduleSequenceNumber\":108376,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"computek\",\"rho-construction\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":228,\"hackDifficulty\":77.16600000000001,\"minDifficulty\":76,\"moneyAvailable\":47913.23171108614,\"moneyMax\":9050482265.625,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":738,\"serverGrowth\":80}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":true,\"ip\":\"99.5.5.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":62.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\",26],\"dataMap\":{\"summit-uni\":[19975582285.3125,182,4316,338]},\"filename\":\"/scripts/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":11258353.913197294,\"onlineMoneyMade\":19975582285.3125,\"onlineRunningTime\":16.809999999999974,\"pid\":734,\"ramUsage\":2.4,\"server\":\"summit-uni\",\"threads\":26,\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///4212ad41-f07b-4ec5-97ff-aaf5254e1cd3\",\"moduleSequenceNumber\":108381}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/* A simple lightweight script that is deployed\\n * to remote and local servers to repeatedly hack\\n * a particular server.\\n * The smaller this is, the more threads can be deployed.\\n * args[0] - server name\\n * args[1] - threads to attack with\\n */\\nexport async function main(ns, args) {\\n    await hackServer(ns, ns.args[0], ns.args[1]);\\n}\\n\\nasync function hackServer(ns, server, threads) {\\n    ns.disableLog('getServerSecurityLevel');\\n    let serverSecurityThreshold = ns.getServerMinSecurityLevel(server) + 2;\\n    let serverMoneyThreshold = ns.getServerMaxMoney(server) * 0.95;\\n    let opts = { threads: threads, stock: true };\\n    while (true) {\\n        if (ns.getServerSecurityLevel(server) > serverSecurityThreshold) {\\n            await ns.weaken(server, opts);\\n        } else if (ns.getServerMoneyAvailable(server) < serverMoneyThreshold) {\\n            await ns.grow(server, opts);\\n        } else {\\n            await ns.hack(server, opts);\\n        }\\n    }\\n}\\n\\nexport function autocomplete(data, args) {\\n    return [...data.servers];\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///4212ad41-f07b-4ec5-97ff-aaf5254e1cd3\",\"moduleSequenceNumber\":108381}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"summit-uni\",\"moduleSequenceNumber\":108381,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"computek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":183,\"hackDifficulty\":62.7959999999967,\"minDifficulty\":61,\"moneyAvailable\":375.1104589167237,\"moneyMax\":2853654612.1875,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":439,\"serverGrowth\":57}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"syscore\",\"httpPortOpen\":true,\"ip\":\"19.3.8.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/* A simple lightweight script that is deployed\\n * to remote and local servers to repeatedly hack\\n * a particular server.\\n * The smaller this is, the more threads can be deployed.\\n * args[0] - server name\\n * args[1] - threads to attack with\\n */\\nexport async function main(ns, args) {\\n    await hackServer(ns, ns.args[0], ns.args[1]);\\n}\\n\\nasync function hackServer(ns, server, threads) {\\n    ns.disableLog('getServerSecurityLevel');\\n    let serverSecurityThreshold = ns.getServerMinSecurityLevel(server) + 2;\\n    let serverMoneyThreshold = ns.getServerMaxMoney(server) * 0.95;\\n    let opts = { threads: threads, stock: true };\\n    while (true) {\\n        if (ns.getServerSecurityLevel(server) > serverSecurityThreshold) {\\n            await ns.weaken(server, opts);\\n        } else if (ns.getServerMoneyAvailable(server) < serverMoneyThreshold) {\\n            await ns.grow(server, opts);\\n        } else {\\n            await ns.hack(server, opts);\\n        }\\n    }\\n}\\n\\nexport function autocomplete(data, args) {\\n    return [...data.servers];\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"syscore\",\"moduleSequenceNumber\":108264,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"johnson-ortho\",\"lexo-corp\",\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":207,\"hackDifficulty\":207,\"minDifficulty\":69,\"moneyAvailable\":404779698,\"moneyMax\":4553771602.5,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":603,\"serverGrowth\":69}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":true,\"ip\":\"15.9.2.3\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":127.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",53],\"dataMap\":{\"catalyst\":[40387425609.375,530,7897,742]},\"filename\":\"/scripts/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":23336487.716293193,\"onlineMoneyMade\":40387425609.375,\"onlineRunningTime\":16.809999999999974,\"pid\":710,\"ramUsage\":2.4,\"server\":\"catalyst\",\"threads\":53,\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///fabc0605-000f-4a5f-aaa5-ce8e2a8a2792\",\"moduleSequenceNumber\":108276}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/* A simple lightweight script that is deployed\\n * to remote and local servers to repeatedly hack\\n * a particular server.\\n * The smaller this is, the more threads can be deployed.\\n * args[0] - server name\\n * args[1] - threads to attack with\\n */\\nexport async function main(ns, args) {\\n    await hackServer(ns, ns.args[0], ns.args[1]);\\n}\\n\\nasync function hackServer(ns, server, threads) {\\n    ns.disableLog('getServerSecurityLevel');\\n    let serverSecurityThreshold = ns.getServerMinSecurityLevel(server) + 2;\\n    let serverMoneyThreshold = ns.getServerMaxMoney(server) * 0.95;\\n    let opts = { threads: threads, stock: true };\\n    while (true) {\\n        if (ns.getServerSecurityLevel(server) > serverSecurityThreshold) {\\n            await ns.weaken(server, opts);\\n        } else if (ns.getServerMoneyAvailable(server) < serverMoneyThreshold) {\\n            await ns.grow(server, opts);\\n        } else {\\n            await ns.hack(server, opts);\\n        }\\n    }\\n}\\n\\nexport function autocomplete(data, args) {\\n    return [...data.servers];\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///fabc0605-000f-4a5f-aaa5-ce8e2a8a2792\",\"moduleSequenceNumber\":108276}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"catalyst\",\"moduleSequenceNumber\":108276,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"johnson-ortho\",\"aevum-police\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":201,\"hackDifficulty\":68.34600000000002,\"minDifficulty\":67,\"moneyAvailable\":2444.400922521822,\"moneyMax\":4038742560.9375,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":441,\"serverGrowth\":50}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":true,\"ip\":\"31.6.1.7\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":7.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",3],\"dataMap\":{\"the-hub\":[19135495800,45,1119,90]},\"filename\":\"/scripts/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1739507.8606224726,\"onlineMoneyMade\":19135495800,\"onlineRunningTime\":16.809999999999974,\"pid\":741,\"ramUsage\":2.4,\"server\":\"the-hub\",\"threads\":3,\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///8d2681cf-f9b8-4196-b08e-4f894895e264\",\"moduleSequenceNumber\":108393}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/* A simple lightweight script that is deployed\\n * to remote and local servers to repeatedly hack\\n * a particular server.\\n * The smaller this is, the more threads can be deployed.\\n * args[0] - server name\\n * args[1] - threads to attack with\\n */\\nexport async function main(ns, args) {\\n    await hackServer(ns, ns.args[0], ns.args[1]);\\n}\\n\\nasync function hackServer(ns, server, threads) {\\n    ns.disableLog('getServerSecurityLevel');\\n    let serverSecurityThreshold = ns.getServerMinSecurityLevel(server) + 2;\\n    let serverMoneyThreshold = ns.getServerMaxMoney(server) * 0.95;\\n    let opts = { threads: threads, stock: true };\\n    while (true) {\\n        if (ns.getServerSecurityLevel(server) > serverSecurityThreshold) {\\n            await ns.weaken(server, opts);\\n        } else if (ns.getServerMoneyAvailable(server) < serverMoneyThreshold) {\\n            await ns.grow(server, opts);\\n        } else {\\n            await ns.hack(server, opts);\\n        }\\n    }\\n}\\n\\nexport function autocomplete(data, args) {\\n    return [...data.servers];\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///8d2681cf-f9b8-4196-b08e-4f894895e264\",\"moduleSequenceNumber\":108393}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"the-hub\",\"moduleSequenceNumber\":108393,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"silver-helix\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":105,\"hackDifficulty\":37.000000000009486,\"minDifficulty\":35,\"moneyAvailable\":1013893558.3938733,\"moneyMax\":1373314035.9375,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":308,\"serverGrowth\":50}},\"computek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"computek\",\"httpPortOpen\":true,\"ip\":\"77.8.8.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/* A simple lightweight script that is deployed\\n * to remote and local servers to repeatedly hack\\n * a particular server.\\n * The smaller this is, the more threads can be deployed.\\n * args[0] - server name\\n * args[1] - threads to attack with\\n */\\nexport async function main(ns, args) {\\n    await hackServer(ns, ns.args[0], ns.args[1]);\\n}\\n\\nasync function hackServer(ns, server, threads) {\\n    ns.disableLog('getServerSecurityLevel');\\n    let serverSecurityThreshold = ns.getServerMinSecurityLevel(server) + 2;\\n    let serverMoneyThreshold = ns.getServerMaxMoney(server) * 0.95;\\n    let opts = { threads: threads, stock: true };\\n    while (true) {\\n        if (ns.getServerSecurityLevel(server) > serverSecurityThreshold) {\\n            await ns.weaken(server, opts);\\n        } else if (ns.getServerMoneyAvailable(server) < serverMoneyThreshold) {\\n            await ns.grow(server, opts);\\n        } else {\\n            await ns.hack(server, opts);\\n        }\\n    }\\n}\\n\\nexport function autocomplete(data, args) {\\n    return [...data.servers];\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"computek\",\"moduleSequenceNumber\":108372,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"neo-net\",\"zb-institute\",\"summit-uni\",\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":171,\"hackDifficulty\":171,\"minDifficulty\":57,\"moneyAvailable\":169567019.25,\"moneyMax\":1907628966.5625,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":373,\"serverGrowth\":61}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":true,\"ip\":\"33.9.6.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\",6],\"dataMap\":{\"netlink\":[27632253444,90,906,72]},\"filename\":\"/scripts/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2872813.4916599346,\"onlineMoneyMade\":27632253444,\"onlineRunningTime\":16.809999999999974,\"pid\":743,\"ramUsage\":2.4,\"server\":\"netlink\",\"threads\":6,\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///7732d10b-d824-4ed1-b0cb-b44afdd57372\",\"moduleSequenceNumber\":108402}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/* A simple lightweight script that is deployed\\n * to remote and local servers to repeatedly hack\\n * a particular server.\\n * The smaller this is, the more threads can be deployed.\\n * args[0] - server name\\n * args[1] - threads to attack with\\n */\\nexport async function main(ns, args) {\\n    await hackServer(ns, ns.args[0], ns.args[1]);\\n}\\n\\nasync function hackServer(ns, server, threads) {\\n    ns.disableLog('getServerSecurityLevel');\\n    let serverSecurityThreshold = ns.getServerMinSecurityLevel(server) + 2;\\n    let serverMoneyThreshold = ns.getServerMaxMoney(server) * 0.95;\\n    let opts = { threads: threads, stock: true };\\n    while (true) {\\n        if (ns.getServerSecurityLevel(server) > serverSecurityThreshold) {\\n            await ns.weaken(server, opts);\\n        } else if (ns.getServerMoneyAvailable(server) < serverMoneyThreshold) {\\n            await ns.grow(server, opts);\\n        } else {\\n            await ns.hack(server, opts);\\n        }\\n    }\\n}\\n\\nexport function autocomplete(data, args) {\\n    return [...data.servers];\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///7732d10b-d824-4ed1-b0cb-b44afdd57372\",\"moduleSequenceNumber\":108402}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"netlink\",\"moduleSequenceNumber\":108402,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"omega-net\",\"rothman-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":213,\"hackDifficulty\":73.0200000000093,\"minDifficulty\":71,\"moneyAvailable\":1582924394.862758,\"moneyMax\":2320312500,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":403,\"serverGrowth\":68}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":true,\"ip\":\"79.1.0.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/* A simple lightweight script that is deployed\\n * to remote and local servers to repeatedly hack\\n * a particular server.\\n * The smaller this is, the more threads can be deployed.\\n * args[0] - server name\\n * args[1] - threads to attack with\\n */\\nexport async function main(ns, args) {\\n    await hackServer(ns, ns.args[0], ns.args[1]);\\n}\\n\\nasync function hackServer(ns, server, threads) {\\n    ns.disableLog('getServerSecurityLevel');\\n    let serverSecurityThreshold = ns.getServerMinSecurityLevel(server) + 2;\\n    let serverMoneyThreshold = ns.getServerMaxMoney(server) * 0.95;\\n    let opts = { threads: threads, stock: true };\\n    while (true) {\\n        if (ns.getServerSecurityLevel(server) > serverSecurityThreshold) {\\n            await ns.weaken(server, opts);\\n        } else if (ns.getServerMoneyAvailable(server) < serverMoneyThreshold) {\\n            await ns.grow(server, opts);\\n        } else {\\n            await ns.hack(server, opts);\\n        }\\n    }\\n}\\n\\nexport function autocomplete(data, args) {\\n    return [...data.servers];\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":108262,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"phantasy\",\"syscore\",\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":177,\"hackDifficulty\":177,\"minDifficulty\":59,\"moneyAvailable\":54401715,\"moneyMax\":612019293.75,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":267,\"serverGrowth\":47}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"16.9.3.2\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":2.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",1],\"dataMap\":{\"n00dles\":[351264606,1220,1220,147]},\"filename\":\"/scripts/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":405668.3145253498,\"onlineMoneyMade\":351264606,\"onlineRunningTime\":16.809999999999974,\"pid\":705,\"ramUsage\":2.4,\"server\":\"n00dles\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///aacf47cf-27d9-4c4c-bac7-0385059dd388\",\"moduleSequenceNumber\":108162}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/* A simple lightweight script that is deployed\\n * to remote and local servers to repeatedly hack\\n * a particular server.\\n * The smaller this is, the more threads can be deployed.\\n * args[0] - server name\\n * args[1] - threads to attack with\\n */\\nexport async function main(ns, args) {\\n    await hackServer(ns, ns.args[0], ns.args[1]);\\n}\\n\\nasync function hackServer(ns, server, threads) {\\n    ns.disableLog('getServerSecurityLevel');\\n    let serverSecurityThreshold = ns.getServerMinSecurityLevel(server) + 2;\\n    let serverMoneyThreshold = ns.getServerMaxMoney(server) * 0.95;\\n    let opts = { threads: threads, stock: true };\\n    while (true) {\\n        if (ns.getServerSecurityLevel(server) > serverSecurityThreshold) {\\n            await ns.weaken(server, opts);\\n        } else if (ns.getServerMoneyAvailable(server) < serverMoneyThreshold) {\\n            await ns.grow(server, opts);\\n        } else {\\n            await ns.hack(server, opts);\\n        }\\n    }\\n}\\n\\nexport function autocomplete(data, args) {\\n    return [...data.servers];\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///aacf47cf-27d9-4c4c-bac7-0385059dd388\",\"moduleSequenceNumber\":108162}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"n00dles\",\"moduleSequenceNumber\":108162,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":3,\"hackDifficulty\":2.9639999999857127,\"minDifficulty\":1,\"moneyAvailable\":302662,\"moneyMax\":590625,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"12.2.3.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",6],\"dataMap\":{\"foodnstuff\":[231689271.29244837,84,14292,1146]},\"filename\":\"/scripts/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7489261.191237049,\"onlineMoneyMade\":231689271.29244837,\"onlineRunningTime\":16.809999999999974,\"pid\":728,\"ramUsage\":2.4,\"server\":\"foodnstuff\",\"threads\":6,\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///c585872c-bd0c-4ecc-b28a-8bba0384feea\",\"moduleSequenceNumber\":108165}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/* A simple lightweight script that is deployed\\n * to remote and local servers to repeatedly hack\\n * a particular server.\\n * The smaller this is, the more threads can be deployed.\\n * args[0] - server name\\n * args[1] - threads to attack with\\n */\\nexport async function main(ns, args) {\\n    await hackServer(ns, ns.args[0], ns.args[1]);\\n}\\n\\nasync function hackServer(ns, server, threads) {\\n    ns.disableLog('getServerSecurityLevel');\\n    let serverSecurityThreshold = ns.getServerMinSecurityLevel(server) + 2;\\n    let serverMoneyThreshold = ns.getServerMaxMoney(server) * 0.95;\\n    let opts = { threads: threads, stock: true };\\n    while (true) {\\n        if (ns.getServerSecurityLevel(server) > serverSecurityThreshold) {\\n            await ns.weaken(server, opts);\\n        } else if (ns.getServerMoneyAvailable(server) < serverMoneyThreshold) {\\n            await ns.grow(server, opts);\\n        } else {\\n            await ns.hack(server, opts);\\n        }\\n    }\\n}\\n\\nexport function autocomplete(data, args) {\\n    return [...data.servers];\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///c585872c-bd0c-4ecc-b28a-8bba0384feea\",\"moduleSequenceNumber\":108165}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":108165,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":11.807999999868473,\"minDifficulty\":10,\"moneyAvailable\":557212.8085901566,\"moneyMax\":16875000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"58.5.1.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\",6],\"dataMap\":{\"sigma-cosmetics\":[543375000,168,14220,1134]},\"filename\":\"/scripts/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7489261.191237049,\"onlineMoneyMade\":543375000,\"onlineRunningTime\":16.809999999999974,\"pid\":729,\"ramUsage\":2.4,\"server\":\"sigma-cosmetics\",\"threads\":6,\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///f92d59a6-062e-4591-9964-d091cb02a590\",\"moduleSequenceNumber\":108169}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/* A simple lightweight script that is deployed\\n * to remote and local servers to repeatedly hack\\n * a particular server.\\n * The smaller this is, the more threads can be deployed.\\n * args[0] - server name\\n * args[1] - threads to attack with\\n */\\nexport async function main(ns, args) {\\n    await hackServer(ns, ns.args[0], ns.args[1]);\\n}\\n\\nasync function hackServer(ns, server, threads) {\\n    ns.disableLog('getServerSecurityLevel');\\n    let serverSecurityThreshold = ns.getServerMinSecurityLevel(server) + 2;\\n    let serverMoneyThreshold = ns.getServerMaxMoney(server) * 0.95;\\n    let opts = { threads: threads, stock: true };\\n    while (true) {\\n        if (ns.getServerSecurityLevel(server) > serverSecurityThreshold) {\\n            await ns.weaken(server, opts);\\n        } else if (ns.getServerMoneyAvailable(server) < serverMoneyThreshold) {\\n            await ns.grow(server, opts);\\n        } else {\\n            await ns.hack(server, opts);\\n        }\\n    }\\n}\\n\\nexport function autocomplete(data, args) {\\n    return [...data.servers];\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///f92d59a6-062e-4591-9964-d091cb02a590\",\"moduleSequenceNumber\":108169}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":108169,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":11.915999999871724,\"minDifficulty\":10,\"moneyAvailable\":261.50513229368744,\"moneyMax\":19406250,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"58.9.9.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",6],\"dataMap\":{\"joesguns\":[775468731.3252323,222,14166,1128]},\"filename\":\"/scripts/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":10293752.581990888,\"onlineMoneyMade\":775468731.3252323,\"onlineRunningTime\":16.809999999999974,\"pid\":736,\"ramUsage\":2.4,\"server\":\"joesguns\",\"threads\":6,\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///197f5f51-42a7-47f2-bb53-802d0165dab9\",\"moduleSequenceNumber\":108177}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/* A simple lightweight script that is deployed\\n * to remote and local servers to repeatedly hack\\n * a particular server.\\n * The smaller this is, the more threads can be deployed.\\n * args[0] - server name\\n * args[1] - threads to attack with\\n */\\nexport async function main(ns, args) {\\n    await hackServer(ns, ns.args[0], ns.args[1]);\\n}\\n\\nasync function hackServer(ns, server, threads) {\\n    ns.disableLog('getServerSecurityLevel');\\n    let serverSecurityThreshold = ns.getServerMinSecurityLevel(server) + 2;\\n    let serverMoneyThreshold = ns.getServerMaxMoney(server) * 0.95;\\n    let opts = { threads: threads, stock: true };\\n    while (true) {\\n        if (ns.getServerSecurityLevel(server) > serverSecurityThreshold) {\\n            await ns.weaken(server, opts);\\n        } else if (ns.getServerMoneyAvailable(server) < serverMoneyThreshold) {\\n            await ns.grow(server, opts);\\n        } else {\\n            await ns.hack(server, opts);\\n        }\\n    }\\n}\\n\\nexport function autocomplete(data, args) {\\n    return [...data.servers];\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///197f5f51-42a7-47f2-bb53-802d0165dab9\",\"moduleSequenceNumber\":108177}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"joesguns\",\"moduleSequenceNumber\":108177,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":45,\"hackDifficulty\":16.764000000116223,\"minDifficulty\":15,\"moneyAvailable\":291.73385259402625,\"moneyMax\":21093750,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":true,\"ip\":\"40.4.8.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",13],\"dataMap\":{\"zer0\":[3962556920.0112166,819,21437,1677]},\"filename\":\"/scripts/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":24538442.37331059,\"onlineMoneyMade\":3962556920.0112166,\"onlineRunningTime\":16.809999999999974,\"pid\":737,\"ramUsage\":2.4,\"server\":\"zer0\",\"threads\":13,\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///3d95469f-c756-431f-bc25-8a87e4826fd0\",\"moduleSequenceNumber\":108387}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/* A simple lightweight script that is deployed\\n * to remote and local servers to repeatedly hack\\n * a particular server.\\n * The smaller this is, the more threads can be deployed.\\n * args[0] - server name\\n * args[1] - threads to attack with\\n */\\nexport async function main(ns, args) {\\n    await hackServer(ns, ns.args[0], ns.args[1]);\\n}\\n\\nasync function hackServer(ns, server, threads) {\\n    ns.disableLog('getServerSecurityLevel');\\n    let serverSecurityThreshold = ns.getServerMinSecurityLevel(server) + 2;\\n    let serverMoneyThreshold = ns.getServerMaxMoney(server) * 0.95;\\n    let opts = { threads: threads, stock: true };\\n    while (true) {\\n        if (ns.getServerSecurityLevel(server) > serverSecurityThreshold) {\\n            await ns.weaken(server, opts);\\n        } else if (ns.getServerMoneyAvailable(server) < serverMoneyThreshold) {\\n            await ns.grow(server, opts);\\n        } else {\\n            await ns.hack(server, opts);\\n        }\\n    }\\n}\\n\\nexport function autocomplete(data, args) {\\n    return [...data.servers];\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///3d95469f-c756-431f-bc25-8a87e4826fd0\",\"moduleSequenceNumber\":108387}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"zer0\",\"moduleSequenceNumber\":108387,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"joesguns\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":26.865999999975774,\"minDifficulty\":25,\"moneyAvailable\":59681805.17231404,\"moneyMax\":63281250,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"91.8.4.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\",6],\"dataMap\":{\"nectar-net\":[812109375,210,14166,1140]},\"filename\":\"/scripts/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":13101139.649806686,\"onlineMoneyMade\":812109375,\"onlineRunningTime\":16.809999999999974,\"pid\":730,\"ramUsage\":2.4,\"server\":\"nectar-net\",\"threads\":6,\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///e16c8f58-fbb9-4ac4-a748-905797534218\",\"moduleSequenceNumber\":108172}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/* A simple lightweight script that is deployed\\n * to remote and local servers to repeatedly hack\\n * a particular server.\\n * The smaller this is, the more threads can be deployed.\\n * args[0] - server name\\n * args[1] - threads to attack with\\n */\\nexport async function main(ns, args) {\\n    await hackServer(ns, ns.args[0], ns.args[1]);\\n}\\n\\nasync function hackServer(ns, server, threads) {\\n    ns.disableLog('getServerSecurityLevel');\\n    let serverSecurityThreshold = ns.getServerMinSecurityLevel(server) + 2;\\n    let serverMoneyThreshold = ns.getServerMaxMoney(server) * 0.95;\\n    let opts = { threads: threads, stock: true };\\n    while (true) {\\n        if (ns.getServerSecurityLevel(server) > serverSecurityThreshold) {\\n            await ns.weaken(server, opts);\\n        } else if (ns.getServerMoneyAvailable(server) < serverMoneyThreshold) {\\n            await ns.grow(server, opts);\\n        } else {\\n            await ns.hack(server, opts);\\n        }\\n    }\\n}\\n\\nexport function autocomplete(data, args) {\\n    return [...data.servers];\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///e16c8f58-fbb9-4ac4-a748-905797534218\",\"moduleSequenceNumber\":108172}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"nectar-net\",\"moduleSequenceNumber\":108172,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"sigma-cosmetics\",\"neo-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":21.882000000118364,\"minDifficulty\":20,\"moneyAvailable\":10452642.73997092,\"moneyMax\":23203125,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"62.2.7.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\",13],\"dataMap\":{\"neo-net\":[2508489581.0863075,780,29731,2392]},\"filename\":\"/scripts/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":33735386.65798197,\"onlineMoneyMade\":2508489581.0863075,\"onlineRunningTime\":16.809999999999974,\"pid\":731,\"ramUsage\":2.4,\"server\":\"neo-net\",\"threads\":13,\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///3df6d095-ecfe-4e2f-9a86-99361bca4a96\",\"moduleSequenceNumber\":108174}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/* A simple lightweight script that is deployed\\n * to remote and local servers to repeatedly hack\\n * a particular server.\\n * The smaller this is, the more threads can be deployed.\\n * args[0] - server name\\n * args[1] - threads to attack with\\n */\\nexport async function main(ns, args) {\\n    await hackServer(ns, ns.args[0], ns.args[1]);\\n}\\n\\nasync function hackServer(ns, server, threads) {\\n    ns.disableLog('getServerSecurityLevel');\\n    let serverSecurityThreshold = ns.getServerMinSecurityLevel(server) + 2;\\n    let serverMoneyThreshold = ns.getServerMaxMoney(server) * 0.95;\\n    let opts = { threads: threads, stock: true };\\n    while (true) {\\n        if (ns.getServerSecurityLevel(server) > serverSecurityThreshold) {\\n            await ns.weaken(server, opts);\\n        } else if (ns.getServerMoneyAvailable(server) < serverMoneyThreshold) {\\n            await ns.grow(server, opts);\\n        } else {\\n            await ns.hack(server, opts);\\n        }\\n    }\\n}\\n\\nexport function autocomplete(data, args) {\\n    return [...data.servers];\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///3df6d095-ecfe-4e2f-9a86-99361bca4a96\",\"moduleSequenceNumber\":108174}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"neo-net\",\"moduleSequenceNumber\":108174,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"nectar-net\",\"computek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":26.631999999966943,\"minDifficulty\":25,\"moneyAvailable\":372461.0632618418,\"moneyMax\":42187500,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":true,\"ip\":\"16.7.7.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":62.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\",26],\"dataMap\":{\"silver-helix\":[14048437500,962,21112,1638]},\"filename\":\"/scripts/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":28602205.772972014,\"onlineMoneyMade\":14048437500,\"onlineRunningTime\":16.809999999999974,\"pid\":740,\"ramUsage\":2.4,\"server\":\"silver-helix\",\"threads\":26,\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///ca5fe1aa-cdd5-41ee-91a9-6a19b523302a\",\"moduleSequenceNumber\":108391}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/* A simple lightweight script that is deployed\\n * to remote and local servers to repeatedly hack\\n * a particular server.\\n * The smaller this is, the more threads can be deployed.\\n * args[0] - server name\\n * args[1] - threads to attack with\\n */\\nexport async function main(ns, args) {\\n    await hackServer(ns, ns.args[0], ns.args[1]);\\n}\\n\\nasync function hackServer(ns, server, threads) {\\n    ns.disableLog('getServerSecurityLevel');\\n    let serverSecurityThreshold = ns.getServerMinSecurityLevel(server) + 2;\\n    let serverMoneyThreshold = ns.getServerMaxMoney(server) * 0.95;\\n    let opts = { threads: threads, stock: true };\\n    while (true) {\\n        if (ns.getServerSecurityLevel(server) > serverSecurityThreshold) {\\n            await ns.weaken(server, opts);\\n        } else if (ns.getServerMoneyAvailable(server) < serverMoneyThreshold) {\\n            await ns.grow(server, opts);\\n        } else {\\n            await ns.hack(server, opts);\\n        }\\n    }\\n}\\n\\nexport function autocomplete(data, args) {\\n    return [...data.servers];\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///ca5fe1aa-cdd5-41ee-91a9-6a19b523302a\",\"moduleSequenceNumber\":108391}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"silver-helix\",\"moduleSequenceNumber\":108391,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"CSEC\",\"the-hub\",\"crush-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":31.97399999997636,\"minDifficulty\":30,\"moneyAvailable\":364326.0516694266,\"moneyMax\":379687500,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"17.5.8.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",6],\"dataMap\":{\"hong-fang-tea\":[913244951.5930146,222,14154,1140]},\"filename\":\"/scripts/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":10293752.581990888,\"onlineMoneyMade\":913244951.5930146,\"onlineRunningTime\":16.809999999999974,\"pid\":738,\"ramUsage\":2.4,\"server\":\"hong-fang-tea\",\"threads\":6,\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///f0e7b04d-82f2-4090-9a7c-09a1eabed74e\",\"moduleSequenceNumber\":108181}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/* A simple lightweight script that is deployed\\n * to remote and local servers to repeatedly hack\\n * a particular server.\\n * The smaller this is, the more threads can be deployed.\\n * args[0] - server name\\n * args[1] - threads to attack with\\n */\\nexport async function main(ns, args) {\\n    await hackServer(ns, ns.args[0], ns.args[1]);\\n}\\n\\nasync function hackServer(ns, server, threads) {\\n    ns.disableLog('getServerSecurityLevel');\\n    let serverSecurityThreshold = ns.getServerMinSecurityLevel(server) + 2;\\n    let serverMoneyThreshold = ns.getServerMaxMoney(server) * 0.95;\\n    let opts = { threads: threads, stock: true };\\n    while (true) {\\n        if (ns.getServerSecurityLevel(server) > serverSecurityThreshold) {\\n            await ns.weaken(server, opts);\\n        } else if (ns.getServerMoneyAvailable(server) < serverMoneyThreshold) {\\n            await ns.grow(server, opts);\\n        } else {\\n            await ns.hack(server, opts);\\n        }\\n    }\\n}\\n\\nexport function autocomplete(data, args) {\\n    return [...data.servers];\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///f0e7b04d-82f2-4090-9a7c-09a1eabed74e\",\"moduleSequenceNumber\":108181}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":108181,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":45,\"hackDifficulty\":16.81800000011803,\"minDifficulty\":15,\"moneyAvailable\":827989.4608295773,\"moneyMax\":25312500,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"30.5.7.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",6],\"dataMap\":{\"harakiri-sushi\":[2233342502.2408314,402,14004,1110]},\"filename\":\"/scripts/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":10293754.852827728,\"onlineMoneyMade\":2233342502.2408314,\"onlineRunningTime\":16.809999999999974,\"pid\":746,\"ramUsage\":2.4,\"server\":\"harakiri-sushi\",\"threads\":6,\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///3516d493-90d2-4a36-843d-0e2a4c226346\",\"moduleSequenceNumber\":108186}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/* A simple lightweight script that is deployed\\n * to remote and local servers to repeatedly hack\\n * a particular server.\\n * The smaller this is, the more threads can be deployed.\\n * args[0] - server name\\n * args[1] - threads to attack with\\n */\\nexport async function main(ns, args) {\\n    await hackServer(ns, ns.args[0], ns.args[1]);\\n}\\n\\nasync function hackServer(ns, server, threads) {\\n    ns.disableLog('getServerSecurityLevel');\\n    let serverSecurityThreshold = ns.getServerMinSecurityLevel(server) + 2;\\n    let serverMoneyThreshold = ns.getServerMaxMoney(server) * 0.95;\\n    let opts = { threads: threads, stock: true };\\n    while (true) {\\n        if (ns.getServerSecurityLevel(server) > serverSecurityThreshold) {\\n            await ns.weaken(server, opts);\\n        } else if (ns.getServerMoneyAvailable(server) < serverMoneyThreshold) {\\n            await ns.grow(server, opts);\\n        } else {\\n            await ns.hack(server, opts);\\n        }\\n    }\\n}\\n\\nexport function autocomplete(data, args) {\\n    return [...data.servers];\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///3516d493-90d2-4a36-843d-0e2a4c226346\",\"moduleSequenceNumber\":108186}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":108186,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":45,\"hackDifficulty\":16.738000000118053,\"minDifficulty\":15,\"moneyAvailable\":1181.5203887174928,\"moneyMax\":33750000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":true,\"ip\":\"62.2.1.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",13],\"dataMap\":{\"phantasy\":[12757500000,819,21346,1664]},\"filename\":\"/scripts/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":20120312.151915636,\"onlineMoneyMade\":12757500000,\"onlineRunningTime\":16.809999999999974,\"pid\":707,\"ramUsage\":2.4,\"server\":\"phantasy\",\"threads\":13,\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///65e7ff37-e2f8-47a0-833e-4b38fc0014d8\",\"moduleSequenceNumber\":108261}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/* A simple lightweight script that is deployed\\n * to remote and local servers to repeatedly hack\\n * a particular server.\\n * The smaller this is, the more threads can be deployed.\\n * args[0] - server name\\n * args[1] - threads to attack with\\n */\\nexport async function main(ns, args) {\\n    await hackServer(ns, ns.args[0], ns.args[1]);\\n}\\n\\nasync function hackServer(ns, server, threads) {\\n    ns.disableLog('getServerSecurityLevel');\\n    let serverSecurityThreshold = ns.getServerMinSecurityLevel(server) + 2;\\n    let serverMoneyThreshold = ns.getServerMaxMoney(server) * 0.95;\\n    let opts = { threads: threads, stock: true };\\n    while (true) {\\n        if (ns.getServerSecurityLevel(server) > serverSecurityThreshold) {\\n            await ns.weaken(server, opts);\\n        } else if (ns.getServerMoneyAvailable(server) < serverMoneyThreshold) {\\n            await ns.grow(server, opts);\\n        } else {\\n            await ns.hack(server, opts);\\n        }\\n    }\\n}\\n\\nexport function autocomplete(data, args) {\\n    return [...data.servers];\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///65e7ff37-e2f8-47a0-833e-4b38fc0014d8\",\"moduleSequenceNumber\":108261}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"phantasy\",\"moduleSequenceNumber\":108261,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"max-hardware\",\"johnson-ortho\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":21.86199999997478,\"minDifficulty\":20,\"moneyAvailable\":1144590.2255324486,\"moneyMax\":202500000,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":true,\"ip\":\"72.6.7.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",13],\"dataMap\":{\"max-hardware\":[8690625000,1339,29302,2301]},\"filename\":\"/scripts/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":21854652.32494896,\"onlineMoneyMade\":8690625000,\"onlineRunningTime\":16.809999999999974,\"pid\":706,\"ramUsage\":2.4,\"server\":\"max-hardware\",\"threads\":13,\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///02472ecb-1e73-4d0b-b7bf-a7b0b3a7b1bc\",\"moduleSequenceNumber\":108258}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/* A simple lightweight script that is deployed\\n * to remote and local servers to repeatedly hack\\n * a particular server.\\n * The smaller this is, the more threads can be deployed.\\n * args[0] - server name\\n * args[1] - threads to attack with\\n */\\nexport async function main(ns, args) {\\n    await hackServer(ns, ns.args[0], ns.args[1]);\\n}\\n\\nasync function hackServer(ns, server, threads) {\\n    ns.disableLog('getServerSecurityLevel');\\n    let serverSecurityThreshold = ns.getServerMinSecurityLevel(server) + 2;\\n    let serverMoneyThreshold = ns.getServerMaxMoney(server) * 0.95;\\n    let opts = { threads: threads, stock: true };\\n    while (true) {\\n        if (ns.getServerSecurityLevel(server) > serverSecurityThreshold) {\\n            await ns.weaken(server, opts);\\n        } else if (ns.getServerMoneyAvailable(server) < serverMoneyThreshold) {\\n            await ns.grow(server, opts);\\n        } else {\\n            await ns.hack(server, opts);\\n        }\\n    }\\n}\\n\\nexport function autocomplete(data, args) {\\n    return [...data.servers];\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///02472ecb-1e73-4d0b-b7bf-a7b0b3a7b1bc\",\"moduleSequenceNumber\":108258}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"max-hardware\",\"moduleSequenceNumber\":108258,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"n00dles\",\"phantasy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":45,\"hackDifficulty\":16.863999999966737,\"minDifficulty\":15,\"moneyAvailable\":181.80092976404785,\"moneyMax\":84375000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":true,\"ip\":\"72.9.8.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",13],\"dataMap\":{\"omega-net\":[9211791774.375,221,8073,637]},\"filename\":\"/scripts/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":10772875.207822973,\"onlineMoneyMade\":9211791774.375,\"onlineRunningTime\":16.809999999999974,\"pid\":742,\"ramUsage\":2.4,\"server\":\"omega-net\",\"threads\":13,\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///176df0bc-cc67-4576-b262-3098b9c47b7a\",\"moduleSequenceNumber\":108399}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/* A simple lightweight script that is deployed\\n * to remote and local servers to repeatedly hack\\n * a particular server.\\n * The smaller this is, the more threads can be deployed.\\n * args[0] - server name\\n * args[1] - threads to attack with\\n */\\nexport async function main(ns, args) {\\n    await hackServer(ns, ns.args[0], ns.args[1]);\\n}\\n\\nasync function hackServer(ns, server, threads) {\\n    ns.disableLog('getServerSecurityLevel');\\n    let serverSecurityThreshold = ns.getServerMinSecurityLevel(server) + 2;\\n    let serverMoneyThreshold = ns.getServerMaxMoney(server) * 0.95;\\n    let opts = { threads: threads, stock: true };\\n    while (true) {\\n        if (ns.getServerSecurityLevel(server) > serverSecurityThreshold) {\\n            await ns.weaken(server, opts);\\n        } else if (ns.getServerMoneyAvailable(server) < serverMoneyThreshold) {\\n            await ns.grow(server, opts);\\n        } else {\\n            await ns.hack(server, opts);\\n        }\\n    }\\n}\\n\\nexport function autocomplete(data, args) {\\n    return [...data.servers];\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///176df0bc-cc67-4576-b262-3098b9c47b7a\",\"moduleSequenceNumber\":108399}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"omega-net\",\"moduleSequenceNumber\":108399,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"CSEC\",\"netlink\",\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":32.033999999993625,\"minDifficulty\":30,\"moneyAvailable\":3567.022217507972,\"moneyMax\":541870104.375,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":208,\"serverGrowth\":38}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":true,\"ip\":\"10.1.5.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/* A simple lightweight script that is deployed\\n * to remote and local servers to repeatedly hack\\n * a particular server.\\n * The smaller this is, the more threads can be deployed.\\n * args[0] - server name\\n * args[1] - threads to attack with\\n */\\nexport async function main(ns, args) {\\n    await hackServer(ns, ns.args[0], ns.args[1]);\\n}\\n\\nasync function hackServer(ns, server, threads) {\\n    ns.disableLog('getServerSecurityLevel');\\n    let serverSecurityThreshold = ns.getServerMinSecurityLevel(server) + 2;\\n    let serverMoneyThreshold = ns.getServerMaxMoney(server) * 0.95;\\n    let opts = { threads: threads, stock: true };\\n    while (true) {\\n        if (ns.getServerSecurityLevel(server) > serverSecurityThreshold) {\\n            await ns.weaken(server, opts);\\n        } else if (ns.getServerMoneyAvailable(server) < serverMoneyThreshold) {\\n            await ns.grow(server, opts);\\n        } else {\\n            await ns.hack(server, opts);\\n        }\\n    }\\n}\\n\\nexport function autocomplete(data, args) {\\n    return [...data.servers];\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":108395,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"silver-helix\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":126,\"hackDifficulty\":126,\"minDifficulty\":42,\"moneyAvailable\":32097848.25,\"moneyMax\":361100792.8125,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":232,\"serverGrowth\":32}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":true,\"ip\":\"3.0.4.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\",13],\"dataMap\":{\"iron-gym\":[3206250000,247,15418,1235]},\"filename\":\"/scripts/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":20385329.738836057,\"onlineMoneyMade\":3206250000,\"onlineRunningTime\":16.809999999999974,\"pid\":747,\"ramUsage\":2.4,\"server\":\"iron-gym\",\"threads\":13,\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///2a2ee826-848d-4ff4-9096-70ef071a82ab\",\"moduleSequenceNumber\":108410}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/* A simple lightweight script that is deployed\\n * to remote and local servers to repeatedly hack\\n * a particular server.\\n * The smaller this is, the more threads can be deployed.\\n * args[0] - server name\\n * args[1] - threads to attack with\\n */\\nexport async function main(ns, args) {\\n    await hackServer(ns, ns.args[0], ns.args[1]);\\n}\\n\\nasync function hackServer(ns, server, threads) {\\n    ns.disableLog('getServerSecurityLevel');\\n    let serverSecurityThreshold = ns.getServerMinSecurityLevel(server) + 2;\\n    let serverMoneyThreshold = ns.getServerMaxMoney(server) * 0.95;\\n    let opts = { threads: threads, stock: true };\\n    while (true) {\\n        if (ns.getServerSecurityLevel(server) > serverSecurityThreshold) {\\n            await ns.weaken(server, opts);\\n        } else if (ns.getServerMoneyAvailable(server) < serverMoneyThreshold) {\\n            await ns.grow(server, opts);\\n        } else {\\n            await ns.hack(server, opts);\\n        }\\n    }\\n}\\n\\nexport function autocomplete(data, args) {\\n    return [...data.servers];\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///2a2ee826-848d-4ff4-9096-70ef071a82ab\",\"moduleSequenceNumber\":108410}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"iron-gym\",\"moduleSequenceNumber\":108410,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":31.531999999983945,\"minDifficulty\":30,\"moneyAvailable\":1061481.187399671,\"moneyMax\":168750000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":true,\"ip\":\"77.4.4.7\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":254.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\",106],\"dataMap\":{\"millenium-fitness\":[42187500000,2120,17172,2968]},\"filename\":\"/scripts/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":42961139.1961691,\"onlineMoneyMade\":42187500000,\"onlineRunningTime\":16.809999999999974,\"pid\":727,\"ramUsage\":2.4,\"server\":\"millenium-fitness\",\"threads\":106,\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///d2d50a7c-c830-42d9-a82d-b3051de1fff0\",\"moduleSequenceNumber\":108369}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/* A simple lightweight script that is deployed\\n * to remote and local servers to repeatedly hack\\n * a particular server.\\n * The smaller this is, the more threads can be deployed.\\n * args[0] - server name\\n * args[1] - threads to attack with\\n */\\nexport async function main(ns, args) {\\n    await hackServer(ns, ns.args[0], ns.args[1]);\\n}\\n\\nasync function hackServer(ns, server, threads) {\\n    ns.disableLog('getServerSecurityLevel');\\n    let serverSecurityThreshold = ns.getServerMinSecurityLevel(server) + 2;\\n    let serverMoneyThreshold = ns.getServerMaxMoney(server) * 0.95;\\n    let opts = { threads: threads, stock: true };\\n    while (true) {\\n        if (ns.getServerSecurityLevel(server) > serverSecurityThreshold) {\\n            await ns.weaken(server, opts);\\n        } else if (ns.getServerMoneyAvailable(server) < serverMoneyThreshold) {\\n            await ns.grow(server, opts);\\n        } else {\\n            await ns.hack(server, opts);\\n        }\\n    }\\n}\\n\\nexport function autocomplete(data, args) {\\n    return [...data.servers];\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///d2d50a7c-c830-42d9-a82d-b3051de1fff0\",\"moduleSequenceNumber\":108369}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":108369,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"catalyst\",\"aerocorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":150,\"hackDifficulty\":51.272,\"minDifficulty\":50,\"moneyAvailable\":1144122887.3876734,\"moneyMax\":2109375000,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":491,\"serverGrowth\":37}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":true,\"ip\":\"67.9.0.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\",6],\"dataMap\":{\"powerhouse-fitness\":[7253481830.525456,6,450,42]},\"filename\":\"/scripts/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1177377.2857244618,\"onlineMoneyMade\":7253481830.525456,\"onlineRunningTime\":16.809999999999974,\"pid\":722,\"ramUsage\":2.4,\"server\":\"powerhouse-fitness\",\"threads\":6,\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///f9954595-a78f-4bb8-8703-00c81b524956\",\"moduleSequenceNumber\":108336}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/* A simple lightweight script that is deployed\\n * to remote and local servers to repeatedly hack\\n * a particular server.\\n * The smaller this is, the more threads can be deployed.\\n * args[0] - server name\\n * args[1] - threads to attack with\\n */\\nexport async function main(ns, args) {\\n    await hackServer(ns, ns.args[0], ns.args[1]);\\n}\\n\\nasync function hackServer(ns, server, threads) {\\n    ns.disableLog('getServerSecurityLevel');\\n    let serverSecurityThreshold = ns.getServerMinSecurityLevel(server) + 2;\\n    let serverMoneyThreshold = ns.getServerMaxMoney(server) * 0.95;\\n    let opts = { threads: threads, stock: true };\\n    while (true) {\\n        if (ns.getServerSecurityLevel(server) > serverSecurityThreshold) {\\n            await ns.weaken(server, opts);\\n        } else if (ns.getServerMoneyAvailable(server) < serverMoneyThreshold) {\\n            await ns.grow(server, opts);\\n        } else {\\n            await ns.hack(server, opts);\\n        }\\n    }\\n}\\n\\nexport function autocomplete(data, args) {\\n    return [...data.servers];\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///f9954595-a78f-4bb8-8703-00c81b524956\",\"moduleSequenceNumber\":108336}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":108336,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"omnitek\",\"megacorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":186,\"hackDifficulty\":63.71200000000459,\"minDifficulty\":62,\"moneyAvailable\":678.6674649451721,\"moneyMax\":7593750000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":987,\"serverGrowth\":57}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"snap-fitness\",\"httpPortOpen\":true,\"ip\":\"80.3.1.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/* A simple lightweight script that is deployed\\n * to remote and local servers to repeatedly hack\\n * a particular server.\\n * The smaller this is, the more threads can be deployed.\\n * args[0] - server name\\n * args[1] - threads to attack with\\n */\\nexport async function main(ns, args) {\\n    await hackServer(ns, ns.args[0], ns.args[1]);\\n}\\n\\nasync function hackServer(ns, server, threads) {\\n    ns.disableLog('getServerSecurityLevel');\\n    let serverSecurityThreshold = ns.getServerMinSecurityLevel(server) + 2;\\n    let serverMoneyThreshold = ns.getServerMaxMoney(server) * 0.95;\\n    let opts = { threads: threads, stock: true };\\n    while (true) {\\n        if (ns.getServerSecurityLevel(server) > serverSecurityThreshold) {\\n            await ns.weaken(server, opts);\\n        } else if (ns.getServerMoneyAvailable(server) < serverMoneyThreshold) {\\n            await ns.grow(server, opts);\\n        } else {\\n            await ns.hack(server, opts);\\n        }\\n    }\\n}\\n\\nexport function autocomplete(data, args) {\\n    return [...data.servers];\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":108269,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"lexo-corp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":168,\"hackDifficulty\":168,\"minDifficulty\":56,\"moneyAvailable\":337500000,\"moneyMax\":3796875000,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":698,\"serverGrowth\":55}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"74.8.1.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":62.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"run4theh111z\",26],\"dataMap\":{\"run4theh111z\":[0,66820,0,312]},\"filename\":\"/scripts/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2052646.9502770698,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.809999999999974,\"pid\":714,\"ramUsage\":2.4,\"server\":\"run4theh111z\",\"threads\":26,\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///767c5ddf-15b5-4ad6-bec1-1742ecd594a0\",\"moduleSequenceNumber\":108300}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/* A simple lightweight script that is deployed\\n * to remote and local servers to repeatedly hack\\n * a particular server.\\n * The smaller this is, the more threads can be deployed.\\n * args[0] - server name\\n * args[1] - threads to attack with\\n */\\nexport async function main(ns, args) {\\n    await hackServer(ns, ns.args[0], ns.args[1]);\\n}\\n\\nasync function hackServer(ns, server, threads) {\\n    ns.disableLog('getServerSecurityLevel');\\n    let serverSecurityThreshold = ns.getServerMinSecurityLevel(server) + 2;\\n    let serverMoneyThreshold = ns.getServerMaxMoney(server) * 0.95;\\n    let opts = { threads: threads, stock: true };\\n    while (true) {\\n        if (ns.getServerSecurityLevel(server) > serverSecurityThreshold) {\\n            await ns.weaken(server, opts);\\n        } else if (ns.getServerMoneyAvailable(server) < serverMoneyThreshold) {\\n            await ns.grow(server, opts);\\n        } else {\\n            await ns.hack(server, opts);\\n        }\\n    }\\n}\\n\\nexport function autocomplete(data, args) {\\n    return [...data.servers];\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///767c5ddf-15b5-4ad6-bec1-1742ecd594a0\",\"moduleSequenceNumber\":108300}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":108300,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"infocomm\",\"helios\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":2.4539999999763262,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":525,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":true,\"ip\":\"96.7.2.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":62.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"I.I.I.I\",26],\"dataMap\":{\"I.I.I.I\":[0,66924,0,312]},\"filename\":\"/scripts/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2055782.8184885085,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.809999999999974,\"pid\":735,\"ramUsage\":2.4,\"server\":\"I.I.I.I\",\"threads\":26,\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///d3b9bdc4-1da6-4147-b6c3-0c4d60a5bd4e\",\"moduleSequenceNumber\":108384}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/* A simple lightweight script that is deployed\\n * to remote and local servers to repeatedly hack\\n * a particular server.\\n * The smaller this is, the more threads can be deployed.\\n * args[0] - server name\\n * args[1] - threads to attack with\\n */\\nexport async function main(ns, args) {\\n    await hackServer(ns, ns.args[0], ns.args[1]);\\n}\\n\\nasync function hackServer(ns, server, threads) {\\n    ns.disableLog('getServerSecurityLevel');\\n    let serverSecurityThreshold = ns.getServerMinSecurityLevel(server) + 2;\\n    let serverMoneyThreshold = ns.getServerMaxMoney(server) * 0.95;\\n    let opts = { threads: threads, stock: true };\\n    while (true) {\\n        if (ns.getServerSecurityLevel(server) > serverSecurityThreshold) {\\n            await ns.weaken(server, opts);\\n        } else if (ns.getServerMoneyAvailable(server) < serverMoneyThreshold) {\\n            await ns.grow(server, opts);\\n        } else {\\n            await ns.hack(server, opts);\\n        }\\n    }\\n}\\n\\nexport function autocomplete(data, args) {\\n    return [...data.servers];\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///d3b9bdc4-1da6-4147-b6c3-0c4d60a5bd4e\",\"moduleSequenceNumber\":108384}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":108384,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"computek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":2.599999999976285,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":352,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":true,\"ip\":\"25.7.1.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"avmnite-02h\",13],\"dataMap\":{\"avmnite-02h\":[0,33306,0,312]},\"filename\":\"/scripts/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1042004.6004344517,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.809999999999974,\"pid\":745,\"ramUsage\":2.4,\"server\":\"avmnite-02h\",\"threads\":13,\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///5afaf415-1fad-4b6e-b5fa-208e0aa11b8f\",\"moduleSequenceNumber\":108407}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/* A simple lightweight script that is deployed\\n * to remote and local servers to repeatedly hack\\n * a particular server.\\n * The smaller this is, the more threads can be deployed.\\n * args[0] - server name\\n * args[1] - threads to attack with\\n */\\nexport async function main(ns, args) {\\n    await hackServer(ns, ns.args[0], ns.args[1]);\\n}\\n\\nasync function hackServer(ns, server, threads) {\\n    ns.disableLog('getServerSecurityLevel');\\n    let serverSecurityThreshold = ns.getServerMinSecurityLevel(server) + 2;\\n    let serverMoneyThreshold = ns.getServerMaxMoney(server) * 0.95;\\n    let opts = { threads: threads, stock: true };\\n    while (true) {\\n        if (ns.getServerSecurityLevel(server) > serverSecurityThreshold) {\\n            await ns.weaken(server, opts);\\n        } else if (ns.getServerMoneyAvailable(server) < serverMoneyThreshold) {\\n            await ns.grow(server, opts);\\n        } else {\\n            await ns.hack(server, opts);\\n        }\\n    }\\n}\\n\\nexport function autocomplete(data, args) {\\n    return [...data.servers];\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///5afaf415-1fad-4b6e-b5fa-208e0aa11b8f\",\"moduleSequenceNumber\":108407}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":108407,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":2.7539999999694045,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":205,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\".\",\"httpPortOpen\":true,\"ip\":\"1.9.4.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\".\",6],\"dataMap\":{\".\":[0,15084,0,300]},\"filename\":\"/scripts/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":491057.4971171082,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.809999999999974,\"pid\":720,\"ramUsage\":2.4,\"server\":\".\",\"threads\":6,\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///52d8c56d-c670-4cd2-8d1d-e8d0be0d13eb\",\"moduleSequenceNumber\":108324}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/* A simple lightweight script that is deployed\\n * to remote and local servers to repeatedly hack\\n * a particular server.\\n * The smaller this is, the more threads can be deployed.\\n * args[0] - server name\\n * args[1] - threads to attack with\\n */\\nexport async function main(ns, args) {\\n    await hackServer(ns, ns.args[0], ns.args[1]);\\n}\\n\\nasync function hackServer(ns, server, threads) {\\n    ns.disableLog('getServerSecurityLevel');\\n    let serverSecurityThreshold = ns.getServerMinSecurityLevel(server) + 2;\\n    let serverMoneyThreshold = ns.getServerMaxMoney(server) * 0.95;\\n    let opts = { threads: threads, stock: true };\\n    while (true) {\\n        if (ns.getServerSecurityLevel(server) > serverSecurityThreshold) {\\n            await ns.weaken(server, opts);\\n        } else if (ns.getServerMoneyAvailable(server) < serverMoneyThreshold) {\\n            await ns.grow(server, opts);\\n        } else {\\n            await ns.hack(server, opts);\\n        }\\n    }\\n}\\n\\nexport function autocomplete(data, args) {\\n    return [...data.servers];\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///52d8c56d-c670-4cd2-8d1d-e8d0be0d13eb\",\"moduleSequenceNumber\":108324}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\".\",\"moduleSequenceNumber\":108324,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"fulcrumtech\",\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":2.961999999970464,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":542,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"82.1.1.9\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":7.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"CSEC\",3],\"dataMap\":{\"CSEC\":[0,7461,0,297]},\"filename\":\"/scripts/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":260817.8113947839,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.809999999999974,\"pid\":739,\"ramUsage\":2.4,\"server\":\"CSEC\",\"threads\":3,\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///2ae32b3b-e6d1-4bba-b6bd-c3c461204c75\",\"moduleSequenceNumber\":108183}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/* A simple lightweight script that is deployed\\n * to remote and local servers to repeatedly hack\\n * a particular server.\\n * The smaller this is, the more threads can be deployed.\\n * args[0] - server name\\n * args[1] - threads to attack with\\n */\\nexport async function main(ns, args) {\\n    await hackServer(ns, ns.args[0], ns.args[1]);\\n}\\n\\nasync function hackServer(ns, server, threads) {\\n    ns.disableLog('getServerSecurityLevel');\\n    let serverSecurityThreshold = ns.getServerMinSecurityLevel(server) + 2;\\n    let serverMoneyThreshold = ns.getServerMaxMoney(server) * 0.95;\\n    let opts = { threads: threads, stock: true };\\n    while (true) {\\n        if (ns.getServerSecurityLevel(server) > serverSecurityThreshold) {\\n            await ns.weaken(server, opts);\\n        } else if (ns.getServerMoneyAvailable(server) < serverMoneyThreshold) {\\n            await ns.grow(server, opts);\\n        } else {\\n            await ns.hack(server, opts);\\n        }\\n    }\\n}\\n\\nexport function autocomplete(data, args) {\\n    return [...data.servers];\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///2ae32b3b-e6d1-4bba-b6bd-c3c461204c75\",\"moduleSequenceNumber\":108183}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"CSEC\",\"moduleSequenceNumber\":108183,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"hong-fang-tea\",\"silver-helix\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":2.9259999999682753,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":55,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"The-Cave\",\"httpPortOpen\":true,\"ip\":\"27.5.8.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/* A simple lightweight script that is deployed\\n * to remote and local servers to repeatedly hack\\n * a particular server.\\n * The smaller this is, the more threads can be deployed.\\n * args[0] - server name\\n * args[1] - threads to attack with\\n */\\nexport async function main(ns, args) {\\n    await hackServer(ns, ns.args[0], ns.args[1]);\\n}\\n\\nasync function hackServer(ns, server, threads) {\\n    ns.disableLog('getServerSecurityLevel');\\n    let serverSecurityThreshold = ns.getServerMinSecurityLevel(server) + 2;\\n    let serverMoneyThreshold = ns.getServerMaxMoney(server) * 0.95;\\n    let opts = { threads: threads, stock: true };\\n    while (true) {\\n        if (ns.getServerSecurityLevel(server) > serverSecurityThreshold) {\\n            await ns.weaken(server, opts);\\n        } else if (ns.getServerMoneyAvailable(server) < serverMoneyThreshold) {\\n            await ns.grow(server, opts);\\n        } else {\\n            await ns.hack(server, opts);\\n        }\\n    }\\n}\\n\\nexport function autocomplete(data, args) {\\n    return [...data.servers];\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"The-Cave\",\"moduleSequenceNumber\":108348,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"b-and-a\",\"w0r1d_d43m0n\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":true,\"ip\":\"8.1.4.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/* A simple lightweight script that is deployed\\n * to remote and local servers to repeatedly hack\\n * a particular server.\\n * The smaller this is, the more threads can be deployed.\\n * args[0] - server name\\n * args[1] - threads to attack with\\n */\\nexport async function main(ns, args) {\\n    await hackServer(ns, ns.args[0], ns.args[1]);\\n}\\n\\nasync function hackServer(ns, server, threads) {\\n    ns.disableLog('getServerSecurityLevel');\\n    let serverSecurityThreshold = ns.getServerMinSecurityLevel(server) + 2;\\n    let serverMoneyThreshold = ns.getServerMaxMoney(server) * 0.95;\\n    let opts = { threads: threads, stock: true };\\n    while (true) {\\n        if (ns.getServerSecurityLevel(server) > serverSecurityThreshold) {\\n            await ns.weaken(server, opts);\\n        } else if (ns.getServerMoneyAvailable(server) < serverMoneyThreshold) {\\n            await ns.grow(server, opts);\\n        } else {\\n            await ns.hack(server, opts);\\n        }\\n    }\\n}\\n\\nexport function autocomplete(data, args) {\\n    return [...data.servers];\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"w0r1d_d43m0n\",\"moduleSequenceNumber\":108350,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"The-Cave\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":9000,\"serverGrowth\":0}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"darkweb\",\"httpPortOpen\":true,\"ip\":\"64.1.9.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"darkweb\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/* A simple lightweight script that is deployed\\n * to remote and local servers to repeatedly hack\\n * a particular server.\\n * The smaller this is, the more threads can be deployed.\\n * args[0] - server name\\n * args[1] - threads to attack with\\n */\\nexport async function main(ns, args) {\\n    await hackServer(ns, ns.args[0], ns.args[1]);\\n}\\n\\nasync function hackServer(ns, server, threads) {\\n    ns.disableLog('getServerSecurityLevel');\\n    let serverSecurityThreshold = ns.getServerMinSecurityLevel(server) + 2;\\n    let serverMoneyThreshold = ns.getServerMaxMoney(server) * 0.95;\\n    let opts = { threads: threads, stock: true };\\n    while (true) {\\n        if (ns.getServerSecurityLevel(server) > serverSecurityThreshold) {\\n            await ns.weaken(server, opts);\\n        } else if (ns.getServerMoneyAvailable(server) < serverMoneyThreshold) {\\n            await ns.grow(server, opts);\\n        } else {\\n            await ns.hack(server, opts);\\n        }\\n    }\\n}\\n\\nexport function autocomplete(data, args) {\\n    return [...data.servers];\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"darkweb\",\"moduleSequenceNumber\":108412,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"hacknet-node-0\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":41,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-node-0\",\"httpPortOpen\":false,\"ip\":\"40.8.1.0\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"cache\":15,\"cores\":41,\"hashCapacity\":1048576,\"hashRate\":115.86403483801715,\"level\":189,\"onlineTimeSeconds\":949.6000000000769,\"totalHashesGenerated\":96348.3878584209}},\"hacknet-node-1\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":41,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-node-1\",\"httpPortOpen\":false,\"ip\":\"62.0.1.2\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"cache\":15,\"cores\":41,\"hashCapacity\":1048576,\"hashRate\":115.86403483801715,\"level\":189,\"onlineTimeSeconds\":949.6000000000769,\"totalHashesGenerated\":96290.69522459724}},\"hacknet-node-2\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":41,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-node-2\",\"httpPortOpen\":false,\"ip\":\"28.6.3.4\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"cache\":15,\"cores\":41,\"hashCapacity\":1048576,\"hashRate\":115.86403483801715,\"level\":189,\"onlineTimeSeconds\":949.6000000000769,\"totalHashesGenerated\":96239.96298876697}},\"hacknet-node-3\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":41,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-node-3\",\"httpPortOpen\":false,\"ip\":\"98.0.3.1\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"cache\":15,\"cores\":41,\"hashCapacity\":1048576,\"hashRate\":115.86403483801715,\"level\":189,\"onlineTimeSeconds\":949.6000000000769,\"totalHashesGenerated\":96204.95387085827}},\"hacknet-node-4\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":41,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-node-4\",\"httpPortOpen\":false,\"ip\":\"61.3.3.5\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"cache\":15,\"cores\":41,\"hashCapacity\":1048576,\"hashRate\":115.86403483801715,\"level\":189,\"onlineTimeSeconds\":949.6000000000769,\"totalHashesGenerated\":96157.06894893716}},\"hacknet-node-5\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":41,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-node-5\",\"httpPortOpen\":false,\"ip\":\"82.4.5.3\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"cache\":15,\"cores\":41,\"hashCapacity\":1048576,\"hashRate\":115.86403483801715,\"level\":189,\"onlineTimeSeconds\":949.6000000000769,\"totalHashesGenerated\":96088.53350654466}},\"hacknet-node-6\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":41,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-node-6\",\"httpPortOpen\":false,\"ip\":\"14.5.4.0\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"cache\":15,\"cores\":41,\"hashCapacity\":1048576,\"hashRate\":115.86403483801715,\"level\":189,\"onlineTimeSeconds\":949.6000000000769,\"totalHashesGenerated\":96044.27221916178}},\"hacknet-node-7\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":41,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-node-7\",\"httpPortOpen\":false,\"ip\":\"74.9.0.3\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"cache\":15,\"cores\":41,\"hashCapacity\":1048576,\"hashRate\":115.86403483801715,\"level\":189,\"onlineTimeSeconds\":949.6000000000769,\"totalHashesGenerated\":95993.47116938158}},\"hacknet-node-8\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":41,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-node-8\",\"httpPortOpen\":false,\"ip\":\"61.5.2.7\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"cache\":15,\"cores\":41,\"hashCapacity\":1048576,\"hashRate\":115.86403483801715,\"level\":189,\"onlineTimeSeconds\":949.6000000000769,\"totalHashesGenerated\":95936.17804751403}},\"hacknet-node-9\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":41,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-node-9\",\"httpPortOpen\":false,\"ip\":\"87.4.2.2\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"cache\":15,\"cores\":41,\"hashCapacity\":1048576,\"hashRate\":115.86403483801715,\"level\":189,\"onlineTimeSeconds\":949.6000000000769,\"totalHashesGenerated\":95890.93580776591}},\"hacknet-node-10\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":41,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-node-10\",\"httpPortOpen\":false,\"ip\":\"37.4.8.6\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"cache\":15,\"cores\":41,\"hashCapacity\":1048576,\"hashRate\":115.86403483801715,\"level\":189,\"onlineTimeSeconds\":949.6000000000769,\"totalHashesGenerated\":95824.716889419}},\"hacknet-node-11\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":41,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-node-11\",\"httpPortOpen\":false,\"ip\":\"71.1.2.6\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"cache\":15,\"cores\":41,\"hashCapacity\":1048576,\"hashRate\":115.86403483801715,\"level\":189,\"onlineTimeSeconds\":930.6000000000727,\"totalHashesGenerated\":95186.31943393293}},\"hacknet-node-12\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":41,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-node-12\",\"httpPortOpen\":false,\"ip\":\"24.8.2.9\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"cache\":15,\"cores\":41,\"hashCapacity\":1048576,\"hashRate\":115.86403483801715,\"level\":189,\"onlineTimeSeconds\":929.4000000000724,\"totalHashesGenerated\":95094.62531142143}},\"hacknet-node-13\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":41,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-node-13\",\"httpPortOpen\":false,\"ip\":\"28.6.0.4\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"cache\":15,\"cores\":41,\"hashCapacity\":1048576,\"hashRate\":115.86403483801715,\"level\":189,\"onlineTimeSeconds\":925.6000000000715,\"totalHashesGenerated\":94829.38454031061}},\"hacknet-node-14\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":41,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-node-14\",\"httpPortOpen\":false,\"ip\":\"19.0.5.5\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"cache\":15,\"cores\":41,\"hashCapacity\":1048576,\"hashRate\":115.86403483801715,\"level\":189,\"onlineTimeSeconds\":910.4000000000682,\"totalHashesGenerated\":93779.99014938784}},\"hacknet-node-15\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":41,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-node-15\",\"httpPortOpen\":false,\"ip\":\"62.0.4.7\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"cache\":15,\"cores\":41,\"hashCapacity\":1048576,\"hashRate\":115.86403483801715,\"level\":189,\"onlineTimeSeconds\":870.4000000000606,\"totalHashesGenerated\":90663.45604490029}},\"hacknet-node-16\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":40,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-node-16\",\"httpPortOpen\":false,\"ip\":\"79.1.2.7\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"cache\":15,\"cores\":40,\"hashCapacity\":1048576,\"hashRate\":113.28927850828346,\"level\":189,\"onlineTimeSeconds\":754.6000000000347,\"totalHashesGenerated\":80290.04070261106}},\"hacknet-node-17\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":40,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-node-17\",\"httpPortOpen\":false,\"ip\":\"94.9.6.3\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"cache\":15,\"cores\":40,\"hashCapacity\":1048576,\"hashRate\":113.28927850828346,\"level\":189,\"onlineTimeSeconds\":421.39999999998463,\"totalHashesGenerated\":46313.75234735484}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":130.5086,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":124.4691,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":124.5883,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":202.4361,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":125.5138,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":150.3215,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":134.1901,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":277.8139,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":139.8506,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":4.3511,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"QLink\"],\"favor\":451.5978,\"isBanned\":false,\"isMember\":true,\"name\":\"Illuminati\",\"playerReputation\":2470510428.172778}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"The Red Pill\"],\"favor\":466.1347,\"isBanned\":false,\"isMember\":true,\"name\":\"Daedalus\",\"playerReputation\":2425613239.0336294}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"SPTN-97 Gene Modification\"],\"favor\":473.5937,\"isBanned\":false,\"isMember\":true,\"name\":\"The Covenant\",\"playerReputation\":2472270366.02609}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"ECorp HVMind Implant\"],\"favor\":555.562,\"isBanned\":false,\"isMember\":true,\"name\":\"ECorp\",\"playerReputation\":2936148125.0868745}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"CordiARC Fusion Reactor\"],\"favor\":479.4275,\"isBanned\":false,\"isMember\":true,\"name\":\"MegaCorp\",\"playerReputation\":2595154878.695637}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"SmartJaw\"],\"favor\":479.1255,\"isBanned\":false,\"isMember\":true,\"name\":\"Bachman & Associates\",\"playerReputation\":2593801456.8753076}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":484.6193,\"isBanned\":false,\"isMember\":true,\"name\":\"Blade Industries\",\"playerReputation\":2618407793.661451}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"nextSENS Gene Modification\"],\"favor\":479.087,\"isBanned\":false,\"isMember\":true,\"name\":\"Clarke Incorporated\",\"playerReputation\":2593629022.1334596}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"Neurotrainer III\"],\"favor\":479.4892,\"isBanned\":false,\"isMember\":true,\"name\":\"Four Sigma\",\"playerReputation\":2595430405.332707}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":500.8932,\"isBanned\":false,\"isMember\":true,\"name\":\"KuaiGong International\",\"playerReputation\":2691295164.1508884}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\"],\"favor\":254.2516,\"isBanned\":false,\"isMember\":true,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":1586630732.3376505}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"The Black Hand\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Black Hand\",\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":3093.201,\"isBanned\":false,\"isMember\":false,\"name\":\"NiteSec\",\"playerReputation\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":422.3761,\"isBanned\":false,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Neuregen Gene Modification\"],\"favor\":302.6853,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"CashRoot Starter Kit\"],\"favor\":497.7598,\"isBanned\":false,\"isMember\":true,\"name\":\"Sector-12\",\"playerReputation\":2677261215.576751}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":458.5876999999999,\"isBanned\":false,\"isMember\":true,\"name\":\"The Syndicate\",\"playerReputation\":2501816962.618557}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\"],\"favor\":250.0652,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":127.8482,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":459.51919999999996,\"isBanned\":false,\"isMember\":true,\"name\":\"Slum Snakes\",\"playerReputation\":2505988280.79528}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\"],\"favor\":501.0638,\"isBanned\":false,\"isMember\":true,\"name\":\"Netburners\",\"playerReputation\":2692059251.604372}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":340.0161,\"isBanned\":false,\"isMember\":false,\"name\":\"Tian Di Hui\",\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"Neurotrainer I\"],\"favor\":302.6864,\"isBanned\":false,\"isMember\":false,\"name\":\"CyberSec\",\"playerReputation\":0}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":223.2787,\"isBanned\":false,\"isMember\":true,\"name\":\"Bladeburners\",\"playerReputation\":5034227.161811088}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":949.1327,\"isBanned\":false,\"isMember\":true,\"name\":\"Church of the Machine God\",\"playerReputation\":3276833520036.9043}},\"Shadows of Anarchy\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"SoA - phyzical WKS harmonizer\",\"SoA - Might of Ares\",\"SoA - Wisdom of Athena\",\"SoA - Chaos of Dionysus\",\"SoA - Beauty of Aphrodite\",\"SoA - Trickery of Hermes\",\"SoA - Flood of Poseidon\",\"SoA - Hunt of Artemis\",\"SoA - Knowledge of Apollo\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Shadows of Anarchy\",\"playerReputation\":0}}}","AliasesSave":"{\"goof\":\"run /sbin/goFundMe.js\",\"pwn\":\"run /bin/pwn.js\",\"bail\":\"run /sbin/goFundCorp.js\"}","GlobalAliasesSave":"{}","StockMarketSave":"{\"ECorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"ECorp\",\"symbol\":\"ECP\",\"price\":20271.272717176747,\"lastPrice\":20306.698403612987,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.46,\"b\":true,\"otlkMag\":19.076551676285288,\"otlkMagForecast\":68.85470219603734,\"cap\":358448165,\"spreadPerc\":0.5,\"shareTxForMovement\":65167,\"shareTxUntilMovement\":65167,\"totalShares\":117400000,\"maxShares\":23500000}},\"MegaCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"MegaCorp\",\"symbol\":\"MGCP\",\"price\":26825.113037223982,\"lastPrice\":26871.99208899009,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.46,\"b\":false,\"otlkMag\":19.590833784356402,\"otlkMagForecast\":30.331193351357097,\"cap\":417413017,\"spreadPerc\":0.5,\"shareTxForMovement\":47880,\"shareTxUntilMovement\":47880,\"totalShares\":98000000,\"maxShares\":19600000}},\"Blade Industries\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Blade Industries\",\"symbol\":\"BLD\",\"price\":24671.841534128464,\"lastPrice\":24599.8795495381,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.77,\"b\":true,\"otlkMag\":13.574474915764673,\"otlkMagForecast\":61.97099208505258,\"cap\":322151881,\"spreadPerc\":0.4,\"shareTxForMovement\":69609,\"shareTxUntilMovement\":69609,\"totalShares\":67000000,\"maxShares\":13400000}},\"Clarke Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Clarke Incorporated\",\"symbol\":\"CLRK\",\"price\":20012.365493110636,\"lastPrice\":19955.50594122482,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.75,\"b\":true,\"otlkMag\":11.049751035681247,\"otlkMagForecast\":62.38084267388841,\"cap\":340771573,\"spreadPerc\":0.5,\"shareTxForMovement\":79362,\"shareTxUntilMovement\":79362,\"totalShares\":78900000,\"maxShares\":15800000}},\"OmniTek Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"OmniTek Incorporated\",\"symbol\":\"OMTK\",\"price\":31029.59683738386,\"lastPrice\":31101.50619250662,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.61,\"b\":false,\"otlkMag\":11.450463298839443,\"otlkMagForecast\":37.664028620633296,\"cap\":271984737,\"spreadPerc\":0.2,\"shareTxForMovement\":34257,\"shareTxUntilMovement\":34257,\"totalShares\":54700000,\"maxShares\":10900000}},\"Four Sigma\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Four Sigma\",\"symbol\":\"FSIG\",\"price\":59074.17179419,\"lastPrice\":59312.06548982165,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.06,\"b\":false,\"otlkMag\":17.65072623296081,\"otlkMagForecast\":33.26954918262644,\"cap\":704857462,\"spreadPerc\":0.8,\"shareTxForMovement\":44595,\"shareTxUntilMovement\":44595,\"totalShares\":33900000,\"maxShares\":6800000}},\"KuaiGong International\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"KuaiGong International\",\"symbol\":\"KGI\",\"price\":18887.001065207773,\"lastPrice\":18831.912105685533,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.77,\"b\":true,\"otlkMag\":9.942032025320312,\"otlkMagForecast\":59.72295996643648,\"cap\":173623001,\"spreadPerc\":0.7,\"shareTxForMovement\":56681,\"shareTxUntilMovement\":56681,\"totalShares\":118500000,\"maxShares\":23700000}},\"Fulcrum Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Fulcrum Technologies\",\"symbol\":\"FLCM\",\"price\":43415.421010682934,\"lastPrice\":43624.89358207302,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.27,\"b\":false,\"otlkMag\":15.767864570711007,\"otlkMagForecast\":33.96536761385351,\"cap\":50771406,\"spreadPerc\":1,\"shareTxForMovement\":40439,\"shareTxUntilMovement\":40439,\"totalShares\":63200000,\"maxShares\":12600000}},\"Storm Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Storm Technologies\",\"symbol\":\"STM\",\"price\":21727.572217473156,\"lastPrice\":21658.455009620106,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.84,\"b\":false,\"otlkMag\":7.3835311836867366,\"otlkMagForecast\":43.08991669553484,\"cap\":395911724,\"spreadPerc\":0.8,\"shareTxForMovement\":66761,\"shareTxUntilMovement\":66761,\"totalShares\":57900000,\"maxShares\":11600000}},\"DefComm\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"DefComm\",\"symbol\":\"DCOMM\",\"price\":8789.04864824403,\"lastPrice\":8768.062939830903,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.63,\"b\":false,\"otlkMag\":9.997262169905527,\"otlkMagForecast\":39.93784836101575,\"cap\":54030611,\"spreadPerc\":0.8,\"shareTxForMovement\":75233,\"shareTxUntilMovement\":75233,\"totalShares\":101400000,\"maxShares\":20300000}},\"Helios Labs\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Helios Labs\",\"symbol\":\"HLS\",\"price\":13544.056077747868,\"lastPrice\":13514.277753106911,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.58,\"b\":false,\"otlkMag\":8.463598793140408,\"otlkMagForecast\":42.99000719610354,\"cap\":239112597,\"spreadPerc\":0.7,\"shareTxForMovement\":107296,\"shareTxUntilMovement\":107296,\"totalShares\":63500000,\"maxShares\":12700000}},\"VitaLife\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"VitaLife\",\"symbol\":\"VITA\",\"price\":11963.005053759536,\"lastPrice\":11928.563624172784,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.76,\"b\":true,\"otlkMag\":6.453647513220499,\"otlkMagForecast\":57.00177110354379,\"cap\":185186027,\"spreadPerc\":0.2,\"shareTxForMovement\":61035,\"shareTxUntilMovement\":61035,\"totalShares\":92300000,\"maxShares\":18500000}},\"Icarus Microsystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Icarus Microsystems\",\"symbol\":\"ICRS\",\"price\":20708.056915308927,\"lastPrice\":20759.193548714862,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.65,\"b\":false,\"otlkMag\":7.391236517627402,\"otlkMagForecast\":42.46130130630455,\"cap\":507779961,\"spreadPerc\":0.4,\"shareTxForMovement\":64015,\"shareTxUntilMovement\":64015,\"totalShares\":37900000,\"maxShares\":7600000}},\"Universal Energy\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Universal Energy\",\"symbol\":\"UNV\",\"price\":24019.90433705553,\"lastPrice\":23968.002095353764,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.57,\"b\":false,\"otlkMag\":10.004775190888807,\"otlkMagForecast\":38.38646674345137,\"cap\":160956509,\"spreadPerc\":0.4,\"shareTxForMovement\":92842,\"shareTxUntilMovement\":92842,\"totalShares\":37600000,\"maxShares\":7500000}},\"AeroCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"AeroCorp\",\"symbol\":\"AERO\",\"price\":15331.414367200681,\"lastPrice\":15367.526516500737,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.62,\"b\":false,\"otlkMag\":5.92026186718999,\"otlkMagForecast\":44.11348610904977,\"cap\":213631246,\"spreadPerc\":1,\"shareTxForMovement\":49602,\"shareTxUntilMovement\":49602,\"totalShares\":44000000,\"maxShares\":8800000}},\"Omnia Cybersystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omnia Cybersystems\",\"symbol\":\"OMN\",\"price\":7688.803143970572,\"lastPrice\":7707.789932992431,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.65,\"b\":true,\"otlkMag\":4.879935460641374,\"otlkMagForecast\":52.637357751618346,\"cap\":138278392,\"spreadPerc\":0.6,\"shareTxForMovement\":45871,\"shareTxUntilMovement\":45871,\"totalShares\":79400000,\"maxShares\":15900000}},\"Solaris Space Systems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Solaris Space Systems\",\"symbol\":\"SLRS\",\"price\":27165.77959191231,\"lastPrice\":27238.023235088087,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.7,\"b\":true,\"otlkMag\":8.396977753952395,\"otlkMagForecast\":58.663190016354804,\"cap\":215405876,\"spreadPerc\":1.1,\"shareTxForMovement\":93055,\"shareTxUntilMovement\":93055,\"totalShares\":28200000,\"maxShares\":5600000}},\"Global Pharmaceuticals\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"symbol\":\"GPH\",\"price\":11705.086171895146,\"lastPrice\":11731.322681212267,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.59,\"b\":false,\"otlkMag\":11.248156912148596,\"otlkMagForecast\":40.10074427878828,\"cap\":46197143,\"spreadPerc\":0.6,\"shareTxForMovement\":115687,\"shareTxUntilMovement\":115687,\"totalShares\":52700000,\"maxShares\":10500000}},\"Nova Medical\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Nova Medical\",\"symbol\":\"NVMD\",\"price\":23064.682037841383,\"lastPrice\":23002.63581070311,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.71,\"b\":true,\"otlkMag\":5.378169674118098,\"otlkMagForecast\":55.08539484599866,\"cap\":239802786,\"spreadPerc\":0.5,\"shareTxForMovement\":114120,\"shareTxUntilMovement\":114120,\"totalShares\":24300000,\"maxShares\":4900000}},\"Watchdog Security\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Watchdog Security\",\"symbol\":\"WDS\",\"price\":9339.013425254418,\"lastPrice\":9248.712164637904,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.57,\"b\":false,\"otlkMag\":0.06598607412860613,\"otlkMagForecast\":46.57331397216355,\"cap\":83389155,\"spreadPerc\":0.5,\"shareTxForMovement\":48781,\"shareTxUntilMovement\":48781,\"totalShares\":56500000,\"maxShares\":11300000}},\"LexoCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"LexoCorp\",\"symbol\":\"LXO\",\"price\":7765.249419034246,\"lastPrice\":7726.794660134144,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.31,\"b\":true,\"otlkMag\":5.599382447549614,\"otlkMagForecast\":55.890587497484454,\"cap\":122335921,\"spreadPerc\":1,\"shareTxForMovement\":57350,\"shareTxUntilMovement\":57350,\"totalShares\":45100000,\"maxShares\":9000000}},\"Rho Construction\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Rho Construction\",\"symbol\":\"RHOC\",\"price\":5987.239440542416,\"lastPrice\":5972.717275851872,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.64,\"b\":false,\"otlkMag\":1.630923910744965,\"otlkMagForecast\":51.07364256565815,\"cap\":45420408,\"spreadPerc\":0.3,\"shareTxForMovement\":75561,\"shareTxUntilMovement\":75561,\"totalShares\":28500000,\"maxShares\":5700000}},\"Alpha Enterprises\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Alpha Enterprises\",\"symbol\":\"APHE\",\"price\":6221.510898936221,\"lastPrice\":6178.555528362462,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.83,\"b\":false,\"otlkMag\":9.62470614544522,\"otlkMagForecast\":39.58798717472491,\"cap\":41672495,\"spreadPerc\":1.1,\"shareTxForMovement\":70589,\"shareTxUntilMovement\":70589,\"totalShares\":36400000,\"maxShares\":7300000}},\"SysCore Securities\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"SysCore Securities\",\"symbol\":\"SYSC\",\"price\":7711.437914494155,\"lastPrice\":7758.31221233174,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.6,\"b\":false,\"otlkMag\":2.376673262979447,\"otlkMagForecast\":47.899464960964316,\"cap\":137770564,\"spreadPerc\":1.1,\"shareTxForMovement\":18855,\"shareTxUntilMovement\":18855,\"totalShares\":27400000,\"maxShares\":5500000}},\"CompuTek\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"CompuTek\",\"symbol\":\"CTK\",\"price\":4723.702271134135,\"lastPrice\":4707.427889555958,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.91,\"b\":false,\"otlkMag\":5.109413959986838,\"otlkMagForecast\":46.55595285703807,\"cap\":28304328,\"spreadPerc\":0.8,\"shareTxForMovement\":100506,\"shareTxUntilMovement\":100506,\"totalShares\":45300000,\"maxShares\":9100000}},\"NetLink Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"NetLink Technologies\",\"symbol\":\"NTLK\",\"price\":3457.4458178592627,\"lastPrice\":3426.980416346974,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.34,\"b\":true,\"otlkMag\":2.4848550600010566,\"otlkMagForecast\":52.2637904433508,\"cap\":46027075,\"spreadPerc\":0.8,\"shareTxForMovement\":19279,\"shareTxUntilMovement\":19279,\"totalShares\":14200000,\"maxShares\":2800000}},\"Omega Software\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omega Software\",\"symbol\":\"OMGA\",\"price\":5220.17355201083,\"lastPrice\":5241.1953681516125,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.06,\"b\":true,\"otlkMag\":2.1566705017736325,\"otlkMagForecast\":53.49339731009358,\"cap\":31826756,\"spreadPerc\":0.7,\"shareTxForMovement\":44054,\"shareTxUntilMovement\":44054,\"totalShares\":10800000,\"maxShares\":2200000}},\"FoodNStuff\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"FoodNStuff\",\"symbol\":\"FNS\",\"price\":2590.578877526751,\"lastPrice\":2598.0586749952795,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.76,\"b\":true,\"otlkMag\":1.6504911927564985,\"otlkMagForecast\":44.20962563454288,\"cap\":12749471,\"spreadPerc\":0.7,\"shareTxForMovement\":167100,\"shareTxUntilMovement\":167100,\"totalShares\":15700000,\"maxShares\":3100000}},\"Sigma Cosmetics\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Sigma Cosmetics\",\"symbol\":\"SGC\",\"price\":3609.034703841162,\"lastPrice\":3579.3901472981865,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.18,\"b\":true,\"otlkMag\":1.6501975435859066,\"otlkMagForecast\":46.27845868683102,\"cap\":73583054,\"spreadPerc\":1.3,\"shareTxForMovement\":25574,\"shareTxUntilMovement\":25574,\"totalShares\":9100000,\"maxShares\":1800000}},\"Joe's Guns\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Joe's Guns\",\"symbol\":\"JGN\",\"price\":1420.9617881842416,\"lastPrice\":1436.7249987469202,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.92,\"b\":false,\"otlkMag\":5.4711115924540055,\"otlkMagForecast\":48.06217992414641,\"cap\":5168297,\"spreadPerc\":1.4,\"shareTxForMovement\":45358,\"shareTxUntilMovement\":45358,\"totalShares\":29300000,\"maxShares\":5900000}},\"Catalyst Ventures\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Catalyst Ventures\",\"symbol\":\"CTYS\",\"price\":1538.0096732927682,\"lastPrice\":1528.5441415677633,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.63,\"b\":true,\"otlkMag\":16.710873432937476,\"otlkMagForecast\":66.8566425307657,\"cap\":12963616,\"spreadPerc\":0.9,\"shareTxForMovement\":43685,\"shareTxUntilMovement\":43685,\"totalShares\":79100000,\"maxShares\":15800000}},\"Microdyne Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Microdyne Technologies\",\"symbol\":\"MDYN\",\"price\":22984.621020996303,\"lastPrice\":22923.65871307697,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.7,\"b\":false,\"otlkMag\":7.915836006771614,\"otlkMagForecast\":41.1713324760858,\"cap\":163624927,\"spreadPerc\":0.3,\"shareTxForMovement\":108715,\"shareTxUntilMovement\":108715,\"totalShares\":16400000,\"maxShares\":3300000}},\"Titan Laboratories\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Titan Laboratories\",\"symbol\":\"TITN\",\"price\":17033.081100088046,\"lastPrice\":16989.835353506838,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.67,\"b\":true,\"otlkMag\":10.80945389838446,\"otlkMagForecast\":62.74711124255962,\"cap\":170266463,\"spreadPerc\":0.5,\"shareTxForMovement\":154784,\"shareTxUntilMovement\":154784,\"totalShares\":26200000,\"maxShares\":5200000}},\"Orders\":{\"ECP\":[],\"MGCP\":[],\"BLD\":[],\"CLRK\":[],\"OMTK\":[],\"FSIG\":[],\"KGI\":[],\"FLCM\":[],\"STM\":[],\"DCOMM\":[],\"HLS\":[],\"VITA\":[],\"ICRS\":[],\"UNV\":[],\"AERO\":[],\"OMN\":[],\"SLRS\":[],\"GPH\":[],\"NVMD\":[],\"WDS\":[],\"LXO\":[],\"RHOC\":[],\"APHE\":[],\"SYSC\":[],\"CTK\":[],\"NTLK\":[],\"OMGA\":[],\"FNS\":[],\"SGC\":[],\"JGN\":[],\"CTYS\":[],\"MDYN\":[],\"TITN\":[]},\"storedCycles\":26,\"lastUpdate\":1656480053774,\"ticksUntilCycle\":60}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":100,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":20,\"DisableASCIIArt\":true,\"DisableHotkeys\":false,\"DisableTextEffects\":true,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":true,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxRecentScriptsCapacity\":100,\"MaxLogCapacity\":360,\"MaxPortCapacity\":64,\"MaxTerminalCapacity\":300,\"OwnedAugmentationsOrder\":0,\"PurchaseAugmentationsOrder\":2,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":true,\"SuppressFactionInvites\":true,\"SuppressMessages\":true,\"SuppressTravelConfirmation\":true,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":true,\"SuppressSavedGameToast\":false,\"SuppressAutosaveDisabledWarnings\":false,\"UseIEC60027_2\":true,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":14,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"theme\":{\"primarylight\":\"#0f0\",\"primary\":\"#0c0\",\"primarydark\":\"#090\",\"successlight\":\"#0f0\",\"success\":\"#0c0\",\"successdark\":\"#090\",\"errorlight\":\"#f00\",\"error\":\"#c00\",\"errordark\":\"#900\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":-473,\"y\":109,\"opened\":true},\"EditorTheme\":{\"base\":\"vs-dark\",\"inherit\":true,\"common\":{\"accent\":\"B5CEA8\",\"bg\":\"1E1E1E\",\"fg\":\"D4D4D4\"},\"syntax\":{\"tag\":\"569CD6\",\"entity\":\"569CD6\",\"string\":\"CE9178\",\"regexp\":\"646695\",\"markup\":\"569CD6\",\"keyword\":\"569CD6\",\"comment\":\"6A9955\",\"constant\":\"569CD6\",\"error\":\"F44747\"},\"ui\":{\"line\":\"1E1E1E\",\"panel\":{\"bg\":\"252526\",\"selected\":\"252526\",\"border\":\"1E1E1E\"},\"selection\":{\"bg\":\"ADD6FF26\"}}}}","VersionSave":"19","AllGangsSave":"","LastExportBonus":"1654629928764","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[{\"ctor\":\"ActiveFragment\",\"data\":{\"id\":0,\"x\":3,\"y\":0,\"highestCharge\":100000000,\"numCharge\":106,\"rotation\":0}},{\"ctor\":\"ActiveFragment\",\"data\":{\"id\":5,\"x\":1,\"y\":0,\"highestCharge\":100000000,\"numCharge\":106,\"rotation\":0}},{\"ctor\":\"ActiveFragment\",\"data\":{\"id\":10,\"x\":0,\"y\":0,\"highestCharge\":100000000,\"numCharge\":106,\"rotation\":3}},{\"ctor\":\"ActiveFragment\",\"data\":{\"id\":12,\"x\":3,\"y\":1,\"highestCharge\":100000000,\"numCharge\":106,\"rotation\":0}},{\"ctor\":\"ActiveFragment\",\"data\":{\"id\":14,\"x\":3,\"y\":4,\"highestCharge\":100000000,\"numCharge\":106,\"rotation\":0}},{\"ctor\":\"ActiveFragment\",\"data\":{\"id\":16,\"x\":3,\"y\":3,\"highestCharge\":100000000,\"numCharge\":105,\"rotation\":0}},{\"ctor\":\"ActiveFragment\",\"data\":{\"id\":18,\"x\":0,\"y\":2,\"highestCharge\":100000000,\"numCharge\":105,\"rotation\":0}},{\"ctor\":\"ActiveFragment\",\"data\":{\"id\":25,\"x\":2,\"y\":3,\"highestCharge\":100000000,\"numCharge\":105,\"rotation\":1}},{\"ctor\":\"ActiveFragment\",\"data\":{\"id\":21,\"x\":0,\"y\":4,\"highestCharge\":100000000,\"numCharge\":105,\"rotation\":1}}]}}"}}