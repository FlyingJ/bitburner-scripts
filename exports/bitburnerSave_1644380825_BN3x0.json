{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":230,\"hp\":10,\"max_hp\":10,\"strength\":1,\"defense\":1,\"dexterity\":1,\"agility\":1,\"charisma\":1,\"intelligence\":0,\"hacking_chance_mult\":1.307033728,\"hacking_speed_mult\":1.3462447398399997,\"hacking_money_mult\":1.307033728,\"hacking_grow_mult\":1.307033728,\"hacking_exp\":367583.28170633933,\"strength_exp\":0,\"defense_exp\":0,\"dexterity_exp\":0,\"agility_exp\":0,\"charisma_exp\":0,\"intelligence_exp\":0,\"hacking_mult\":1.3723854143999998,\"strength_mult\":1.307033728,\"defense_mult\":1.307033728,\"dexterity_mult\":1.307033728,\"agility_mult\":1.307033728,\"charisma_mult\":1.6207218227199998,\"hacking_exp_mult\":1.4377371008,\"strength_exp_mult\":1.4377371008,\"defense_exp_mult\":1.4377371008,\"dexterity_exp_mult\":1.4377371008,\"agility_exp_mult\":1.4377371008,\"charisma_exp_mult\":1.4377371008,\"company_rep_mult\":1.307033728,\"faction_rep_mult\":1.307033728,\"money\":35159.686882736314,\"city\":\"Sector-12\",\"location\":\"Alpha Enterprises\",\"jobs\":{},\"companyName\":\"\",\"currentServer\":\"home\",\"purchasedServers\":[],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":148,\"moneyGainRatePerSecond\":202.84394723969714,\"onlineTimeSeconds\":19435.40000003564,\"ram\":4,\"totalMoneyGenerated\":2654305.9474240546,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":148,\"moneyGainRatePerSecond\":202.84394723969714,\"onlineTimeSeconds\":18349.60000003169,\"ram\":4,\"totalMoneyGenerated\":2627319.7201478123,\"name\":\"hacknet-node-1\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":148,\"moneyGainRatePerSecond\":202.84394723969714,\"onlineTimeSeconds\":17580.40000002889,\"ram\":4,\"totalMoneyGenerated\":2589325.757287515,\"name\":\"hacknet-node-2\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":148,\"moneyGainRatePerSecond\":202.84394723969714,\"onlineTimeSeconds\":16701.00000002569,\"ram\":4,\"totalMoneyGenerated\":2527702.2049658657,\"name\":\"hacknet-node-3\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":148,\"moneyGainRatePerSecond\":202.84394723969714,\"onlineTimeSeconds\":15600.20000002169,\"ram\":4,\"totalMoneyGenerated\":2429892.529360963,\"name\":\"hacknet-node-4\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":148,\"moneyGainRatePerSecond\":202.84394723969714,\"onlineTimeSeconds\":13958.800000015719,\"ram\":4,\"totalMoneyGenerated\":2252673.950149214,\"name\":\"hacknet-node-5\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":148,\"moneyGainRatePerSecond\":202.84394723969714,\"onlineTimeSeconds\":11309.20000000608,\"ram\":4,\"totalMoneyGenerated\":1910882.4760272182,\"name\":\"hacknet-node-6\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":148,\"moneyGainRatePerSecond\":202.84394723969714,\"onlineTimeSeconds\":7722.799999995167,\"ram\":4,\"totalMoneyGenerated\":1368124.7992793827,\"name\":\"hacknet-node-7\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":148,\"moneyGainRatePerSecond\":202.84394723969714,\"onlineTimeSeconds\":2765.9999999996753,\"ram\":4,\"totalMoneyGenerated\":507971.8377584005,\"name\":\"hacknet-node-8\"}}],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"Netburners\",\"CyberSec\"],\"factionInvitations\":[],\"queuedAugmentations\":[],\"augmentations\":[{\"level\":1,\"name\":\"Hacknet Node Core Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"},{\"level\":2,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"Hacknet Node Kernel Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Neurotrainer I\"}],\"sourceFiles\":[{\"lvl\":3,\"n\":1},{\"lvl\":1,\"n\":2}],\"numPeopleKilled\":0,\"karma\":0,\"crime_money_mult\":1.6207218227199998,\"crime_success_mult\":1.6207218227199998,\"isWorking\":true,\"focus\":false,\"workType\":\"Working for Faction\",\"workCostMult\":3,\"workExpMult\":2,\"currentWorkFactionName\":\"CyberSec\",\"currentWorkFactionDescription\":\"carrying out hacking contracts\",\"workHackExpGainRate\":0.21566056511999998,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":0.5503056252292778,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":630.8071529760105,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":1599.966709744242,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":100,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":730000,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":72000000,\"work_money_mult\":1.307033728,\"hacknet_node_money_mult\":3.296461596428,\"hacknet_node_purchase_cost_mult\":0.5392992409199999,\"hacknet_node_ram_cost_mult\":0.7049663279999999,\"hacknet_node_core_cost_mult\":0.7049663279999999,\"hacknet_node_level_cost_mult\":0.5992213787999999,\"hasWseAccount\":false,\"hasTixApiAccess\":false,\"has4SData\":false,\"has4SDataTixApi\":false,\"gang\":null,\"corporation\":{\"ctor\":\"Corporation\",\"data\":{\"name\":\"Smoosh\",\"divisions\":[{\"ctor\":\"Industry\",\"data\":{\"name\":\"The Meats\",\"type\":\"Agriculture\",\"sciResearch\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Scientific Research\",\"qty\":5639.58797339419,\"qlt\":0,\"dmd\":0,\"dmdR\":[0,0],\"cmp\":0,\"cmpR\":[0,0],\"mv\":0,\"mku\":0,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":0,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"researched\":{\"Hi-Tech R&D Laboratory\":true,\"Bulk Purchasing\":true,\"Drones\":true},\"reqMats\":{\"Water\":0.5,\"Energy\":0.5},\"prodMats\":[\"Plants\",\"Food\"],\"products\":{},\"makesProducts\":false,\"awareness\":155.5651820925673,\"popularity\":36.794709289623945,\"startingCost\":40000000000,\"reFac\":0.72,\"sciFac\":0.5,\"hwFac\":0.2,\"robFac\":0.3,\"aiFac\":0.3,\"advFac\":0.04,\"prodMult\":25.59959124962409,\"upgrades\":[10,5],\"state\":\"PURCHASE\",\"newInd\":false,\"offices\":{\"Aevum\":{\"ctor\":\"OfficeSpace\",\"data\":{\"minEne\":0,\"maxEne\":100,\"minHap\":0,\"maxHap\":100,\"maxMor\":100,\"employees\":[{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"LYwnqwQ\",\"mor\":100,\"hap\":99.99759650454872,\"ene\":99.99759650454872,\"int\":87,\"cha\":78,\"exp\":71.90400000000022,\"cre\":75,\"eff\":98,\"sal\":1212,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"ToSqxiB\",\"mor\":100,\"hap\":99.99861253654252,\"ene\":99.99861253654252,\"int\":76,\"cha\":60,\"exp\":72.90400000000022,\"cre\":100,\"eff\":79,\"sal\":1146,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"kY36Rlz\",\"mor\":100,\"hap\":99.99915660912326,\"ene\":99.99915660912326,\"int\":74,\"cha\":83,\"exp\":74.90400000000022,\"cre\":52,\"eff\":91,\"sal\":1107,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"MP1Gj1h\",\"mor\":100,\"hap\":99.99949124500183,\"ene\":99.99949124500183,\"int\":62,\"cha\":53,\"exp\":67.40200000000013,\"cre\":87,\"eff\":78,\"sal\":1032,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"282ouUh\",\"mor\":100,\"hap\":99.99861227983817,\"ene\":99.99861227983817,\"int\":97,\"cha\":90,\"exp\":99.40200000000013,\"cre\":67,\"eff\":89,\"sal\":1317,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"NMr3f2L\",\"mor\":100,\"hap\":99.99988393359953,\"ene\":99.99988393359953,\"int\":82,\"cha\":88,\"exp\":80.40200000000013,\"cre\":75,\"eff\":62,\"sal\":1152,\"loc\":\"\",\"pos\":\"Operations\"}}],\"employeeProd\":{\"Operations\":752.3857596060062,\"Engineer\":406.9591354007173,\"Business\":190.12672401255963,\"Management\":369.99823520224027,\"Research & Development\":516.4072671261243,\"total\":2235.8771213476475,\"Unassigned\":0},\"loc\":\"Aevum\",\"size\":6}},\"Chongqing\":0,\"Sector-12\":{\"ctor\":\"OfficeSpace\",\"data\":{\"minEne\":0,\"maxEne\":100,\"minHap\":0,\"maxHap\":100,\"maxMor\":100,\"employees\":[{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"cov22Co\",\"mor\":100,\"hap\":99.99810342628516,\"ene\":99.99810342628516,\"int\":75,\"cha\":51,\"exp\":172.36899999979383,\"cre\":99,\"eff\":86,\"sal\":1134,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"RxnBJzY\",\"mor\":100,\"hap\":99.99711397418868,\"ene\":99.99711397418868,\"int\":72,\"cha\":87,\"exp\":198.36599999967066,\"cre\":81,\"eff\":63,\"sal\":1188,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"0aJBEBB\",\"mor\":100,\"hap\":99.99866520365694,\"ene\":99.99866520365694,\"int\":89,\"cha\":99,\"exp\":178.36599999976542,\"cre\":86,\"eff\":56,\"sal\":1209,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"A2xx9Gu\",\"mor\":100,\"hap\":99.99707215636786,\"ene\":99.99707215636786,\"int\":93,\"cha\":67,\"exp\":160.88299999984753,\"cre\":99,\"eff\":94,\"sal\":1281,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"6NMrtHa\",\"mor\":100,\"hap\":99.99835278608474,\"ene\":99.99835278608474,\"int\":96,\"cha\":100,\"exp\":173.88299999978594,\"cre\":74,\"eff\":99,\"sal\":1368,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"4zZo2mY\",\"mor\":100,\"hap\":99.99993708469424,\"ene\":99.99993708469424,\"int\":78,\"cha\":83.00468030933831,\"exp\":185.8876803090674,\"cre\":93,\"eff\":93.00468030933831,\"sal\":1338,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"nPG5WVO\",\"mor\":100,\"hap\":99.99848662960237,\"ene\":99.99848662960237,\"int\":78,\"cha\":100.00703772840237,\"exp\":152.89003772828775,\"cre\":76,\"eff\":65.00703772840237,\"sal\":1155,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"83BE3cB\",\"mor\":100,\"hap\":99.99890575770932,\"ene\":99.99890575770932,\"int\":73,\"cha\":58,\"exp\":136.8829999999612,\"cre\":90,\"eff\":53,\"sal\":972,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"PVffQhY\",\"mor\":100,\"hap\":99.99866458727037,\"ene\":99.99866458727037,\"int\":84,\"cha\":58,\"exp\":165.88299999982385,\"cre\":84,\"eff\":66,\"sal\":1113,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"UNSr4lx\",\"mor\":100,\"hap\":99.99847600273306,\"ene\":99.99847600273306,\"int\":67,\"cha\":73,\"exp\":138.87999999995176,\"cre\":87,\"eff\":70,\"sal\":1047,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"7j4CWJ6\",\"mor\":100,\"hap\":99.99700375211938,\"ene\":99.99700375211938,\"int\":59,\"cha\":99,\"exp\":144.87999999992334,\"cre\":90,\"eff\":54,\"sal\":1080,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"Fc6CT0z\",\"mor\":100,\"hap\":99.9985196256848,\"ene\":99.9985196256848,\"int\":92,\"cha\":58,\"exp\":168.87999999980966,\"cre\":64,\"eff\":92,\"sal\":1164,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"rZIzcEI\",\"mor\":100,\"hap\":99.9985079614952,\"ene\":99.9985079614952,\"int\":81,\"cha\":87,\"exp\":175.8799999997765,\"cre\":88,\"eff\":51,\"sal\":1188,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"R2JpyMc\",\"mor\":100,\"hap\":99.99896000682746,\"ene\":99.99896000682746,\"int\":79,\"cha\":66,\"exp\":144.87999999992334,\"cre\":60,\"eff\":96,\"sal\":1077,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"1MmfYvK\",\"mor\":100,\"hap\":99.99949016470734,\"ene\":99.99949016470734,\"int\":93,\"cha\":55,\"exp\":169.73599999980559,\"cre\":58,\"eff\":69,\"sal\":1074,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"s1QsBDO\",\"mor\":100,\"hap\":99.99828705528317,\"ene\":99.99828705528317,\"int\":57,\"cha\":82,\"exp\":140.726999999943,\"cre\":77,\"eff\":81,\"sal\":1053,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"yA8i7IV\",\"mor\":100,\"hap\":99.99979727554076,\"ene\":99.99979727554076,\"int\":81,\"cha\":97,\"exp\":151.7269999998909,\"cre\":69,\"eff\":73,\"sal\":1155,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"goIUsRi\",\"mor\":100,\"hap\":99.99947355331881,\"ene\":99.99947355331881,\"int\":99,\"cha\":66,\"exp\":152.47999999988724,\"cre\":63,\"eff\":79,\"sal\":1125,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"GZNy77C\",\"mor\":100,\"hap\":99.99912811253728,\"ene\":99.99912811253728,\"int\":74,\"cha\":82,\"exp\":106.89100000000106,\"cre\":75,\"eff\":89,\"sal\":1197,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"840JeeA\",\"mor\":100,\"hap\":99.99801033893868,\"ene\":99.99801033893868,\"int\":91,\"cha\":76,\"exp\":120.89100000000106,\"cre\":98,\"eff\":85,\"sal\":1329,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"OWQlsYB\",\"mor\":100,\"hap\":99.99925889904144,\"ene\":99.99925889904144,\"int\":87,\"cha\":53,\"exp\":119.88800000000106,\"cre\":76,\"eff\":96,\"sal\":1212,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"pJ3YAb8\",\"mor\":100,\"hap\":99.9976967450822,\"ene\":99.9976967450822,\"int\":79,\"cha\":53,\"exp\":104.88800000000106,\"cre\":53,\"eff\":93,\"sal\":1065,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"z2R8YoI\",\"mor\":100,\"hap\":99.99782075713244,\"ene\":99.99782075713244,\"int\":53,\"cha\":53,\"exp\":114.88800000000106,\"cre\":56,\"eff\":56,\"sal\":915,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"USOh5c3\",\"mor\":100,\"hap\":99.99837618947748,\"ene\":99.99837618947748,\"int\":59,\"cha\":56,\"exp\":125.88500000000106,\"cre\":58,\"eff\":95,\"sal\":1098,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"MMGG8pA\",\"mor\":100,\"hap\":99.9982543530326,\"ene\":99.9982543530326,\"int\":76,\"cha\":68,\"exp\":100.88500000000106,\"cre\":88,\"eff\":54,\"sal\":1077,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"1q0Ozst\",\"mor\":100,\"hap\":99.99917196378127,\"ene\":99.99917196378127,\"int\":77,\"cha\":77,\"exp\":78.88500000000106,\"cre\":82,\"eff\":85,\"sal\":1116,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"liBITSh\",\"mor\":100,\"hap\":99.99787124850755,\"ene\":99.99787124850755,\"int\":63,\"cha\":81,\"exp\":108.88500000000106,\"cre\":94,\"eff\":68,\"sal\":1161,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"PgntLI3\",\"mor\":100,\"hap\":99.99872881449367,\"ene\":99.99872881449367,\"int\":78,\"cha\":67,\"exp\":83.88500000000106,\"cre\":51,\"eff\":98,\"sal\":1050,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"HK7CAcX\",\"mor\":100,\"hap\":99.99976672250763,\"ene\":99.99976672250763,\"int\":85,\"cha\":51,\"exp\":121.88500000000106,\"cre\":100,\"eff\":94,\"sal\":1272,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"r6DHUSC\",\"mor\":100,\"hap\":99.9973645707689,\"ene\":99.9973645707689,\"int\":59,\"cha\":83,\"exp\":91.88500000000106,\"cre\":79,\"eff\":97,\"sal\":1146,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"I1e5SGv\",\"mor\":100,\"hap\":99.99755844048288,\"ene\":99.99755844048288,\"int\":64,\"cha\":58,\"exp\":118.88500000000106,\"cre\":93,\"eff\":96,\"sal\":1206,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"X7sGxCl\",\"mor\":100,\"hap\":99.99753799678261,\"ene\":99.99753799678261,\"int\":55,\"cha\":85,\"exp\":82.88500000000106,\"cre\":86,\"eff\":80,\"sal\":1083,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"YHYGKyu\",\"mor\":100,\"hap\":99.99755443877277,\"ene\":99.99755443877277,\"int\":79,\"cha\":67,\"exp\":122.88500000000106,\"cre\":60,\"eff\":80,\"sal\":1143,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"SfqXXvX\",\"mor\":100,\"hap\":99.99876283412767,\"ene\":99.99876283412767,\"int\":94,\"cha\":50,\"exp\":105.34500000000058,\"cre\":100,\"eff\":66,\"sal\":1200,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"RI5OZI3\",\"mor\":100,\"hap\":99.99799998991334,\"ene\":99.99799998991334,\"int\":51,\"cha\":62,\"exp\":77.34500000000058,\"cre\":68,\"eff\":72,\"sal\":945,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"D9KBq6p\",\"mor\":100,\"hap\":99.99765370812962,\"ene\":99.99765370812962,\"int\":86,\"cha\":72,\"exp\":93.34500000000058,\"cre\":50,\"eff\":53,\"sal\":1017,\"loc\":\"\",\"pos\":\"Operations\"}}],\"employeeProd\":{\"Operations\":8432.668839882026,\"Engineer\":1665.882193453378,\"Business\":835.1628415834659,\"Management\":1518.0065000730613,\"Research & Development\":2735.7212875276173,\"total\":15187.441662519548,\"Unassigned\":0,\"Training\":0},\"loc\":\"Sector-12\",\"size\":36}},\"New Tokyo\":0,\"Ishima\":0,\"Volhaven\":0},\"lastCycleRevenue\":830253.0546847287,\"lastCycleExpenses\":224986.59755967412,\"thisCycleRevenue\":0,\"thisCycleExpenses\":2249461.8671904597,\"warehouses\":{\"Aevum\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":1,\"sizeUsed\":9.604563274192063,\"smartSupplyEnabled\":true,\"smartSupplyUseLeftovers\":{\"Water\":true,\"Energy\":true,\"Food\":true,\"Plants\":true,\"Metal\":true,\"Hardware\":true,\"Chemicals\":true,\"Drugs\":true,\"Robots\":true,\"AICores\":true,\"RealEstate\":true},\"smartSupplyStore\":32.01521091397355,\"loc\":\"Aevum\",\"size\":110.00000000000001,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Water\",\"qty\":160.07605456986772,\"qlt\":0,\"dmd\":75.32218964923965,\"dmdR\":[65,85],\"cmp\":49.51046706598677,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":16.007605456986774,\"sll\":0,\"prd\":-16.007605456986774,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1503.4411809037979,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Energy\",\"qty\":160.07605456986772,\"qlt\":0,\"dmd\":90.22601848309412,\"dmdR\":[80,99],\"cmp\":80.30020533285622,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":16.007605456986774,\"sll\":0,\"prd\":-16.007605456986774,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1996.081966756749,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Food\",\"qty\":0,\"qlt\":79.61000232311777,\"dmd\":77.78211214512548,\"dmdR\":[70,90],\"cmp\":64.00254112558622,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":32.01521091397355,\"prd\":32.01521091397355,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":4820.955680978833,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Plants\",\"qty\":0,\"qlt\":79.61000232311777,\"dmd\":67.07367278629043,\"dmdR\":[20,90],\"cmp\":50.84187636948413,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":32.01521091397355,\"prd\":32.01521091397355,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2964.345853211935,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Metal\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Hardware\",\"qty\":0,\"qlt\":0,\"dmd\":85.2431332153827,\"dmdR\":[80,90],\"cmp\":80.19435825097257,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":7952.217456074612,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Chemicals\",\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Drugs\",\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Robots\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[80,9],\"cmp\":80,\"cmpR\":[80,9],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":74181.54725501421,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"AICores\":{\"ctor\":\"Material\",\"data\":{\"name\":\"AI Cores\",\"qty\":0,\"qlt\":0,\"dmd\":97.0580295035285,\"dmdR\":[80,99],\"cmp\":80,\"cmpR\":[80,9],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":15227.195743132235,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"RealEstate\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Real Estate\",\"qty\":0,\"qlt\":0,\"dmd\":50.61469290710049,\"dmdR\":[5,99],\"cmp\":50.84684678440502,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":78680.039133775,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}}}}},\"Chongqing\":0,\"Sector-12\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":24,\"sizeUsed\":1125.2632589913196,\"smartSupplyEnabled\":true,\"smartSupplyUseLeftovers\":{\"Water\":true,\"Energy\":true,\"Food\":true,\"Plants\":true,\"Metal\":true,\"Hardware\":true,\"Chemicals\":true,\"Drugs\":true,\"Robots\":true,\"AICores\":true,\"RealEstate\":true},\"smartSupplyStore\":67.89848554911124,\"loc\":\"Sector-12\",\"size\":2640,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Water\",\"qty\":339.4924277455562,\"qlt\":0,\"dmd\":74.74534828369138,\"dmdR\":[65,85],\"cmp\":50.92809798138165,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":33.94924277455562,\"sll\":0,\"prd\":-33.94908913189671,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1384.539425230236,\"sCost\":\"1.2*MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Energy\",\"qty\":339.4924277455562,\"qlt\":0,\"dmd\":98.25047722611019,\"dmdR\":[80,99],\"cmp\":66.23650883965723,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":33.94924277455562,\"sll\":0,\"prd\":-33.94908913189671,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2179.846970873571,\"sCost\":\"1.2*MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Food\",\"qty\":0,\"qlt\":93.59900757762695,\"dmd\":74.1632229206191,\"dmdR\":[70,90],\"cmp\":84.12409317981219,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":67.89817826379343,\"prd\":67.89817826379343,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":5256.384902974313,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Plants\",\"qty\":0,\"qlt\":93.59900757762695,\"dmd\":47.24238282888244,\"dmdR\":[20,90],\"cmp\":34.46925020646898,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":67.89817826379343,\"prd\":67.89817826379343,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":3335.3045478595677,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Metal\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Hardware\",\"qty\":0,\"qlt\":0,\"dmd\":83.66049096753312,\"dmdR\":[80,90],\"cmp\":79.22401640232611,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":4469.2572551585245,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Chemicals\",\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Drugs\",\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Robots\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[80,9],\"cmp\":80,\"cmpR\":[80,9],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":88911.88782950782,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"AICores\":{\"ctor\":\"Material\",\"data\":{\"name\":\"AI Cores\",\"qty\":0,\"qlt\":0,\"dmd\":96.7299542078531,\"dmdR\":[80,99],\"cmp\":9,\"cmpR\":[80,9],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":13556.239060683456,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"RealEstate\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Real Estate\",\"qty\":220978.74266531726,\"qlt\":0,\"dmd\":45.185092891547896,\"dmdR\":[5,99],\"cmp\":27.343627670023714,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":55768.83539782609,\"sCost\":\"0.65*MP\",\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}}}}},\"New Tokyo\":0,\"Ishima\":0,\"Volhaven\":0}}}],\"funds\":1886849938.6412866,\"revenue\":830253.0546847287,\"expenses\":224986.59755967412,\"fundingRound\":2,\"public\":true,\"totalShares\":1500000000,\"numShares\":50000,\"shareSalesUntilPriceUpdate\":1000000,\"shareSaleCooldown\":0,\"issueNewSharesCooldown\":0,\"dividendPercentage\":0,\"dividendTaxPercentage\":50,\"issuedShares\":549950000,\"sharePrice\":18.50045122787186,\"storedCycles\":8,\"state\":{\"ctor\":\"CorporationState\",\"data\":{\"state\":2}},\"unlockUpgrades\":[0,1,0,0,0,0,0,0,0],\"upgrades\":[1,1,1,0,7,7,7,7,10,0],\"upgradeMultipliers\":[1.03,1.1,1.001,1,1.7000000000000002,1.7000000000000002,1.7000000000000002,1.7000000000000002,1.1,1]}},\"bladeburner\":null,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":3,\"lastUpdate\":1644380824614,\"totalPlaytime\":3209630800,\"playtimeSinceLastAug\":19457600,\"playtimeSinceLastBitnode\":430058400,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":4304294,\"hacknet\":18868199.222386766,\"hacknet_expenses\":-23138333.535515215,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":34159.68688273171,\"work\":0,\"servers\":0,\"other\":0,\"augmentations\":0}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":-796227.3801494719,\"crime\":0,\"gang\":0,\"hacking\":797489781.9700271,\"hacknet\":768774197.9932747,\"hacknet_expenses\":-671895105.4152902,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":37002545.7777672,\"work\":6543705.168013551,\"servers\":-213942971.58546758,\"other\":-64600000,\"augmentations\":-584570835}},\"scriptProdSinceLastAug\":4304294,\"exploits\":[\"N00dles\"],\"achievements\":[{\"ID\":\"CYBERSEC\",\"unlockedOn\":1642198554797},{\"ID\":\"NITESEC\",\"unlockedOn\":1642198554810},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1642198554813},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1642198554816},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1642198554819},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1642198554823},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1642198554826},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1642198554830},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1642198554834},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1642198554837},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1642198554840},{\"ID\":\"NS2\",\"unlockedOn\":1642198554843},{\"ID\":\"FROZE\",\"unlockedOn\":1642198554847},{\"ID\":\"SCRIPTS_30\",\"unlockedOn\":1642198554849},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1642198554853},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1642198554855},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1642198554858},{\"ID\":\"DONATION\",\"unlockedOn\":1642198554862},{\"ID\":\"TOR\",\"unlockedOn\":1642198554865},{\"ID\":\"4S\",\"unlockedOn\":1642198554867},{\"ID\":\"DAEDALUS\",\"unlockedOn\":1642198794816},{\"ID\":\"SF1.1\",\"unlockedOn\":1642199274811},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1642199274820},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1642738642559},{\"ID\":\"TRAVEL\",\"unlockedOn\":1642962148551},{\"ID\":\"N00DLES\",\"unlockedOn\":1643223570990},{\"ID\":\"DISCOUNT\",\"unlockedOn\":1643342251031},{\"ID\":\"WORKOUT\",\"unlockedOn\":1643342310977},{\"ID\":\"HOSPITALIZED\",\"unlockedOn\":1643343810986},{\"ID\":\"GANG\",\"unlockedOn\":1643492387763},{\"ID\":\"FULL_GANG\",\"unlockedOn\":1643637407795},{\"ID\":\"GANG_MEMBER_POWER\",\"unlockedOn\":1643638067757},{\"ID\":\"REPUTATION_10M\",\"unlockedOn\":1643783614558},{\"ID\":\"SF2.1\",\"unlockedOn\":1643950774572},{\"ID\":\"CORPORATION\",\"unlockedOn\":1644029434551}],\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"55.5.4.2\",\"isConnectedTo\":true,\"maxRam\":256,\"messages\":[\"hackers-starting-handbook.lit\",\"corporation-management-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"b1t_flum3.exe\",\"fl1ght.exe\",\"BruteSSH.exe\",\"FTPCrack.exe\"],\"ramUsed\":230.49999999999997,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/scripts/deployHacknet.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":19435.41000003564,\"pid\":6,\"ramUsage\":9.7,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/deployHacknet.js\",\"url\":\"blob:file:///3c0bf006-3d69-474f-a720-30744b0f50f6\",\"moduleSequenceNumber\":55779}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",92],\"dataMap\":{\"hong-fang-tea\":[3956092,1564,15456,3036]},\"filename\":\"/scripts/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":189926.64882140135,\"onlineMoneyMade\":3956092,\"onlineRunningTime\":10048.010000001494,\"pid\":37,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":92,\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///55ddb508-c060-4159-8388-fceb70ab7c90\",\"moduleSequenceNumber\":55781}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tprint(ns.stock.getSymbols());\\n    ns.tprint(ns.stock.getSaleGain('CTYS', ns.stock.getMaxShares('CTYS'), 'long'));\\n\\tns.tprint(ns.stock.getPosition('CTYS'));\\n\\tns.tprint(ns.stock.getForecast('MGCP'));\\n}\",\"filename\":\"stock.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"scratch.js\",\"url\":\"blob:file:///2ce21e0e-2909-4b49-8ab4-f3e84d7cf450\"}],\"dependents\":[],\"ramUsage\":12.1,\"server\":\"home\",\"_hash\":\"2fbbc09ff007be6d9fbe34409d7e5cc31981864e756d8a18cf26fa4bc626a913\",\"moduleSequenceNumber\":80198,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getSaleGain\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getMaxShares\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getForecast\",\"cost\":2.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const flags = ns.flags([\\n        ['refreshrate', 200],\\n        ['help', false],\\n    ])\\n    if (flags._.length === 0 || flags.help) {\\n        ns.tprint(\\\"This script helps visualize the money and security of a server.\\\");\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`);\\n        ns.tprint(\\\"Example:\\\");\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\n        return;\\n    }\\n    ns.tail();\\n    ns.disableLog('ALL');\\n    while (true) {\\n        const server = flags._[0];\\n        let money = ns.getServerMoneyAvailable(server);\\n        if (money === 0) money = 1;\\n        const maxMoney = ns.getServerMaxMoney(server);\\n        const minSec = ns.getServerMinSecurityLevel(server);\\n        const sec = ns.getServerSecurityLevel(server);\\n        ns.clearLog(server);\\n        ns.print(`${server}:`);\\n        ns.print(` $_______: ${ns.nFormat(money, \\\"$0.000a\\\")} / ${ns.nFormat(maxMoney, \\\"$0.000a\\\")} (${(money / maxMoney * 100).toFixed(2)}%)`);\\n        ns.print(` security: +${(sec - minSec).toFixed(2)}`);\\n        ns.print(` hack____: ${ns.tFormat(ns.getHackTime(server))} (t=${Math.ceil(ns.hackAnalyzeThreads(server, money))})`);\\n        ns.print(` grow____: ${ns.tFormat(ns.getGrowTime(server))} (t=${Math.ceil(ns.growthAnalyze(server, maxMoney / money))})`);\\n        ns.print(` weaken__: ${ns.tFormat(ns.getWeakenTime(server))} (t=${Math.ceil((sec - minSec) * 20)})`);\\n        await ns.sleep(flags.refreshrate);\\n    }\\n}\\n\\nexport function autocomplete(data, args) {\\n    return data.servers;\\n}\",\"filename\":\"monitor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"monitor.js\",\"url\":\"blob:file:///ca57a0d6-3712-422e-a711-4ec2b72c350b\"}],\"dependents\":[],\"ramUsage\":4.15,\"server\":\"home\",\"_hash\":\"14502f69bd92ef2e92e0a3ee95650ffec6e69bb605906fe6799d7804c7fe7659\",\"moduleSequenceNumber\":80199,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function scan(ns, parent, server, list) {\\n\\tconst children = ns.scan(server);\\n\\tfor (let child of children) {\\n\\t\\tif (parent == child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tlist.push(child);\\n\\n\\t\\tscan(ns, server, child, list);\\n\\t}\\n}\\n\\nexport function list_servers(ns) {\\n\\tconst list = [];\\n\\tscan(ns, '', 'home', list);\\n\\treturn list;\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst args = ns.flags([[\\\"help\\\", false]]);\\n\\tif (args.help) {\\n\\t\\tns.tprint(\\\"This script lists all servers on which you can run scripts.\\\");\\n\\t\\tns.tprint(`Usage: run ${ns.getScriptName()}`);\\n\\t\\tns.tprint(\\\"Example:\\\");\\n\\t\\tns.tprint(`> run ${ns.getScriptName()}`);\\n\\t\\treturn;\\n\\t}\\n\\n\\tconst servers = list_servers(ns).filter(s => ns.hasRootAccess(s)).concat(['home']);\\n\\tfor (const server of servers) {\\n\\t\\tconst used = ns.getServerUsedRam(server);\\n\\t\\tconst max = ns.getServerMaxRam(server);\\n\\t\\tns.tprint(`${server} is opened. ${used} GB / ${max} GB (${(100 * used / max).toFixed(2)}%)`)\\n\\t}\\n}\",\"filename\":\"opened_servers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"opened_servers.js\",\"url\":\"blob:file:///f67e15db-2011-47aa-bea4-4619a6d0afd0\"}],\"dependents\":[],\"ramUsage\":1.95,\"server\":\"home\",\"_hash\":\"b7965970662b0f1c8745ebfefa076001d667b85c7fb7391bdbbf6f5b470f8910\",\"moduleSequenceNumber\":80200,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function scan(ns, parent, server, list) {\\n\\tconst CHILDREN = ns.scan(server);\\n\\tfor (let child of CHILDREN) {\\n\\t\\tif (parent == child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tlist.push(child);\\n\\n\\t\\tscan(ns, server, child, list);\\n\\t}\\n}\\n\\nexport function list_servers(ns) {\\n\\tconst list = [];\\n\\tscan(ns, '', 'home', list);\\n\\treturn list;\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst args = ns.flags([[\\\"help\\\", false]]);\\n\\tif (args.help) {\\n\\t\\tns.tprint(\\\"This script lists all servers on which you can run scripts.\\\");\\n\\t\\tns.tprint(`Usage: run ${ns.getScriptName()}`);\\n\\t\\tns.tprint(\\\"Example:\\\");\\n\\t\\tns.tprint(`> run ${ns.getScriptName()}`);\\n\\t\\treturn;\\n\\t}\\n\\n\\tconst SERVERS = list_servers(ns).filter(s => ns.hasRootAccess(s)).concat(['home']);\\n\\tfor (const SERVER of SERVERS) {\\n\\t\\tconst USED = ns.getServerUsedRam(SERVER);\\n\\t\\tconst MAXRAM = ns.getServerMaxRam(SERVER);\\n\\t\\tns.tprint(SERVER + \\\":open:\\\" + (MAXRAM - USED));\\n\\t}\\n}\",\"filename\":\"known-servers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"known-servers.js\",\"url\":\"blob:file:///a1b4ad44-9bfd-4719-9e1f-109bcf8d879a\"}],\"dependents\":[],\"ramUsage\":1.95,\"server\":\"home\",\"_hash\":\"ff9ee47b362bb44d4412104f4f78885ba1acd748d86fe010c149155bbca45423\",\"moduleSequenceNumber\":80201,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function getPortToolCount(ns) {\\n\\tconst TOOLS = [\\\"BruteSSH.exe\\\", \\\"FTPCrack.exe\\\", \\\"relaySMTP.exe\\\", \\\"HTTPWorm.exe\\\", \\\"SQLInject.exe\\\"];\\n\\tlet count = 0;\\n\\tfor (let tool of TOOLS) {\\n\\t\\tif (ns.fileExists(tool)) {\\n\\t\\t\\tns.tprint(tool + \\\" has been found\\\");\\n\\t\\t\\tcount += 1;\\n\\t\\t} else {\\n\\t\\t\\tns.tprint(tool + \\\" not found\\\");\\n\\t\\t}\\n\\t}\\n\\n\\tns.tprint(\\\"Found \\\" + count + \\\" port opening tools\\\");\\n\\treturn count;\\n}\\n\\nexport function canOpen(ns, target) {\\n\\tif (getPortToolCount(ns) >= ns.getServerNumPortsRequired(target)) {\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\treturn false;\\n\\t}\\n}\\n\\nexport function openPorts(ns, server) {\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\")) {\\n\\t\\tns.brutessh(server);\\n\\t}\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\")) {\\n\\t\\tns.ftpcrack(server);\\n\\t}\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\")) {\\n\\t\\tns.relaysmtp(server);\\n\\t}\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\")) {\\n\\t\\tns.httpworm(server);\\n\\t}\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\")) {\\n\\t\\tns.sqlinject(server);\\n\\t}\\n\\treturn;\\n}\\n\\nexport function openServer(ns, target) {\\n\\tif (canOpen(ns, target)) {\\n\\t\\topenPorts(ns, target);\\n\\t\\tns.nuke(target);\\n\\t} else {\\n\\t\\tns.tprint(\\\"No can open \\\" + target);\\n\\t}\\n\\treturn;\\n}\\n\\n/**\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n\\tconst args = ns.flags([[\\\"help\\\", false]]);\\n\\tif (args.help) {\\n\\t\\tns.tprint(\\\"This script attempts to root a target server.\\\");\\n\\t\\tns.tprint(`Usage: run ${ns.getScriptName()}`);\\n\\t\\tns.tprint(\\\"Example:\\\");\\n\\t\\tns.tprint(`> run ${ns.getScriptName()}`);\\n\\t\\treturn;\\n\\t}\\n\\n\\tconst target = ns.args[0];\\n\\topenServer(ns, target);\\n}\",\"filename\":\"open.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"open.js\",\"url\":\"blob:file:///0e5fa0c9-2ca6-4749-8e43-17e3066b223a\"}],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"home\",\"_hash\":\"18c7464b7aac5841f5b2acd5e750cac9f1a51745ba9fb6d63123c9ac0aae4be8\",\"moduleSequenceNumber\":80202,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet list = [3, 8, 10, 7, -1];\\n\\tns.tprint(list.sort((a, b) => a - b));\\n\\n\\tlet nodes = [\\n\\t\\t{node: 0, upgrade: 'level', cost: 1e6},\\n\\t\\t{node: 9, upgrade: 'core', cost: 1e12},\\n\\t\\t{node: 7, upgrade: 'core', cost: 1e11},\\n\\t\\t{node: 5, upgrade: 'ram', cost: 1e8}\\n\\t];\\n\\tns.tprint(nodes);\\n\\tns.tprint(nodes.sort((a, b) => a.cost - b.cost));\\n\\tns.tprint(nodes.sort((a, b) => a.cost - b.cost)[0]);\\n}\",\"filename\":\"sort.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"sort.js\",\"url\":\"blob:file:///4bc88e92-88de-4469-8cea-f88f1446fd37\",\"moduleSequenceNumber\":444969}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"_hash\":\"06fd7ee7cdc1784dda61c05919643778ee89f755c47b9d31bbbc24774305fbda\",\"moduleSequenceNumber\":80203,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"let config = {\\n    folder: 'scripts',\\n    rootUrl: 'https://raw.githubusercontent.com/FlyingJ/bitburner-scripts/main/',\\n    serverPrefix: 'j4ys3rv',\\n};\\n/*\\n* This will import all files listed in importFiles.\\n*/\\nexport async function main(ns) {\\n    let filesImported = await importFiles(ns);\\n    ns.tprint('='.repeat(20));\\n    if (filesImported) {\\n        ns.tprint('Hey! Thank you for downloading the BitBurner Scripts.');\\n        ns.tprint(`You've installed these in the ${getFolder()} directory.`);\\n        ns.tprint(\\n            `A good place to start is running \\\\`run /${getFolder()}/hax.js\\\\``\\n        );\\n    } else {\\n        ns.tprint(\\n            'You had some issues downloading files, please reach out to the repo maintainer or check your config.'\\n        );\\n    }\\n}\\n\\nasync function importFiles(ns) {\\n    let files = [\\n        'autoHack.js',\\n        'autoRemoteHack.js',\\n        'buyHacknet.js',\\n        'dashboard.js',\\n        'deployNodes.js',\\n        'deployUpgrades.js',\\n        'hack.js',\\n        'hax.js',\\n        'homeHack.js',\\n        'purchaseServers.js',\\n        'remoteHack.js',\\n        'serverStatus.js',\\n    ];\\n    let filesImported = true;\\n    for (let file of files) {\\n        let remoteFileName = `${getRootUrl()}scripts/${file}`;\\n        let result = await ns.wget(remoteFileName, `/${getFolder()}/${file}`);\\n        filesImported = filesImported && result;\\n        ns.tprint(`File: ${file}: ${result ? '✔️' : '❌'}`);\\n    }\\n    return filesImported;\\n}\\n\\nexport function getFolder() { return config.folder; }\\nexport function getRootUrl() { return config.rootUrl; }\\nexport function getServerPrefix() { return config.serverPrefix; }\\n\\nexport function getHackScript() { return `/${getFolder()}/hack.js`; }\\nexport function getHacknetUpgradeScript() { return `/${getFolder()}/deployUpgrades.js`; }\",\"filename\":\"import.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"import.js\",\"url\":\"blob:file:///bb1cacbe-b812-425d-9a49-7bf370681177\",\"moduleSequenceNumber\":449237}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"_hash\":\"8d43af52fa51e8fa96cbd29b0dfcf93a8126750a195cd7d276c68a6a808a4950\",\"moduleSequenceNumber\":80204,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getHackScript, getServerPrefix } from 'import.js';\\nlet hackablePorts;\\n\\n/* Searches for servers that are hackable,\\n * cracks them if you don't have root access,\\n * installs a hack script, and instructs them to\\n * HACK THEMSELVES\\n */\\nexport const main = async function (ns) {\\n    findHackablePorts(ns);\\n    await findServer(ns, 'home', 'home', hackServer);\\n}\\n\\nasync function findServer(ns, startServer, targetServer, func) {\\n    let servers = ns.scan(targetServer, true).filter((server) => server !== startServer && !server.includes(getServerPrefix()));\\n    for (const server of servers) {\\n        const success = await func.call(this, ns, server);\\n        if (success) {\\n            await findServer(ns, targetServer, server, func);\\n        }\\n    }\\n}\\n\\nasync function hackServer(ns, server) {\\n    if (!crackServer(ns, server)) {\\n        return false;\\n    }\\n    ns.killall(server);\\n    let scriptRam = ns.getScriptRam(getHackScript());\\n    let serverRam = ns.getServerMaxRam(server);\\n    let threads = Math.floor(serverRam / scriptRam);\\n    await ns.scp(getHackScript(), server);\\n    if (threads > 0) {\\n        ns.print(`Starting ${threads} processes on ${server}`);\\n        ns.exec(getHackScript(), server, threads, server, threads);\\n    }\\n    return true;\\n}\\n\\nfunction crackServer(ns, server) {\\n    if (ns.hasRootAccess(server)) {\\n        return true;\\n    }\\n\\n    if (ns.fileExists('BruteSSH.exe')) {\\n        ns.brutessh(server);\\n    }\\n    if (ns.fileExists('FTPCrack.exe')) {\\n        ns.ftpcrack(server);\\n    }\\n    if (ns.fileExists('relaySMTP.exe')) {\\n        ns.relaysmtp(server);\\n    }\\n    if (ns.fileExists('HTTPWorm.exe')) {\\n        ns.httpworm(server);\\n    }\\n    if (ns.fileExists('SQLInject.exe')) {\\n        ns.sqlinject(server);\\n    }\\n    if (ns.getServerRequiredHackingLevel(server) > ns.getHackingLevel() ||\\n        ns.getServerNumPortsRequired(server) > hackablePorts) {\\n        return false;\\n    } else {\\n        ns.nuke(server);\\n        ns.tprint(`New Server Cracked: ${server}!`);\\n        return true;\\n    }\\n}\\n\\nexport function findHackablePorts(ns) {\\n    let hackPorts = 0;\\n    if (ns.fileExists('BruteSSH.exe')) {\\n        hackPorts += 1;\\n    }\\n    if (ns.fileExists('FTPCrack.exe')) {\\n        hackPorts += 1;\\n    }\\n    if (ns.fileExists('relaySMTP.exe')) {\\n        hackPorts += 1;\\n    }\\n    if (ns.fileExists('HTTPWorm.exe')) {\\n        hackPorts += 1;\\n    }\\n    if (ns.fileExists('SQLInject.exe')) {\\n        hackPorts += 1;\\n    }\\n    hackablePorts = hackPorts;\\n}\\n\",\"filename\":\"/scripts/autoHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"import.js\",\"url\":\"blob:file:///8ec45e4f-89ed-4420-937b-e97edc683252\",\"moduleSequenceNumber\":80204},{\"filename\":\"/scripts/autoHack.js\",\"url\":\"blob:file:///2c0dffa1-4071-4663-806e-8d4962396022\",\"moduleSequenceNumber\":80220}],\"dependents\":[],\"ramUsage\":5.05,\"server\":\"home\",\"_hash\":\"f0240c721cd5a1d6f5a15101cebc1b3786547715d356f8d4fe1dccc6bd1019a2\",\"moduleSequenceNumber\":80220,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getFolder, getServerPrefix } from 'import.js';\\nlet maxValueServers;\\nlet serverValue = 0;\\n\\n/* Identify servers worth more than $10 Billion,\\n * deploy the hack script and attack those servers\\n * using all purchased servers.\\n */\\nexport async function main(ns) {\\n    maxValueServers = {\\n        zero: [],\\n        million: [],\\n        billion: [],\\n        trillion: []\\n    };\\n    findServer(ns, 'home', 'home', checkValue);\\n    ns.run(`/${getFolder()}/remoteHack.js`, 1, highest(ns).join(','));\\n}\\n\\nfunction findServer(ns, startServer, targetServer, func) {\\n    let servers = ns.scan(targetServer, true).filter((server) => server !== startServer && !server.includes(getServerPrefix));\\n    if (!ns.hasRootAccess(targetServer)) { return false; }\\n    servers.forEach((server) => {\\n        func.call(this, ns, server);\\n        if (ns.hasRootAccess(server)) {\\n            findServer(ns, targetServer, server, func);\\n        }\\n    });\\n}\\n\\nfunction checkValue(ns, server) {\\n    if (!ns.hasRootAccess(server)) {\\n        return;\\n    }\\n    let serverMoney = ns.getServerMaxMoney(server);\\n    if (serverMoney > 1e12) {\\n        maxValueServers.trillion.push(server);\\n    } else if (serverMoney > 1e9) {\\n        maxValueServers.billion.push(server);\\n    } else if (serverMoney > 0) {\\n        maxValueServers.million.push(server);\\n    } else {\\n        maxValueServers.zero.push(server);\\n    }\\n}\\n\\nfunction highest(ns) {\\n    if (maxValueServers.trillion.length > 0) {\\n        return maxValueServers.trillion;\\n    }\\n    if (maxValueServers.billion.length > 0) {\\n        return maxValueServers.billion;\\n    }\\n    if (maxValueServers.million.length > 0) {\\n        return maxValueServers.million;\\n    }\\n}\\n\",\"filename\":\"/scripts/autoRemoteHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"import.js\",\"url\":\"blob:file:///1b0d2331-2fa0-40dc-8a65-cccfc715ee94\",\"moduleSequenceNumber\":1162431},{\"filename\":\"/scripts/autoRemoteHack.js\",\"url\":\"blob:file:///c359dc30-44c0-43dd-9107-02f55c6c5426\",\"moduleSequenceNumber\":1166758}],\"dependents\":[],\"ramUsage\":2.95,\"server\":\"home\",\"_hash\":\"0a44f15d5c808191719bdc1a774692b405faf03d995467120b769bf80fcccaa2\",\"moduleSequenceNumber\":80206,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"let functions = { buyNode, upgradeNodes, buyNodes, help };\\nlet maxNodeCost;\\n/*\\n * Time to get some Hacknet Nodes!\\n * You can call this script with the options\\n * buyNode - purchase and upgrade one new node\\n * upgradeNodes - upgrade your existing network to max\\n * buyNodes - buy as many nodes as you can afford\\n * help - help with the command\\n */\\nexport async function main(ns) {\\n    let result;\\n    if (!Object.keys(functions).includes(ns.args[0])) {\\n        result = 'Not Found';\\n        help(ns);\\n    } else {\\n        result = functions[ns.args[0]](ns);\\n    }\\n    response(ns, ns.args[0], result);\\n}\\n\\nfunction help(ns) {\\n    ns.tprint(\\\"This script helps you manage your Hacknet Nodes. \\\" +\\n        \\\"You can purchase new nodes by running `run buyHacknet.js buyNode` \\\" +\\n        \\\"or `run buyHacknet.js buyNodes`. It will purchase as many nodes as you can afford. \\\" +\\n        \\\"You can automatically upgrade your existing hacknet nodes by running \\\" +\\n        \\\"`run buyHacknet.js upgradeNodes`\\\");\\n    return '';\\n}\\n\\nfunction response(ns, func, result) {\\n    switch (func) {\\n        case 'buyNode':\\n            ns.tprint(result ? '✔️Purchased one node' : 'You cannot afford a node.😢');\\n            break;\\n        case 'buyNodes':\\n            ns.tprint(result > 0 ? `✔️Purchased ${result} nodes.` : 'You cannot afford a node.😢');\\n            break;\\n        case 'upgradeNodes':\\n            ns.tprint(result ? '✔️Nodes Upgraded' : '⭐You are already upgraded as much as you can afford.');\\n            break;\\n        default:\\n            if (result === 'Not Found') { ns.tprint(`${func} is not a valid option`); }\\n    }\\n}\\n\\nfunction buyNode(ns) {\\n    let index = ns.hacknet.purchaseNode();\\n    if (index < 0) {\\n        return false;\\n    }\\n    maxNodeCost = maxNodeCost || getMaxNodeCost(ns, index);\\n\\n    if (ns.getServerMoneyAvailable('home') >= maxNodeCost) {\\n        ns.hacknet.upgradeLevel(index, 200);\\n        ns.hacknet.upgradeRam(index, 6);\\n        ns.hacknet.upgradeCore(index, 16);\\n    } else {\\n        upgradeNode(ns, index);\\n    }\\n    return true;\\n}\\n\\nfunction buyNodes(ns) {\\n    let purchaseNodes = true;\\n    let i = 0;\\n    while (purchaseNodes) {\\n        purchaseNodes = buyNode(ns);\\n        if (purchaseNodes) { i++; }\\n    }\\n    return i;\\n}\\n\\nfunction getMaxNodeCost(ns, index) {\\n    ns.tprint('Fetching cost');\\n    return ns.hacknet.getLevelUpgradeCost(index, 200) +\\n        ns.hacknet.getRamUpgradeCost(index, 6) +\\n        ns.hacknet.getCoreUpgradeCost(index, 16);\\n}\\n\\nfunction upgradeNodes(ns) {\\n    let upgrade = false;\\n    let nodes = ns.hacknet.numNodes();\\n    for (let i = 0; i < nodes; i++) {\\n        upgrade = upgradeNode(ns, i) || upgrade;\\n    }\\n    return upgrade;\\n}\\n\\nfunction upgradeNode(ns, index) {\\n    let level = upgradeNodePart(ns, index, 'Level', 10);\\n    let node = upgradeNodePart(ns, index, 'Ram', 2);\\n    let core = upgradeNodePart(ns, index, 'Core', 1);\\n    return level || node || core;\\n}\\n\\nfunction upgradeNodePart(ns, nodeIndex, upgradePart, increment) {\\n    let upgrade = false;\\n    let costFunction = `get${upgradePart}UpgradeCost`;\\n    let upgradeFunction = `upgrade${upgradePart}`;\\n    let cost = ns.hacknet[costFunction](nodeIndex, increment);\\n    while (isFinite(cost) && ns.getServerMoneyAvailable('home') >= cost) {\\n        ns.hacknet[upgradeFunction](nodeIndex, increment);\\n        cost = ns.hacknet[costFunction](nodeIndex, increment);\\n        upgrade = true;\\n    }\\n    return upgrade;\\n}\\n\",\"filename\":\"/scripts/buyHacknet.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/buyHacknet.js\",\"url\":\"blob:file:///544ec3ed-311f-44da-bdb5-2d87c5f38f84\",\"moduleSequenceNumber\":606584}],\"dependents\":[],\"ramUsage\":5.7,\"server\":\"home\",\"_hash\":\"759551caf1996cef88464ba1c0f43df37a44a76b0ee18358c37fa2a4cd7c3217\",\"moduleSequenceNumber\":80207,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getFolder, getServerPrefix } from 'import.js';\\nimport { serverHackStatus, serverReport } from '/scripts/serverStatus.js';\\n\\n/*\\n * This is a dashboard that outputs the status\\n * of your entire server network.\\n */\\nexport async function main(ns) {\\n    findServer(ns, 'home', 'home', 1);\\n}\\n\\nfunction findServer(ns, startServer, targetServer, i) {\\n    let servers = ns.scan(targetServer, true)\\n        .filter((server) => server !== startServer && !server.includes(getServerPrefix()));\\n    servers.forEach((server) => {\\n        ns.tprint(`😹${'>'.repeat(i)}`);\\n        serverReport(ns, server);\\n        if (serverHackStatus(ns, server) !== \\\"🔐\\\") {\\n            findServer(ns, targetServer, server, i + 1);\\n        }\\n    });\\n}\\n\",\"filename\":\"/scripts/dashboard.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/serverStatus.js\",\"url\":\"blob:file:///938036a6-f3ae-4ecd-89fb-fe1649af055b\",\"moduleSequenceNumber\":55774},{\"filename\":\"import.js\",\"url\":\"blob:file:///8ec45e4f-89ed-4420-937b-e97edc683252\",\"moduleSequenceNumber\":55763},{\"filename\":\"/scripts/dashboard.js\",\"url\":\"blob:file:///ccdaf590-9684-4a4e-9c97-f6090dea43fa\",\"moduleSequenceNumber\":75067}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"home\",\"_hash\":\"220e6bc01c4c625d7a960dc7a5284658e52b1df2dd9281487a64407abd3a9d5f\",\"moduleSequenceNumber\":80208,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const TICK = 3000;\\nconst MAXWAIT = 3600 * 12; // 12 hours in seconds\\nconst BASEMAXEARNINGS = 9171;\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\");\\n\\tns.disableLog(\\\"sleep\\\");\\n\\n\\tconst maxEarnings = BASEMAXEARNINGS * hacknetMultProd(ns);\\n\\tlet cost = ns.hacknet.getPurchaseNodeCost();\\n\\twhile (canRecoup(ns, cost, maxEarnings)) {\\n\\t\\twhile (!affordable(ns, cost)) { await ns.sleep(TICK); }\\n\\t\\tbuyNode(ns);\\n\\t\\tcost = ns.hacknet.getPurchaseNodeCost();\\n\\t}\\n\\n\\tns.print(\\\"Additional hacknet nodes cannot break even\\\");\\n}\\n\\nfunction canRecoup(ns, cost, maxEarnings) { return breakEvenTime(cost, maxEarnings) < MAXWAIT ? true : false; }\\nfunction hacknetMultProd(ns) { return ns.getHacknetMultipliers().production; }\\nfunction breakEvenTime(cost, earnings) { return cost / earnings; }\\nfunction affordable(ns, cost) { return cost < moneyAvailable(ns) ? true : false; }\\nfunction moneyAvailable(ns) { return ns.getServerMoneyAvailable('home'); }\\nfunction buyNode(ns) { ns.print(\\\"Purchased hacknet-node-\\\" + ns.hacknet.purchaseNode()); }\",\"filename\":\"/scripts/deployNodes.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/deployNodes.js\",\"url\":\"blob:file:///8a581810-818f-4445-b974-24c7739b1837\",\"moduleSequenceNumber\":624829}],\"dependents\":[],\"ramUsage\":9.7,\"server\":\"home\",\"_hash\":\"46f8e5a977034f740043d3537db6aee4b53b4549724eaa26cecda9d0bc637363\",\"moduleSequenceNumber\":80209,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getHacknetMultipliers\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getHacknetUpgradeScript} from 'import.js';\\n\\nconst TICK = 1250;\\nconst PARTS = ['Level', 'Ram', 'Core'];\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\n\\tawait deployUpgrades(ns);\\n\\n\\tns.print('Finished deploying upgrades');\\n}\\n\\nasync function deployUpgrades(ns) {\\n\\t\\tlet options = getAllOptions(ns);\\n\\t\\tlet option = leastCostlyOption(options);\\n\\tdo {\\n\\t\\tawait purchase(ns, option);\\n\\t\\toptions = getAllOptions(ns);\\n\\t\\toption = leastCostlyOption(options);\\n\\t} while (necessary(ns, option));\\n}\\nfunction necessary(ns, option) {\\n\\treturn (nodesDeploying(ns) || upgradesAvailable(option));\\n}\\nfunction nodesDeploying(ns) { return ns.isRunning(`${getHacknetUpgradeScript()}`); }\\nfunction upgradesAvailable(option) { return isFinite(option.cost); }\\nfunction leastCostlyOption(options) { return options.sort((a, b) => a.cost - b.cost)[0]; }\\n\\nfunction getAllOptions(ns) {\\n\\tlet options = [];\\n\\tfor (let nodeIndex = 0; nodeIndex < ns.hacknet.numNodes(); nodeIndex += 1) {\\n\\t\\toptions = options.concat(getPerNodeOptions(ns, nodeIndex));\\n\\t}\\n\\treturn options;\\n}\\nfunction getPerNodeOptions(ns, nodeIndex) {\\n\\tns.print(`Getting options from hacknet-node-${nodeIndex}`);\\n\\tlet options = [];\\n\\tfor (let part of PARTS) {\\n\\t\\tlet option = {\\n\\t\\t\\t'nodeIndex': nodeIndex,\\n\\t\\t\\t'part': part,\\n\\t\\t\\t'cost': cost(ns, nodeIndex, part)\\n\\t\\t};\\n\\t\\toptions.push(option);\\n\\t}\\n\\treturn options;\\n}\\nfunction cost(ns, nodeIndex, part) {\\n\\tlet costFunction = `get${part}UpgradeCost`;\\n\\treturn ns.hacknet[costFunction](nodeIndex, 1);\\n}\\n\\nasync function purchase(ns, option) {\\n\\tlet index = option.nodeIndex;\\n\\tlet part = option.part;\\n\\tlet cost = option.cost;\\n\\tlet buyFunction = `upgrade${part}`;\\n\\twhile (cost > myMoney(ns)) { await ns.sleep(TICK); }\\n\\tns.print(`Purchasing ${part} for hacknet-node-${index} at cost of $${cost}`);\\n\\treturn ns.hacknet[buyFunction](index, 1);\\n}\\n\\nfunction myMoney(ns) { return ns.getServerMoneyAvailable('home'); }\",\"filename\":\"/scripts/deployUpgrades.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"import.js\",\"url\":\"blob:file:///1b0d2331-2fa0-40dc-8a65-cccfc715ee94\",\"moduleSequenceNumber\":624787},{\"filename\":\"/scripts/deployUpgrades.js\",\"url\":\"blob:file:///cae98ea5-3818-49b1-a740-ba9227c5bffd\",\"moduleSequenceNumber\":624830}],\"dependents\":[],\"ramUsage\":5.8,\"server\":\"home\",\"_hash\":\"086b8afb691f582887ef01f6a4da3ac29d5d2ac81fad9aadd8fdcb0221c56ddf\",\"moduleSequenceNumber\":80210,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/* A simple lightweight script that is deployed\\n * to remote and local servers to repeatedly hack\\n * a particular server.\\n * The smaller this is, the more threads can be deployed.\\n * args[0] - server name\\n * args[1] - threads to attack with\\n */\\nexport async function main(ns, args) {\\n    await hackServer(ns, ns.args[0], ns.args[1]);\\n}\\n\\nasync function hackServer(ns, server, threads) {\\n    ns.disableLog('getServerSecurityLevel');\\n    let serverSecurityThreshold = ns.getServerMinSecurityLevel(server) + 2;\\n    let serverMoneyThreshold = ns.getServerMaxMoney(server) * 0.95;\\n    let opts = { threads: threads, stock: true };\\n    while (true) {\\n        if (ns.getServerSecurityLevel(server) > serverSecurityThreshold) {\\n            await ns.weaken(server, opts);\\n        } else if (ns.getServerMoneyAvailable(server) < serverMoneyThreshold) {\\n            await ns.grow(server, opts);\\n        } else {\\n            await ns.hack(server, opts);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///55ddb508-c060-4159-8388-fceb70ab7c90\",\"moduleSequenceNumber\":82053}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"home\",\"_hash\":\"13378b34e479b2f0fbdceaf99819fe1b7259542a34b15afd3953cd74923ef935\",\"moduleSequenceNumber\":82053,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getFolder } from 'import.js';\\n/* Run various scripts easily and from one interface\\n */\\nexport async function main(ns) {\\n  const command = ns.args[0];\\n  const commandArgs = ns.args.slice(1);\\n  await runCommand(ns, command, commandArgs);\\n}\\n\\nasync function runCommand(ns, command, commandArgs) {\\n  switch (command) {\\n    case 'autoHack':\\n    case 'autoRemoteHack':\\n    case 'dashboard':\\n    case 'deployHacknet':\\n    case 'deployNodes':\\n    case 'deployUpgrades':\\n    case 'gangManager':\\n    case 'purchaseServers':\\n      ns.run(`/${getFolder()}/${command}.js`);\\n      break;\\n    case 'localHack':\\n      ns.run(`/${getFolder()}/${command}.js`, 1, commandArgs[0]);\\n      break;\\n    case 'sudo autohack':\\n    case 'sudo autoHack':\\n      await runCommand(ns, 'autoHack');\\n      await runCommand(ns, 'autoRemoteHack');\\n      break;\\n    case 'autohack':\\n      await runCommand(ns, 'autoHack');\\n      break;\\n    case 'serverhack':\\n    case 'serverHack':\\n      await runCommand(ns, 'autoRemoteHack');\\n      break;\\n    case 'dash':\\n    case 'status':\\n      await runCommand(ns, 'dashboard');\\n      break;\\n    case 'buyServer':\\n    case 'purchaseServer':\\n    case 'buyServers':\\n      await runCommand(ns, 'purchaseServers');\\n      break;\\n    default:\\n      ns.tprint(`Oh no! ${command} isn't a valid command. Try: dashboard, autoHack, autoRemoteHack, or deployHacknet.`);\\n  }\\n}\\n\\nexport function autocomplete(data, args) {\\n  return ['autoHack',\\n    'autoRemoteHack',\\n    'dashboard',\\n    'deployHacknet',\\n    'gangManager',\\n    'localHack',\\n    'purchaseServer',\\n    ...data.servers];\\n}\",\"filename\":\"/scripts/hax.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"import.js\",\"url\":\"blob:file:///8ec45e4f-89ed-4420-937b-e97edc683252\",\"moduleSequenceNumber\":80204},{\"filename\":\"/scripts/hax.js\",\"url\":\"blob:file:///7672c0cf-d7ee-48c8-9a1d-7ee20549d4d2\",\"moduleSequenceNumber\":80219}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"home\",\"_hash\":\"c4b898241e1d8b4577ad7cff99ae3ac2977437398e1ce52c80aa7478788546ef\",\"moduleSequenceNumber\":80219,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerPrefix } from 'import.js';\\n\\nlet maxServers;\\nlet servers;\\n\\n/*\\n * Purchases the best server available with the\\n * user's current money. If the server limit is\\n * reached, replaces the worst server. Repeatable.\\n */\\nexport async function main(ns) {\\n    // Default Values\\n    maxServers = ns.getPurchasedServerLimit();\\n    servers = ns.getPurchasedServers(true);\\n    serverInfo(ns);\\n    await buyServers(ns);\\n}\\n\\nfunction serverInfo(ns) {\\n    ns.tprint(`You have ${servers.length}/${maxServers} servers`);\\n    Object.entries(groupServers(ns)).map((ramServers) => {\\n        ns.tprint(`${ramServers[0]}GB: ${ramServers[1]}`);\\n    });\\n}\\n\\nfunction groupServers(ns) {\\n    let groupedServers = {};\\n    servers.forEach((server) => {\\n        let ram = ns.getServerRam(server)[0];\\n        groupedServers[ram] = groupedServers[ram] || [];\\n        groupedServers[ram].push(server);\\n    });\\n    return groupedServers;\\n}\\n\\nasync function buyServers(ns) {\\n    let ram = ns.getPurchasedServerMaxRam();\\n    let shopServer = true;\\n    while (shopServer) {\\n        let myMoney = ns.getServerMoneyAvailable('home');\\n        let serverCost = ns.getPurchasedServerCost(ram);\\n        while (serverCost > myMoney && ram > 2) {\\n            ram = ram / 2;\\n            serverCost = ns.getPurchasedServerCost(ram);\\n        }\\n        shopServer = await ns.prompt(`Would you like to buy a ${ram}GB server for ${ns.nFormat(serverCost, \\\"$0.00a\\\")}`);\\n        if (shopServer) { shopServer = buyServer(ns, ram); }\\n    }\\n}\\n\\nfunction buyServer(ns, ram) {\\n    if (servers.length == maxServers) {\\n        let success = removeWeakestServer(ns, ram);\\n        if (!success) { return false; }\\n    }\\n    let server = ns.purchaseServer(`${getServerPrefix()}-${ram}GB`, ram);\\n    servers.push(server);\\n    ns.tprint(`Purchased ${server}: ${ram}GB`);\\n    return true;\\n}\\n\\nfunction removeWeakestServer(ns, newRam) {\\n    let groupedServers = groupServers(ns);\\n    let min = Math.min(...Object.keys(groupedServers));\\n    if (min >= newRam) {\\n        ns.tprint(`Your smallest server has ${min}GB RAM and you wanted to purchase ${newRam}GB server`);\\n        return false;\\n    }\\n    let smallest_server = groupedServers[min][0];\\n    ns.killall(smallest_server);\\n    let result = ns.deleteServer(smallest_server);\\n    servers = ns.getPurchasedServers(true);\\n    return true;\\n}\\n\",\"filename\":\"/scripts/purchaseServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"import.js\",\"url\":\"blob:file:///1b0d2331-2fa0-40dc-8a65-cccfc715ee94\",\"moduleSequenceNumber\":1162431},{\"filename\":\"/scripts/purchaseServers.js\",\"url\":\"blob:file:///15a66681-c2b1-4156-bc68-87b58026cc60\",\"moduleSequenceNumber\":1166757}],\"dependents\":[],\"ramUsage\":9.4,\"server\":\"home\",\"_hash\":\"5da036a3b110ce5ba41fc38c559945a5158b30a3bd797235912d4fd1e8ec5c79\",\"moduleSequenceNumber\":80213,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getHackScript } from 'import.js';\\n\\n/* Deploys the hack script to all purchased servers\\n * Differs from autoRemoteHack because you can specify\\n * the target\\n * args[0] - list of servers\\n * args[1] - alternate Hackscript (default from import)\\n */\\nexport async function main(ns) {\\n  let myServers = ns.getPurchasedServers();\\n  let targetServers = ns.args[0].split(',');\\n  let hackScript = ns.args[1] || getHackScript();\\n  let scriptRam = ns.getScriptRam(hackScript);\\n  for (const [index, server] of myServers.entries()) {\\n    ns.killall(server);\\n    let serverRam = ns.getServerRam(server)[0];\\n    let threads = Math.floor(serverRam / scriptRam);\\n    let serverIndex = index % targetServers.length;\\n    let targetServer = targetServers[serverIndex];\\n    ns.print(`${server} is hacking ${targetServer} with ${threads} threads.`);\\n    await ns.scp(hackScript, server);\\n    if (threads > 0) {\\n      ns.exec(hackScript, server, threads, targetServer, threads);\\n    }\\n  }\\n}\\n\",\"filename\":\"/scripts/remoteHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"import.js\",\"url\":\"blob:file:///1b0d2331-2fa0-40dc-8a65-cccfc715ee94\",\"moduleSequenceNumber\":1162431},{\"filename\":\"/scripts/remoteHack.js\",\"url\":\"blob:file:///1e969df7-b4d0-41f7-8861-05585ebda22c\",\"moduleSequenceNumber\":1166759}],\"dependents\":[],\"ramUsage\":6.45,\"server\":\"home\",\"_hash\":\"8bb243a76c83c30301e9e187586e47c1d3c77ee5c47a1662ccebc8b13dde20dc\",\"moduleSequenceNumber\":80214,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"let hackPorts = 0;\\n\\n/*\\n * Utility functions that report serverStatus\\n * and Hackability \\n */\\nexport async function main(ns) {\\n  let server = ns.args[0];\\n  serverReport(ns, server);\\n}\\n\\nexport function serverReport(ns, server) {\\n  let serverLock = serverHackStatus(ns, server);\\n  ns.tprint(`${serverLock} ${server}`);\\n  if (serverLock == \\\"🔓\\\") {\\n    ns.tprint(`🛡️${Math.round(ns.getServerSecurityLevel(server))}/${ns.getServerMinSecurityLevel(server)}`);\\n    ns.tprint(`💸${ns.nFormat(ns.getServerMoneyAvailable(server), \\\"$0.000a\\\")}/${ns.nFormat(ns.getServerMaxMoney(server), \\\"$0.000a\\\")}`);\\n  } else {\\n    ns.tprint(`Hack Level: ${ns.getServerRequiredHackingLevel(server)}`);\\n    ns.tprint(`Ports: ${ns.getServerNumPortsRequired(server)}`);\\n  }\\n  ns.tprint('-----------');\\n}\\n\\nexport function serverHackStatus(ns, server) {\\n  if (ns.hasRootAccess(server)) {\\n    return \\\"🔓\\\";\\n  }\\n  if (ns.getServerRequiredHackingLevel(server) > ns.getHackingLevel() ||\\n    ns.getServerNumPortsRequired(server) > hackablePorts) {\\n    return \\\"🔐\\\";\\n  }\\n  return \\\"🔒\\\";\\n}\\n\\nexport function hackablePorts(ns) {\\n  if (hackPorts > 0) {\\n    return hackPorts;\\n  }\\n  if (ns.fileExists('BruteSSH.exe')) {\\n    hackPorts += 1;\\n  }\\n  if (ns.fileExists('FTPCrack.exe')) {\\n    hackPorts += 1;\\n  }\\n  if (ns.fileExists('relaySMTP.exe')) {\\n    hackPorts += 1;\\n  }\\n  if (ns.fileExists('HTTPWorm.exe')) {\\n    hackPorts += 1;\\n  }\\n  if (ns.fileExists('SQLInject.exe')) {\\n    hackPorts += 1;\\n  }\\n  return hackPorts;\\n}\\n\",\"filename\":\"/scripts/serverStatus.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"home\",\"_hash\":\"85510f85ecc586dbae588ff794c8d87cf14b69b3a5b73818d4898853274ec57a\",\"moduleSequenceNumber\":80215,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const SCRIPT = '/scripts/homeHack.js';\\nconst HACKSCRIPT = '/scripts/hack.js';\\nconst HOME = 'home';\\nconst RESERVERAM = 20; // RAM in GB to reserve for running other commands, scripts\\n\\nexport function autocomplete(data, args) {\\n\\treturn [...data.servers];\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tif (typeof target === 'undefined') {\\n\\t\\tns.tprint(`Usage: run ${SCRIPT} TARGET`);\\n\\t\\tns.tprint(`Example: run ${SCRIPT} iron-gym`);\\n\\t\\treturn;\\n\\t}\\n\\n\\tif (ns.scriptRunning(HACKSCRIPT, HOME)) {\\n\\t\\tns.scriptKill(HACKSCRIPT, HOME);\\n\\t\\tns.tprint(`Killed running instance of ${HACKSCRIPT}`);\\n\\t}\\n\\n\\tconst freeRam = ns.getServerMaxRam(HOME) - ns.getServerUsedRam(HOME);\\n\\tconst threadRam = ns.getScriptRam(HACKSCRIPT);\\n\\n\\tconst usableRam = (RESERVERAM < freeRam) ? freeRam - RESERVERAM : 0;\\n\\tconst threads = Math.floor(usableRam / threadRam);\\n\\n\\tns.exec(HACKSCRIPT, HOME, threads, target, threads);\\n}\",\"filename\":\"/scripts/localHack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/localHack.js\",\"url\":\"blob:file:///f1a5e521-4968-405c-8eee-b18bb1536c75\",\"moduleSequenceNumber\":82052}],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"home\",\"_hash\":\"408257f0255fa86e47f07f5935a1a94d266c7f26fed07dcfe9debf7864db79c3\",\"moduleSequenceNumber\":82052,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const TICK = 1250;\\nconst MAXWAIT = 3600 * 12; // 12 hours in seconds\\nconst BASEMAXNODEEARNINGS = 9171;\\nconst PARTS = ['Level', 'Ram', 'Core'];\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('sleep');\\n\\n\\tawait deployHacknet(ns);\\n\\n\\tns.print('Finished deploying hacknet');\\n}\\n\\n\\nasync function deployHacknet(ns) {\\n\\tlet options = getAllOptions(ns);\\n\\tlet option = leastCostlyOption(options);\\n\\tdo {\\n\\t\\tawait purchase(ns, option);\\n\\t\\toptions = getAllOptions(ns);\\n\\t\\toption = leastCostlyOption(options);\\n\\t} while (purchasesAvailable(option));\\n}\\n\\nfunction getAllOptions(ns) {\\n\\tlet options = [];\\n\\t// get upgrades\\n\\tfor (let nodeIndex = 0; nodeIndex < ns.hacknet.numNodes(); nodeIndex += 1) {\\n\\t\\toptions = options.concat(getPerNodeOptions(ns, nodeIndex));\\n\\t}\\n\\t// get next node\\n\\toptions = options.concat(\\n\\t\\t{\\n\\t\\t\\t'nodeIndex': undefined,\\n\\t\\t\\t'part': 'Node',\\n\\t\\t\\t'cost': cost(ns, undefined, 'Node')\\n\\t\\t});\\n\\treturn options;\\n}\\nfunction getPerNodeOptions(ns, nodeIndex) {\\n\\tlet options = [];\\n\\tfor (let part of PARTS) {\\n\\t\\tlet option = {\\n\\t\\t\\t'nodeIndex': nodeIndex,\\n\\t\\t\\t'part': part,\\n\\t\\t\\t'cost': cost(ns, nodeIndex, part)\\n\\t\\t};\\n\\t\\toptions.push(option);\\n\\t}\\n\\treturn options;\\n}\\nfunction cost(ns, nodeIndex, part) {\\n\\tif (part === 'Node') {\\n\\t\\treturn getNodeCost(ns);\\n\\t}\\n\\tlet costFunction = `get${part}UpgradeCost`;\\n\\treturn ns.hacknet[costFunction](nodeIndex, 1);\\n}\\nfunction getNodeCost(ns) {\\n\\t// make sure not to buy more nodes when unable to recoup the expense\\n\\t// in a reasonable amount of time\\n\\tlet cost = ns.hacknet.getPurchaseNodeCost();\\n\\tconst maxEarnings = BASEMAXNODEEARNINGS * hacknetMultProd(ns);\\n\\tif (canRecoup(ns, cost, maxEarnings)) { return cost; }\\n\\treturn Infinity;\\n}\\nfunction hacknetMultProd(ns) { return ns.getHacknetMultipliers().production; }\\nfunction canRecoup(ns, cost, maxEarnings) { return breakEvenTime(cost, maxEarnings) < MAXWAIT ? true : false; }\\nfunction breakEvenTime(cost, earnings) { return cost / earnings; }\\n\\nfunction leastCostlyOption(options) { return options.sort((a, b) => a.cost - b.cost)[0]; }\\nfunction purchasesAvailable(option) { return isFinite(option.cost); }\\n\\nasync function purchase(ns, option) {\\n\\tlet index = option.nodeIndex;\\n\\tlet part = option.part;\\n\\tlet cost = option.cost;\\n\\n\\twhile (cost > myMoney(ns)) { await ns.sleep(TICK); }\\n\\n\\tif (part === 'Node') {\\n\\t\\tns.print(`Purchase hacknet-node-${ns.hacknet.purchaseNode()}`);\\n\\t\\treturn true;\\n\\t}\\n\\n\\tlet upgradeFunction = `upgrade${part}`;\\n\\tns.print(`Purchase ${part} for hacknet-node-${index} at cost of $${cost}`);\\n\\treturn ns.hacknet[upgradeFunction](index, 1);\\n}\\n\\nfunction myMoney(ns) { return ns.getServerMoneyAvailable('home'); }\",\"filename\":\"/scripts/deployHacknet.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/deployHacknet.js\",\"url\":\"blob:file:///3c0bf006-3d69-474f-a720-30744b0f50f6\",\"moduleSequenceNumber\":80227}],\"dependents\":[],\"ramUsage\":9.7,\"server\":\"home\",\"_hash\":\"7125fa469a21cfa581bb46d3fb2ec8dee717ef1740a170be619b0728fa6df759\",\"moduleSequenceNumber\":80227,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getHacknetMultipliers\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const ATTRIBUTES = ['hack', 'str', 'def', 'dex', 'agi', 'cha'];\\nconst TICK = 5000;\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.tail();\\n\\n\\twhile (true) {\\n\\t\\tlet members = ns.gang.getMemberNames();\\n\\t\\tfor (let member of members) {\\n\\t\\t\\tlet memberInfo = ns.gang.getMemberInformation(member);\\n\\n\\t\\t\\tlet ascendResult = ns.gang.getAscensionResult(member);\\n\\t\\t\\tif (typeof ascendResult === 'undefined') { continue; }\\n\\n\\t\\t\\tlet attrSnaps = [];\\n\\t\\t\\tfor (let attribute of ATTRIBUTES) {\\n\\t\\t\\t\\tlet expString = `${attribute}_exp`;\\n\\t\\t\\t\\tlet baseMultString = `${attribute}_mult`;\\n\\t\\t\\t\\tlet ascMultString = `${attribute}_asc_mult`;\\n\\t\\t\\t\\tlet attrSnap = {\\n\\t\\t\\t\\t\\t'name': attribute,\\n\\t\\t\\t\\t\\t'rank': memberInfo[attribute],\\n\\t\\t\\t\\t\\t'xp': memberInfo[expString],\\n\\t\\t\\t\\t\\t'baseMult': memberInfo[baseMultString],\\n\\t\\t\\t\\t\\t'ascMult': memberInfo[ascMultString],\\n\\t\\t\\t\\t\\t'ascResult': ascendResult[attribute],\\n\\t\\t\\t\\t\\t'ascGain': memberInfo[ascMultString] * (ascendResult[attribute] - 1),\\n\\t\\t\\t\\t};\\n\\t\\t\\t\\tattrSnaps.unshift(attrSnap);\\n\\t\\t\\t}\\n\\n\\t\\t\\tlet growthFocus = attrSnaps.sort((a, b) => b.xp - a.xp)[0];\\n\\t\\t\\t// ns.print(`${memberInfo.name} -> ${growthFocus.name} -> ${growthFocus.ascGain}`);\\n\\n\\t\\t\\tif (growthFocus.ascGain > ascGainTarget(growthFocus)) { ns.gang.ascendMember(memberInfo.name) };\\n\\t\\t}\\n\\t\\tawait ns.sleep(TICK);\\n\\t}\\n}\\n\\nfunction ascGainTarget(attrs) {\\n\\treturn 2;\\n}\",\"filename\":\"/scripts/gangManager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/gangManager.js\",\"url\":\"blob:file:///5216cbce-edbb-44ed-b54f-5ad8837fbbeb\",\"moduleSequenceNumber\":1162934}],\"dependents\":[],\"ramUsage\":10.6,\"server\":\"home\",\"_hash\":\"7198fd8c5c6dbc14ee78acd8ae241fbdeaa030332b9c07dec2bbc3647615c1e5\",\"moduleSequenceNumber\":80218,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getMemberInformation\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getAscensionResult\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.ascendMember\",\"cost\":4}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":1,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"79.5.6.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":7021516033.200001,\"moneyMax\":35107580166.00001,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1330,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"58.9.5.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":10002861329.2,\"moneyMax\":50014306646.00001,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1185,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"75.8.6.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"kuai-gong\",\"fulcrumassets\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":4535386307.2,\"moneyMax\":22676931536,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":953,\"serverGrowth\":80}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"66.7.6.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\",\"ecorp\",\"megacorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":97,\"hackDifficulty\":97,\"minDifficulty\":32,\"moneyAvailable\":3193258912.4,\"moneyMax\":15966294562,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1185,\"serverGrowth\":75}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"60.1.4.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":7858707874.400001,\"moneyMax\":39293539372,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1091,\"serverGrowth\":83}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"11.5.9.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":59,\"minDifficulty\":20,\"moneyAvailable\":3195577128.2000003,\"moneyMax\":15977885641,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1027,\"serverGrowth\":51}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"57.3.0.2\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"stormtech\",\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":2898744541,\"moneyMax\":14493722705,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1094,\"serverGrowth\":96}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"57.1.7.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"stormtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":68,\"hackDifficulty\":68,\"minDifficulty\":23,\"moneyAvailable\":4375099216,\"moneyMax\":21875496080,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1135,\"serverGrowth\":75}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"17.1.4.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"vitalife\",\"b-and-a\",\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":96,\"hackDifficulty\":96,\"minDifficulty\":32,\"moneyAvailable\":5605288079.8,\"moneyMax\":28026440399,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1113,\"serverGrowth\":93}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"62.5.5.5\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":339451794,\"moneyMax\":1697258970,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":971,\"serverGrowth\":86}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-286387-Netburners.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-2,10,3,-4,6,-5,5,-3,9,-2,8,-2,-6,8,9,-4,-1,-1,-4,-5,-7,6,3,2],\"reward\":{\"name\":\"Netburners\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"7.6.0.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":200000,\"moneyMax\":1000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1415,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"15.4.4.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"titan-labs\",\"omnitek\",\"4sigma\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":235920643.8,\"moneyMax\":1179603219,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":908,\"serverGrowth\":68}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"33.8.1.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\",\"infocomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":188314101,\"moneyMax\":941570505,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1048,\"serverGrowth\":73}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":false,\"ip\":\"46.6.6.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"defcomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":143595681.6,\"moneyMax\":717978408,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":918,\"serverGrowth\":62}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-563116.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"1291494954\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":false,\"ip\":\"46.0.8.4\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"microdyne\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":135078666.6,\"moneyMax\":675393333,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":887,\"serverGrowth\":76}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":false,\"ip\":\"18.7.1.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"run4theh111z\",\"kuai-gong\",\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":81,\"hackDifficulty\":81,\"minDifficulty\":27,\"moneyAvailable\":154960422,\"moneyMax\":774802110,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":796,\"serverGrowth\":68}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":false,\"ip\":\"10.3.0.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":197422287.20000002,\"moneyMax\":987111436,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":858,\"serverGrowth\":87}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"univ-energy\",\"httpPortOpen\":false,\"ip\":\"58.8.2.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\",\"taiyang-digital\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":233834940.60000002,\"moneyMax\":1169174703.0000002,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":844,\"serverGrowth\":90}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":false,\"ip\":\"4.8.5.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nova-med\",\"stormtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":151269870.6,\"moneyMax\":756349353,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":842,\"serverGrowth\":64}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-816197.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[42,7,10,31,9,8,2,32,45,18],[5,10,2,28,30,34,7,1,33,50],[1,1,35,11,29,40,35,1,43,7],[47,11,11,7,19,48,28,1,2,47],[27,14,30,23,30,33,15,17,33,1],[32,15,21,41,13,41,33,5,1,26],[43,48,30,22,37,12,49,47,33,49],[39,9,27,37,47,26,24,5,42,10],[31,9,27,27,8,29,5,20,40,25],[42,14,38,40,37,37,49,39,34,7],[7,24,31,50,15,7,15,42,24,3],[27,13,35,39,19,36,41,26,42,21],[8,29,14,21,48,39,30,31,41,15],[50,3,20,33,2,25,8,48,33,28]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":false,\"ip\":\"79.4.0.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-def\",\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":114845482.4,\"moneyMax\":574227412,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":870,\"serverGrowth\":80}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":false,\"ip\":\"74.4.7.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"univ-energy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":176635161.8,\"moneyMax\":883175809,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":890,\"serverGrowth\":70}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":false,\"ip\":\"90.0.3.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"rho-construction\",\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":151731375.4,\"moneyMax\":758656877,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":862,\"serverGrowth\":77}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":false,\"ip\":\"2.9.5.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"millenium-fitness\",\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":226906994.60000002,\"moneyMax\":1134534973.0000002,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":859,\"serverGrowth\":61}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":false,\"ip\":\"80.2.2.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"global-pharm\",\"univ-energy\",\"solaris\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":185616384.60000002,\"moneyMax\":928081923.0000002,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":897,\"serverGrowth\":68}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-def\",\"httpPortOpen\":false,\"ip\":\"91.8.8.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zeus-med\",\"microdyne\",\"applied-energetics\",\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":59,\"minDifficulty\":20,\"moneyAvailable\":190569760.4,\"moneyMax\":952848802,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":801,\"serverGrowth\":71}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":false,\"ip\":\"14.3.6.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":194318920.8,\"moneyMax\":971594604,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":784,\"serverGrowth\":70}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":false,\"ip\":\"68.5.4.5\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":177401906.4,\"moneyMax\":887009532,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":823,\"serverGrowth\":75}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":false,\"ip\":\"61.9.4.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"galactic-cyber\",\"icarus\",\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":83,\"hackDifficulty\":83,\"minDifficulty\":28,\"moneyAvailable\":337272927.20000005,\"moneyMax\":1686364636.0000002,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":806,\"serverGrowth\":68}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"global-pharm\",\"httpPortOpen\":false,\"ip\":\"71.3.9.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"millenium-fitness\",\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":313816779.40000004,\"moneyMax\":1569083897.0000002,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":769,\"serverGrowth\":88}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nova-med\",\"httpPortOpen\":false,\"ip\":\"6.6.1.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zeus-med\",\"titan-labs\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":227379505.8,\"moneyMax\":1136897529,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":818,\"serverGrowth\":77}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":false,\"ip\":\"60.5.6.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\",\"zb-def\",\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":281347558,\"moneyMax\":1406737790,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":805,\"serverGrowth\":78}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-325904-Netburners.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[9,2],\"reward\":{\"name\":\"Netburners\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"unitalife\",\"httpPortOpen\":false,\"ip\":\"78.9.3.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aerocorp\",\"defcomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":209118123.8,\"moneyMax\":1045590619,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":816,\"serverGrowth\":70}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"lexo-corp\",\"httpPortOpen\":false,\"ip\":\"88.5.9.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"summit-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":150967296.20000002,\"moneyMax\":754836481.0000001,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":685,\"serverGrowth\":64}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"94.6.8.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"summit-uni\",\"galactic-cyber\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":40,\"hackDifficulty\":40,\"minDifficulty\":13,\"moneyAvailable\":137744683,\"moneyMax\":688723415,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":478,\"serverGrowth\":51}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"alpha-ent\",\"httpPortOpen\":false,\"ip\":\"98.7.7.4\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"summit-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":139291191,\"moneyMax\":696455955,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":592,\"serverGrowth\":58}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aevum-police\",\"httpPortOpen\":false,\"ip\":\"97.8.2.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"summit-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":54015075.400000006,\"moneyMax\":270075377.00000006,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":418,\"serverGrowth\":41}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"58.2.7.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"the-hub\",\"millenium-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":54,\"hackDifficulty\":54,\"minDifficulty\":18,\"moneyAvailable\":47917116.800000004,\"moneyMax\":239585584,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":391,\"serverGrowth\":41}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-institute\",\"httpPortOpen\":false,\"ip\":\"2.1.5.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":188355311.8,\"moneyMax\":941776559,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":757,\"serverGrowth\":80}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"95.2.7.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"johnson-ortho\",\"lexo-corp\",\"rho-construction\",\"alpha-ent\",\"aevum-police\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":50055054.2,\"moneyMax\":250275271,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":431,\"serverGrowth\":43}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"syscore\",\"httpPortOpen\":false,\"ip\":\"66.6.7.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"comptek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":94760261,\"moneyMax\":473801305,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":568,\"serverGrowth\":66}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"23.6.9.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":82249438.80000001,\"moneyMax\":411247194.00000006,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":402,\"serverGrowth\":46}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"16.0.8.7\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"neo-net\",\"rothman-uni\",\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":41,\"hackDifficulty\":41,\"minDifficulty\":14,\"moneyAvailable\":36827335.4,\"moneyMax\":184136677,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":309,\"serverGrowth\":52}},\"comptek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"comptek\",\"httpPortOpen\":false,\"ip\":\"93.9.8.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omega-net\",\"syscore\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":59,\"minDifficulty\":20,\"moneyAvailable\":49595678.6,\"moneyMax\":247978393,\"numOpenPortsRequired\":3,\"openPortCount\":2,\"requiredHackingSkill\":304,\"serverGrowth\":50}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"67.3.2.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":55000000,\"moneyMax\":275000000,\"numOpenPortsRequired\":3,\"openPortCount\":2,\"requiredHackingSkill\":414,\"serverGrowth\":68}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"29.9.9.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omega-net\",\"summit-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":16221712.8,\"moneyMax\":81108564,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":264,\"serverGrowth\":54}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"17.7.0.3\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":2.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\",1],\"dataMap\":{\"n00dles\":[5659,80,3,4]},\"filename\":\"/scripts/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":298.5249383308803,\"onlineMoneyMade\":5659,\"onlineRunningTime\":721.4100000000271,\"pid\":55,\"ramUsage\":2.4,\"server\":\"n00dles\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///55ddb508-c060-4159-8388-fceb70ab7c90\",\"moduleSequenceNumber\":80223}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/* A simple lightweight script that is deployed\\n * to remote and local servers to repeatedly hack\\n * a particular server.\\n * The smaller this is, the more threads can be deployed.\\n * args[0] - server name\\n * args[1] - threads to attack with\\n */\\nexport async function main(ns, args) {\\n    await hackServer(ns, ns.args[0], ns.args[1]);\\n}\\n\\nasync function hackServer(ns, server, threads) {\\n    ns.disableLog('getServerSecurityLevel');\\n    let serverSecurityThreshold = ns.getServerMinSecurityLevel(server) + 2;\\n    let serverMoneyThreshold = ns.getServerMaxMoney(server) * 0.95;\\n    let opts = { threads: threads, stock: true };\\n    while (true) {\\n        if (ns.getServerSecurityLevel(server) > serverSecurityThreshold) {\\n            await ns.weaken(server, opts);\\n        } else if (ns.getServerMoneyAvailable(server) < serverMoneyThreshold) {\\n            await ns.grow(server, opts);\\n        } else {\\n            await ns.hack(server, opts);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///55ddb508-c060-4159-8388-fceb70ab7c90\",\"moduleSequenceNumber\":80223}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"n00dles\",\"_hash\":\"13378b34e479b2f0fbdceaf99819fe1b7259542a34b15afd3953cd74923ef935\",\"moduleSequenceNumber\":80223,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":2.9739999999997435,\"minDifficulty\":1,\"moneyAvailable\":67328.3215055025,\"moneyMax\":70000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"47.1.4.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\",6],\"dataMap\":{\"foodnstuff\":[0,0,174,18]},\"filename\":\"/scripts/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1404.1365700608,\"onlineMoneyMade\":0,\"onlineRunningTime\":721.4100000000271,\"pid\":57,\"ramUsage\":2.4,\"server\":\"foodnstuff\",\"threads\":6,\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///55ddb508-c060-4159-8388-fceb70ab7c90\",\"moduleSequenceNumber\":80226}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/* A simple lightweight script that is deployed\\n * to remote and local servers to repeatedly hack\\n * a particular server.\\n * The smaller this is, the more threads can be deployed.\\n * args[0] - server name\\n * args[1] - threads to attack with\\n */\\nexport async function main(ns, args) {\\n    await hackServer(ns, ns.args[0], ns.args[1]);\\n}\\n\\nasync function hackServer(ns, server, threads) {\\n    ns.disableLog('getServerSecurityLevel');\\n    let serverSecurityThreshold = ns.getServerMinSecurityLevel(server) + 2;\\n    let serverMoneyThreshold = ns.getServerMaxMoney(server) * 0.95;\\n    let opts = { threads: threads, stock: true };\\n    while (true) {\\n        if (ns.getServerSecurityLevel(server) > serverSecurityThreshold) {\\n            await ns.weaken(server, opts);\\n        } else if (ns.getServerMoneyAvailable(server) < serverMoneyThreshold) {\\n            await ns.grow(server, opts);\\n        } else {\\n            await ns.hack(server, opts);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///55ddb508-c060-4159-8388-fceb70ab7c90\",\"moduleSequenceNumber\":80226}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"foodnstuff\",\"_hash\":\"13378b34e479b2f0fbdceaf99819fe1b7259542a34b15afd3953cd74923ef935\",\"moduleSequenceNumber\":80226,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":4.768000000000018,\"minDifficulty\":3,\"moneyAvailable\":469562.411466081,\"moneyMax\":2000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"45.6.5.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\",6],\"dataMap\":{\"sigma-cosmetics\":[0,0,162,12]},\"filename\":\"/scripts/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1272.4987666176,\"onlineMoneyMade\":0,\"onlineRunningTime\":721.4100000000271,\"pid\":58,\"ramUsage\":2.4,\"server\":\"sigma-cosmetics\",\"threads\":6,\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///55ddb508-c060-4159-8388-fceb70ab7c90\",\"moduleSequenceNumber\":82028}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/* A simple lightweight script that is deployed\\n * to remote and local servers to repeatedly hack\\n * a particular server.\\n * The smaller this is, the more threads can be deployed.\\n * args[0] - server name\\n * args[1] - threads to attack with\\n */\\nexport async function main(ns, args) {\\n    await hackServer(ns, ns.args[0], ns.args[1]);\\n}\\n\\nasync function hackServer(ns, server, threads) {\\n    ns.disableLog('getServerSecurityLevel');\\n    let serverSecurityThreshold = ns.getServerMinSecurityLevel(server) + 2;\\n    let serverMoneyThreshold = ns.getServerMaxMoney(server) * 0.95;\\n    let opts = { threads: threads, stock: true };\\n    while (true) {\\n        if (ns.getServerSecurityLevel(server) > serverSecurityThreshold) {\\n            await ns.weaken(server, opts);\\n        } else if (ns.getServerMoneyAvailable(server) < serverMoneyThreshold) {\\n            await ns.grow(server, opts);\\n        } else {\\n            await ns.hack(server, opts);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///55ddb508-c060-4159-8388-fceb70ab7c90\",\"moduleSequenceNumber\":82028}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"sigma-cosmetics\",\"_hash\":\"13378b34e479b2f0fbdceaf99819fe1b7259542a34b15afd3953cd74923ef935\",\"moduleSequenceNumber\":82028,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":4.960000000000009,\"minDifficulty\":3,\"moneyAvailable\":548733.3944997969,\"moneyMax\":2300000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"74.7.8.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",6],\"dataMap\":{\"joesguns\":[0,0,132,12]},\"filename\":\"/scripts/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1363.6536413184,\"onlineMoneyMade\":0,\"onlineRunningTime\":721.4100000000271,\"pid\":61,\"ramUsage\":2.4,\"server\":\"joesguns\",\"threads\":6,\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///55ddb508-c060-4159-8388-fceb70ab7c90\",\"moduleSequenceNumber\":82034}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/* A simple lightweight script that is deployed\\n * to remote and local servers to repeatedly hack\\n * a particular server.\\n * The smaller this is, the more threads can be deployed.\\n * args[0] - server name\\n * args[1] - threads to attack with\\n */\\nexport async function main(ns, args) {\\n    await hackServer(ns, ns.args[0], ns.args[1]);\\n}\\n\\nasync function hackServer(ns, server, threads) {\\n    ns.disableLog('getServerSecurityLevel');\\n    let serverSecurityThreshold = ns.getServerMinSecurityLevel(server) + 2;\\n    let serverMoneyThreshold = ns.getServerMaxMoney(server) * 0.95;\\n    let opts = { threads: threads, stock: true };\\n    while (true) {\\n        if (ns.getServerSecurityLevel(server) > serverSecurityThreshold) {\\n            await ns.weaken(server, opts);\\n        } else if (ns.getServerMoneyAvailable(server) < serverMoneyThreshold) {\\n            await ns.grow(server, opts);\\n        } else {\\n            await ns.hack(server, opts);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///55ddb508-c060-4159-8388-fceb70ab7c90\",\"moduleSequenceNumber\":82034}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"joesguns\",\"_hash\":\"13378b34e479b2f0fbdceaf99819fe1b7259542a34b15afd3953cd74923ef935\",\"moduleSequenceNumber\":82034,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":6.755999999999993,\"minDifficulty\":5,\"moneyAvailable\":654975.155866845,\"moneyMax\":2500000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"67.8.0.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\",13],\"dataMap\":{\"zer0\":[0,0,91,0]},\"filename\":\"/scripts/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1254.2555712959997,\"onlineMoneyMade\":0,\"onlineRunningTime\":721.4100000000271,\"pid\":62,\"ramUsage\":2.4,\"server\":\"zer0\",\"threads\":13,\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///55ddb508-c060-4159-8388-fceb70ab7c90\",\"moduleSequenceNumber\":82037}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/* A simple lightweight script that is deployed\\n * to remote and local servers to repeatedly hack\\n * a particular server.\\n * The smaller this is, the more threads can be deployed.\\n * args[0] - server name\\n * args[1] - threads to attack with\\n */\\nexport async function main(ns, args) {\\n    await hackServer(ns, ns.args[0], ns.args[1]);\\n}\\n\\nasync function hackServer(ns, server, threads) {\\n    ns.disableLog('getServerSecurityLevel');\\n    let serverSecurityThreshold = ns.getServerMinSecurityLevel(server) + 2;\\n    let serverMoneyThreshold = ns.getServerMaxMoney(server) * 0.95;\\n    let opts = { threads: threads, stock: true };\\n    while (true) {\\n        if (ns.getServerSecurityLevel(server) > serverSecurityThreshold) {\\n            await ns.weaken(server, opts);\\n        } else if (ns.getServerMoneyAvailable(server) < serverMoneyThreshold) {\\n            await ns.grow(server, opts);\\n        } else {\\n            await ns.hack(server, opts);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///55ddb508-c060-4159-8388-fceb70ab7c90\",\"moduleSequenceNumber\":82037}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"zer0\",\"_hash\":\"13378b34e479b2f0fbdceaf99819fe1b7259542a34b15afd3953cd74923ef935\",\"moduleSequenceNumber\":82037,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"joesguns\",\"neo-net\",\"phantasy\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":10.024,\"minDifficulty\":8,\"moneyAvailable\":1753044.0072978544,\"moneyMax\":7500000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"48.7.3.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\",6],\"dataMap\":{\"nectar-net\":[0,0,90,12]},\"filename\":\"/scripts/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1185.8951056896,\"onlineMoneyMade\":0,\"onlineRunningTime\":721.4100000000271,\"pid\":68,\"ramUsage\":2.4,\"server\":\"nectar-net\",\"threads\":6,\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///55ddb508-c060-4159-8388-fceb70ab7c90\",\"moduleSequenceNumber\":82045}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/* A simple lightweight script that is deployed\\n * to remote and local servers to repeatedly hack\\n * a particular server.\\n * The smaller this is, the more threads can be deployed.\\n * args[0] - server name\\n * args[1] - threads to attack with\\n */\\nexport async function main(ns, args) {\\n    await hackServer(ns, ns.args[0], ns.args[1]);\\n}\\n\\nasync function hackServer(ns, server, threads) {\\n    ns.disableLog('getServerSecurityLevel');\\n    let serverSecurityThreshold = ns.getServerMinSecurityLevel(server) + 2;\\n    let serverMoneyThreshold = ns.getServerMaxMoney(server) * 0.95;\\n    let opts = { threads: threads, stock: true };\\n    while (true) {\\n        if (ns.getServerSecurityLevel(server) > serverSecurityThreshold) {\\n            await ns.weaken(server, opts);\\n        } else if (ns.getServerMoneyAvailable(server) < serverMoneyThreshold) {\\n            await ns.grow(server, opts);\\n        } else {\\n            await ns.hack(server, opts);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///55ddb508-c060-4159-8388-fceb70ab7c90\",\"moduleSequenceNumber\":82045}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"nectar-net\",\"_hash\":\"13378b34e479b2f0fbdceaf99819fe1b7259542a34b15afd3953cd74923ef935\",\"moduleSequenceNumber\":82045,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"hong-fang-tea\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":8.731999999999841,\"minDifficulty\":7,\"moneyAvailable\":665818.3007775536,\"moneyMax\":2750000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"34.4.2.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\",13],\"dataMap\":{\"neo-net\":[0,0,104,13]},\"filename\":\"/scripts/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1612.6143059519995,\"onlineMoneyMade\":0,\"onlineRunningTime\":721.4100000000271,\"pid\":63,\"ramUsage\":2.4,\"server\":\"neo-net\",\"threads\":13,\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///55ddb508-c060-4159-8388-fceb70ab7c90\",\"moduleSequenceNumber\":82039}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/* A simple lightweight script that is deployed\\n * to remote and local servers to repeatedly hack\\n * a particular server.\\n * The smaller this is, the more threads can be deployed.\\n * args[0] - server name\\n * args[1] - threads to attack with\\n */\\nexport async function main(ns, args) {\\n    await hackServer(ns, ns.args[0], ns.args[1]);\\n}\\n\\nasync function hackServer(ns, server, threads) {\\n    ns.disableLog('getServerSecurityLevel');\\n    let serverSecurityThreshold = ns.getServerMinSecurityLevel(server) + 2;\\n    let serverMoneyThreshold = ns.getServerMaxMoney(server) * 0.95;\\n    let opts = { threads: threads, stock: true };\\n    while (true) {\\n        if (ns.getServerSecurityLevel(server) > serverSecurityThreshold) {\\n            await ns.weaken(server, opts);\\n        } else if (ns.getServerMoneyAvailable(server) < serverMoneyThreshold) {\\n            await ns.grow(server, opts);\\n        } else {\\n            await ns.hack(server, opts);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///55ddb508-c060-4159-8388-fceb70ab7c90\",\"moduleSequenceNumber\":82039}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"neo-net\",\"_hash\":\"13378b34e479b2f0fbdceaf99819fe1b7259542a34b15afd3953cd74923ef935\",\"moduleSequenceNumber\":82039,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"zer0\",\"the-hub\",\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":9.581999999999987,\"minDifficulty\":8,\"moneyAvailable\":1190660.7374356042,\"moneyMax\":5000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"72.7.9.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":62.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\",26],\"dataMap\":{\"silver-helix\":[0,0,0,26]},\"filename\":\"/scripts/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":414.4304815872,\"onlineMoneyMade\":0,\"onlineRunningTime\":721.4100000000271,\"pid\":60,\"ramUsage\":2.4,\"server\":\"silver-helix\",\"threads\":26,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/* A simple lightweight script that is deployed\\n * to remote and local servers to repeatedly hack\\n * a particular server.\\n * The smaller this is, the more threads can be deployed.\\n * args[0] - server name\\n * args[1] - threads to attack with\\n */\\nexport async function main(ns, args) {\\n    await hackServer(ns, ns.args[0], ns.args[1]);\\n}\\n\\nasync function hackServer(ns, server, threads) {\\n    ns.disableLog('getServerSecurityLevel');\\n    let serverSecurityThreshold = ns.getServerMinSecurityLevel(server) + 2;\\n    let serverMoneyThreshold = ns.getServerMaxMoney(server) * 0.95;\\n    let opts = { threads: threads, stock: true };\\n    while (true) {\\n        if (ns.getServerSecurityLevel(server) > serverSecurityThreshold) {\\n            await ns.weaken(server, opts);\\n        } else if (ns.getServerMoneyAvailable(server) < serverMoneyThreshold) {\\n            await ns.grow(server, opts);\\n        } else {\\n            await ns.hack(server, opts);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///55ddb508-c060-4159-8388-fceb70ab7c90\",\"moduleSequenceNumber\":84707}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"silver-helix\",\"_hash\":\"13378b34e479b2f0fbdceaf99819fe1b7259542a34b15afd3953cd74923ef935\",\"moduleSequenceNumber\":84707,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"max-hardware\",\"netlink\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":28.7,\"minDifficulty\":10,\"moneyAvailable\":9000000,\"moneyMax\":45000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"87.2.7.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\",6],\"dataMap\":{\"hong-fang-tea\":[43104,18,72,18]},\"filename\":\"/scripts/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1022.7402309888001,\"onlineMoneyMade\":43104,\"onlineRunningTime\":721.4100000000271,\"pid\":67,\"ramUsage\":2.4,\"server\":\"hong-fang-tea\",\"threads\":6,\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///55ddb508-c060-4159-8388-fceb70ab7c90\",\"moduleSequenceNumber\":82043}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/* A simple lightweight script that is deployed\\n * to remote and local servers to repeatedly hack\\n * a particular server.\\n * The smaller this is, the more threads can be deployed.\\n * args[0] - server name\\n * args[1] - threads to attack with\\n */\\nexport async function main(ns, args) {\\n    await hackServer(ns, ns.args[0], ns.args[1]);\\n}\\n\\nasync function hackServer(ns, server, threads) {\\n    ns.disableLog('getServerSecurityLevel');\\n    let serverSecurityThreshold = ns.getServerMinSecurityLevel(server) + 2;\\n    let serverMoneyThreshold = ns.getServerMaxMoney(server) * 0.95;\\n    let opts = { threads: threads, stock: true };\\n    while (true) {\\n        if (ns.getServerSecurityLevel(server) > serverSecurityThreshold) {\\n            await ns.weaken(server, opts);\\n        } else if (ns.getServerMoneyAvailable(server) < serverMoneyThreshold) {\\n            await ns.grow(server, opts);\\n        } else {\\n            await ns.hack(server, opts);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///55ddb508-c060-4159-8388-fceb70ab7c90\",\"moduleSequenceNumber\":82043}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"hong-fang-tea\",\"_hash\":\"13378b34e479b2f0fbdceaf99819fe1b7259542a34b15afd3953cd74923ef935\",\"moduleSequenceNumber\":82043,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5,\"minDifficulty\":5,\"moneyAvailable\":2652546.3036938487,\"moneyMax\":3000000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"25.6.4.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\",6],\"dataMap\":{\"harakiri-sushi\":[0,0,72,6]},\"filename\":\"/scripts/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":738.6457223808001,\"onlineMoneyMade\":0,\"onlineRunningTime\":721.4100000000271,\"pid\":69,\"ramUsage\":2.4,\"server\":\"harakiri-sushi\",\"threads\":6,\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///55ddb508-c060-4159-8388-fceb70ab7c90\",\"moduleSequenceNumber\":82048}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/* A simple lightweight script that is deployed\\n * to remote and local servers to repeatedly hack\\n * a particular server.\\n * The smaller this is, the more threads can be deployed.\\n * args[0] - server name\\n * args[1] - threads to attack with\\n */\\nexport async function main(ns, args) {\\n    await hackServer(ns, ns.args[0], ns.args[1]);\\n}\\n\\nasync function hackServer(ns, server, threads) {\\n    ns.disableLog('getServerSecurityLevel');\\n    let serverSecurityThreshold = ns.getServerMinSecurityLevel(server) + 2;\\n    let serverMoneyThreshold = ns.getServerMaxMoney(server) * 0.95;\\n    let opts = { threads: threads, stock: true };\\n    while (true) {\\n        if (ns.getServerSecurityLevel(server) > serverSecurityThreshold) {\\n            await ns.weaken(server, opts);\\n        } else if (ns.getServerMoneyAvailable(server) < serverMoneyThreshold) {\\n            await ns.grow(server, opts);\\n        } else {\\n            await ns.hack(server, opts);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///55ddb508-c060-4159-8388-fceb70ab7c90\",\"moduleSequenceNumber\":82048}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"harakiri-sushi\",\"_hash\":\"13378b34e479b2f0fbdceaf99819fe1b7259542a34b15afd3953cd74923ef935\",\"moduleSequenceNumber\":82048,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":6.959999999999988,\"minDifficulty\":5,\"moneyAvailable\":1030142.7737438302,\"moneyMax\":4000000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"94.8.1.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",13],\"dataMap\":{\"phantasy\":[0,0,78,0]},\"filename\":\"/scripts/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":906.8609631743998,\"onlineMoneyMade\":0,\"onlineRunningTime\":721.4100000000271,\"pid\":64,\"ramUsage\":2.4,\"server\":\"phantasy\",\"threads\":13,\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///55ddb508-c060-4159-8388-fceb70ab7c90\",\"moduleSequenceNumber\":82188}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/* A simple lightweight script that is deployed\\n * to remote and local servers to repeatedly hack\\n * a particular server.\\n * The smaller this is, the more threads can be deployed.\\n * args[0] - server name\\n * args[1] - threads to attack with\\n */\\nexport async function main(ns, args) {\\n    await hackServer(ns, ns.args[0], ns.args[1]);\\n}\\n\\nasync function hackServer(ns, server, threads) {\\n    ns.disableLog('getServerSecurityLevel');\\n    let serverSecurityThreshold = ns.getServerMinSecurityLevel(server) + 2;\\n    let serverMoneyThreshold = ns.getServerMaxMoney(server) * 0.95;\\n    let opts = { threads: threads, stock: true };\\n    while (true) {\\n        if (ns.getServerSecurityLevel(server) > serverSecurityThreshold) {\\n            await ns.weaken(server, opts);\\n        } else if (ns.getServerMoneyAvailable(server) < serverMoneyThreshold) {\\n            await ns.grow(server, opts);\\n        } else {\\n            await ns.hack(server, opts);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///55ddb508-c060-4159-8388-fceb70ab7c90\",\"moduleSequenceNumber\":82188}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"phantasy\",\"_hash\":\"13378b34e479b2f0fbdceaf99819fe1b7259542a34b15afd3953cd74923ef935\",\"moduleSequenceNumber\":82188,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"zer0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":8.923999999999989,\"minDifficulty\":7,\"moneyAvailable\":5585850.974669145,\"moneyMax\":24000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"91.0.3.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",13],\"dataMap\":{\"max-hardware\":[0,0,91,13]},\"filename\":\"/scripts/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":984.8609631744,\"onlineMoneyMade\":0,\"onlineRunningTime\":721.4100000000271,\"pid\":59,\"ramUsage\":2.4,\"server\":\"max-hardware\",\"threads\":13,\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///55ddb508-c060-4159-8388-fceb70ab7c90\",\"moduleSequenceNumber\":82030}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/* A simple lightweight script that is deployed\\n * to remote and local servers to repeatedly hack\\n * a particular server.\\n * The smaller this is, the more threads can be deployed.\\n * args[0] - server name\\n * args[1] - threads to attack with\\n */\\nexport async function main(ns, args) {\\n    await hackServer(ns, ns.args[0], ns.args[1]);\\n}\\n\\nasync function hackServer(ns, server, threads) {\\n    ns.disableLog('getServerSecurityLevel');\\n    let serverSecurityThreshold = ns.getServerMinSecurityLevel(server) + 2;\\n    let serverMoneyThreshold = ns.getServerMaxMoney(server) * 0.95;\\n    let opts = { threads: threads, stock: true };\\n    while (true) {\\n        if (ns.getServerSecurityLevel(server) > serverSecurityThreshold) {\\n            await ns.weaken(server, opts);\\n        } else if (ns.getServerMoneyAvailable(server) < serverMoneyThreshold) {\\n            await ns.grow(server, opts);\\n        } else {\\n            await ns.hack(server, opts);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///55ddb508-c060-4159-8388-fceb70ab7c90\",\"moduleSequenceNumber\":82030}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"max-hardware\",\"_hash\":\"13378b34e479b2f0fbdceaf99819fe1b7259542a34b15afd3953cd74923ef935\",\"moduleSequenceNumber\":82030,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"sigma-cosmetics\",\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":6.757999999999962,\"minDifficulty\":5,\"moneyAvailable\":2651144.0483275964,\"moneyMax\":10000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"11.4.7.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",13],\"dataMap\":{},\"filename\":\"/scripts/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":721.4100000000271,\"pid\":65,\"ramUsage\":2.4,\"server\":\"omega-net\",\"threads\":13,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/* A simple lightweight script that is deployed\\n * to remote and local servers to repeatedly hack\\n * a particular server.\\n * The smaller this is, the more threads can be deployed.\\n * args[0] - server name\\n * args[1] - threads to attack with\\n */\\nexport async function main(ns, args) {\\n    await hackServer(ns, ns.args[0], ns.args[1]);\\n}\\n\\nasync function hackServer(ns, server, threads) {\\n    ns.disableLog('getServerSecurityLevel');\\n    let serverSecurityThreshold = ns.getServerMinSecurityLevel(server) + 2;\\n    let serverMoneyThreshold = ns.getServerMaxMoney(server) * 0.95;\\n    let opts = { threads: threads, stock: true };\\n    while (true) {\\n        if (ns.getServerSecurityLevel(server) > serverSecurityThreshold) {\\n            await ns.weaken(server, opts);\\n        } else if (ns.getServerMoneyAvailable(server) < serverMoneyThreshold) {\\n            await ns.grow(server, opts);\\n        } else {\\n            await ns.hack(server, opts);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///55ddb508-c060-4159-8388-fceb70ab7c90\",\"moduleSequenceNumber\":84710}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"omega-net\",\"_hash\":\"13378b34e479b2f0fbdceaf99819fe1b7259542a34b15afd3953cd74923ef935\",\"moduleSequenceNumber\":84710,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"zer0\",\"comptek\",\"johnson-ortho\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":28,\"hackDifficulty\":28,\"minDifficulty\":9,\"moneyAvailable\":12125273.4,\"moneyMax\":60626367,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":194,\"serverGrowth\":39}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"15.9.0.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"neo-net\",\"zb-institute\",\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":41,\"hackDifficulty\":41,\"minDifficulty\":14,\"moneyAvailable\":8299600,\"moneyMax\":41498000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":242,\"serverGrowth\":27}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"7.0.8.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\",13],\"dataMap\":{\"iron-gym\":[0,0,0,39]},\"filename\":\"/scripts/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":621.6457223808,\"onlineMoneyMade\":0,\"onlineRunningTime\":721.4100000000271,\"pid\":70,\"ramUsage\":2.4,\"server\":\"iron-gym\",\"threads\":13,\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///55ddb508-c060-4159-8388-fceb70ab7c90\",\"moduleSequenceNumber\":82051}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/* A simple lightweight script that is deployed\\n * to remote and local servers to repeatedly hack\\n * a particular server.\\n * The smaller this is, the more threads can be deployed.\\n * args[0] - server name\\n * args[1] - threads to attack with\\n */\\nexport async function main(ns, args) {\\n    await hackServer(ns, ns.args[0], ns.args[1]);\\n}\\n\\nasync function hackServer(ns, server, threads) {\\n    ns.disableLog('getServerSecurityLevel');\\n    let serverSecurityThreshold = ns.getServerMinSecurityLevel(server) + 2;\\n    let serverMoneyThreshold = ns.getServerMaxMoney(server) * 0.95;\\n    let opts = { threads: threads, stock: true };\\n    while (true) {\\n        if (ns.getServerSecurityLevel(server) > serverSecurityThreshold) {\\n            await ns.weaken(server, opts);\\n        } else if (ns.getServerMoneyAvailable(server) < serverMoneyThreshold) {\\n            await ns.grow(server, opts);\\n        } else {\\n            await ns.hack(server, opts);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///55ddb508-c060-4159-8388-fceb70ab7c90\",\"moduleSequenceNumber\":82051}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"iron-gym\",\"_hash\":\"13378b34e479b2f0fbdceaf99819fe1b7259542a34b15afd3953cd74923ef935\",\"moduleSequenceNumber\":82051,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":13.100000000000028,\"minDifficulty\":10,\"moneyAvailable\":4000000,\"moneyMax\":20000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"36.4.4.6\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"rothman-uni\",\"aerocorp\",\"global-pharm\",\"snap-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":49,\"hackDifficulty\":49,\"minDifficulty\":16,\"moneyAvailable\":50000000,\"moneyMax\":250000000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":500,\"serverGrowth\":43}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"28.5.0.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnitek\",\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":180000000,\"moneyMax\":900000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1035,\"serverGrowth\":58}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"snap-fitness\",\"httpPortOpen\":false,\"ip\":\"28.3.4.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"millenium-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":57,\"hackDifficulty\":57,\"minDifficulty\":19,\"moneyAvailable\":90000000,\"moneyMax\":450000000,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":703,\"serverGrowth\":60}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"run4theh111z\",\"httpPortOpen\":false,\"ip\":\"36.7.4.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-def\",\"fulcrumtech\",\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":536,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-471442.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[2,[20,53,174,27,90,147,120,77,66]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"28.0.6.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"the-hub\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":364,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"8.8.1.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":62.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"avmnite-02h\",26],\"dataMap\":{\"avmnite-02h\":[0,650,0,0]},\"filename\":\"/scripts/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":799.5,\"onlineMoneyMade\":0,\"onlineRunningTime\":721.4100000000271,\"pid\":66,\"ramUsage\":2.4,\"server\":\"avmnite-02h\",\"threads\":26,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/* A simple lightweight script that is deployed\\n * to remote and local servers to repeatedly hack\\n * a particular server.\\n * The smaller this is, the more threads can be deployed.\\n * args[0] - server name\\n * args[1] - threads to attack with\\n */\\nexport async function main(ns, args) {\\n    await hackServer(ns, ns.args[0], ns.args[1]);\\n}\\n\\nasync function hackServer(ns, server, threads) {\\n    ns.disableLog('getServerSecurityLevel');\\n    let serverSecurityThreshold = ns.getServerMinSecurityLevel(server) + 2;\\n    let serverMoneyThreshold = ns.getServerMaxMoney(server) * 0.95;\\n    let opts = { threads: threads, stock: true };\\n    while (true) {\\n        if (ns.getServerSecurityLevel(server) > serverSecurityThreshold) {\\n            await ns.weaken(server, opts);\\n        } else if (ns.getServerMoneyAvailable(server) < serverMoneyThreshold) {\\n            await ns.grow(server, opts);\\n        } else {\\n            await ns.hack(server, opts);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///55ddb508-c060-4159-8388-fceb70ab7c90\",\"moduleSequenceNumber\":84713}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"avmnite-02h\",\"_hash\":\"13378b34e479b2f0fbdceaf99819fe1b7259542a34b15afd3953cd74923ef935\",\"moduleSequenceNumber\":84713,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":2.248000000000001,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":205,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\".\",\"httpPortOpen\":false,\"ip\":\"9.1.9.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"vitalife\",\"blade\",\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":548,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-948141.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":284269483,\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"89.1.8.0\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":7.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"CSEC\",3],\"dataMap\":{\"CSEC\":[0,156,0,6]},\"filename\":\"/scripts/hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":135,\"onlineMoneyMade\":0,\"onlineRunningTime\":721.4100000000271,\"pid\":56,\"ramUsage\":2.4,\"server\":\"CSEC\",\"threads\":3,\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///55ddb508-c060-4159-8388-fceb70ab7c90\",\"moduleSequenceNumber\":82024}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/* A simple lightweight script that is deployed\\n * to remote and local servers to repeatedly hack\\n * a particular server.\\n * The smaller this is, the more threads can be deployed.\\n * args[0] - server name\\n * args[1] - threads to attack with\\n */\\nexport async function main(ns, args) {\\n    await hackServer(ns, ns.args[0], ns.args[1]);\\n}\\n\\nasync function hackServer(ns, server, threads) {\\n    ns.disableLog('getServerSecurityLevel');\\n    let serverSecurityThreshold = ns.getServerMinSecurityLevel(server) + 2;\\n    let serverMoneyThreshold = ns.getServerMaxMoney(server) * 0.95;\\n    let opts = { threads: threads, stock: true };\\n    while (true) {\\n        if (ns.getServerSecurityLevel(server) > serverSecurityThreshold) {\\n            await ns.weaken(server, opts);\\n        } else if (ns.getServerMoneyAvailable(server) < serverMoneyThreshold) {\\n            await ns.grow(server, opts);\\n        } else {\\n            await ns.hack(server, opts);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///55ddb508-c060-4159-8388-fceb70ab7c90\",\"moduleSequenceNumber\":82024}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"CSEC\",\"_hash\":\"13378b34e479b2f0fbdceaf99819fe1b7259542a34b15afd3953cd74923ef935\",\"moduleSequenceNumber\":82024,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"n00dles\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":2.949999999999881,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":54,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"78.3.1.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"55.7.2.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":6000,\"serverGrowth\":0}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":48.369,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":45.6391,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Black Hand\",\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":23.9291,\"isBanned\":false,\"isMember\":false,\"name\":\"NiteSec\",\"playerReputation\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":30.261,\"isBanned\":false,\"isMember\":false,\"name\":\"Sector-12\",\"playerReputation\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":123.6857,\"isBanned\":false,\"isMember\":true,\"name\":\"Netburners\",\"playerReputation\":4183.870333732414}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tian Di Hui\",\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":79.4818,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":20717.371637391243}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{\"ssh\":\"run BruteSSH.exe\",\"ftp\":\"run FTPCrack.exe\",\"nuke\":\"run NUKE.exe\",\"smtp\":\"run relaySMTP.exe\",\"open\":\"run open.js\",\"http\":\"run HTTPWorm.exe\",\"sql\":\"run SQLInject.exe\",\"dash\":\"run /scripts/hax.js dashboard\",\"buyServer\":\"run /scripts/purchaseServers.js\",\"runServer\":\"run /scripts/hax.js autoRemoteHack\",\"hack\":\"run /scripts/hax.js autoHack\",\"scaz\":\"scan-analyze\",\"deploy\":\"run /scripts/hax.js deployHacknet\",\"hax\":\"run /scripts/hax.js\",\"lack\":\"run /scripts/hax.js localHack\"}","GlobalAliasesSave":"{}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":false}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":false}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and install the backdoor on our server. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and install the backdoor on our server. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":false}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":100,\"AutosaveInterval\":120,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":true,\"DisableHotkeys\":true,\"DisableTextEffects\":true,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxLogCapacity\":100,\"MaxPortCapacity\":32,\"MaxTerminalCapacity\":200,\"OwnedAugmentationsOrder\":0,\"PurchaseAugmentationsOrder\":0,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":true,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"UseIEC60027_2\":true,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":14,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"theme\":{\"primarylight\":\"#0f0\",\"primary\":\"#0c0\",\"primarydark\":\"#090\",\"successlight\":\"#0f0\",\"success\":\"#0c0\",\"successdark\":\"#090\",\"errorlight\":\"#f00\",\"error\":\"#c00\",\"errordark\":\"#900\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":-19,\"y\":44,\"opened\":true}}","VersionSave":"10","AllGangsSave":"","LastExportBonus":"1644380824677","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}","SaveTimestamp":"1644380824684"}}