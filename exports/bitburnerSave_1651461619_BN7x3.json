{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":1,\"hp\":10,\"max_hp\":10,\"strength\":1,\"defense\":1,\"dexterity\":2,\"agility\":1,\"charisma\":2,\"intelligence\":90,\"hacking_chance_mult\":1.493000095095716,\"hacking_speed_mult\":1.493000095095716,\"hacking_money_mult\":1.493000095095716,\"hacking_grow_mult\":1.493000095095716,\"hacking_exp\":0,\"strength_exp\":0,\"defense_exp\":0,\"dexterity_exp\":0,\"agility_exp\":0,\"charisma_exp\":0,\"intelligence_exp\":8223.161710173668,\"hacking_mult\":1.493000095095716,\"strength_mult\":1.493000095095716,\"defense_mult\":1.493000095095716,\"dexterity_mult\":2.0692981318026624,\"agility_mult\":1.5676500998505016,\"charisma_mult\":2.5440721620430997,\"hacking_exp_mult\":1.493000095095716,\"strength_exp_mult\":1.493000095095716,\"defense_exp_mult\":1.493000095095716,\"dexterity_exp_mult\":1.493000095095716,\"agility_exp_mult\":1.493000095095716,\"charisma_exp_mult\":1.3096492062243121,\"company_rep_mult\":1.3096492062243121,\"faction_rep_mult\":1.3096492062243121,\"money\":1000000,\"city\":\"Sector-12\",\"location\":\"Travel Agency\",\"jobs\":{},\"companyName\":\"\",\"currentServer\":\"home\",\"purchasedServers\":[],\"hacknetNodes\":[],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[],\"factionInvitations\":[],\"queuedAugmentations\":[],\"augmentations\":[{\"name\":\"NeuroFlux Governor\",\"level\":2},{\"level\":1,\"name\":\"Hacknet Node Core Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node Kernel Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":1,\"name\":\"Augmented Targeting I\"},{\"level\":1,\"name\":\"Speech Processor Implant\"},{\"level\":1,\"name\":\"Augmented Targeting II\"},{\"level\":1,\"name\":\"CashRoot Starter Kit\"}],\"sourceFiles\":[{\"lvl\":3,\"n\":1},{\"lvl\":3,\"n\":2},{\"lvl\":3,\"n\":3},{\"lvl\":3,\"n\":4},{\"lvl\":3,\"n\":5},{\"lvl\":3,\"n\":6},{\"lvl\":1,\"n\":12},{\"lvl\":2,\"n\":7}],\"numPeopleKilled\":0,\"karma\":0,\"crime_money_mult\":1.859701872838523,\"crime_success_mult\":1.859701872838523,\"isWorking\":false,\"focus\":false,\"workType\":\"Working for Faction\",\"workCostMult\":3,\"workExpMult\":2,\"currentWorkFactionName\":\"\",\"currentWorkFactionDescription\":\"\",\"workHackExpGainRate\":0,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":0,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":0,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":0,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":25,\"graftAugmentationName\":\"\",\"timeWorkedGraftAugmentation\":0,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":0,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":72000000,\"work_money_mult\":1.493000095095716,\"hacknet_node_money_mult\":3.3030580777107987,\"hacknet_node_purchase_cost_mult\":0.5383287994826311,\"hacknet_node_ram_cost_mult\":0.7036977771014787,\"hacknet_node_core_cost_mult\":0.7036977771014787,\"hacknet_node_level_cost_mult\":0.5981431105362568,\"hasWseAccount\":false,\"hasTixApiAccess\":false,\"has4SData\":false,\"has4SDataTixApi\":false,\"gang\":null,\"corporation\":{\"ctor\":\"Corporation\",\"data\":{\"name\":\"CO\",\"divisions\":[{\"ctor\":\"Industry\",\"data\":{\"name\":\"AG\",\"type\":\"Agriculture\",\"sciResearch\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Scientific Research\",\"qty\":252.34683994824138,\"qlt\":0,\"dmd\":0,\"dmdR\":[0,0],\"cmp\":0,\"cmpR\":[0,0],\"mv\":0,\"mku\":0,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":0,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"researched\":{},\"reqMats\":{\"Water\":0.5,\"Energy\":0.5},\"prodMats\":[\"Plants\",\"Food\"],\"products\":{},\"makesProducts\":false,\"awareness\":0,\"popularity\":0,\"startingCost\":40000000000,\"reFac\":0.72,\"sciFac\":0.5,\"hwFac\":0.2,\"robFac\":0.3,\"aiFac\":0.3,\"advFac\":0.04,\"prodMult\":11.749845502518738,\"upgrades\":[0,0],\"state\":\"START\",\"newInd\":false,\"offices\":{\"Aevum\":0,\"Chongqing\":0,\"Sector-12\":{\"ctor\":\"OfficeSpace\",\"data\":{\"minEne\":0,\"maxEne\":100,\"minHap\":0,\"maxHap\":100,\"maxMor\":100,\"employees\":[{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"Tf1m9yy\",\"mor\":100,\"hap\":99.99976441473052,\"ene\":99.99976441473052,\"int\":73,\"cha\":78,\"exp\":89.67100000000006,\"cre\":82,\"eff\":88,\"sal\":1227,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"ElYIxJV\",\"mor\":100,\"hap\":99.9985607089277,\"ene\":99.9985607089277,\"int\":89,\"cha\":70,\"exp\":63.67100000000006,\"cre\":87,\"eff\":97,\"sal\":1215,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"YFFf19V\",\"mor\":100,\"hap\":99.99802253027192,\"ene\":99.99802253027192,\"int\":84,\"cha\":50,\"exp\":67.67100000000006,\"cre\":53,\"eff\":75,\"sal\":984,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"NoyudcQ\",\"mor\":100,\"hap\":99.99986739579379,\"ene\":99.99986739579379,\"int\":74,\"cha\":76,\"exp\":72.67100000000006,\"cre\":67,\"eff\":99,\"sal\":1161,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"WEhXf16\",\"mor\":100,\"hap\":99.99885363001962,\"ene\":99.99885363001962,\"int\":85,\"cha\":99,\"exp\":86.67100000000006,\"cre\":83,\"eff\":53,\"sal\":1215,\"loc\":\"\",\"pos\":\"Engineer\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"HjY7yoG\",\"mor\":100,\"hap\":99.99739548237858,\"ene\":99.99739548237858,\"int\":87,\"cha\":62,\"exp\":66.67100000000006,\"cre\":54,\"eff\":62,\"sal\":990,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"gsUw9jl\",\"mor\":100,\"hap\":99.99974193958796,\"ene\":99.99974193958796,\"int\":84,\"cha\":98,\"exp\":55.67100000000006,\"cre\":68,\"eff\":64,\"sal\":1104,\"loc\":\"\",\"pos\":\"Management\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"9QB42l5\",\"mor\":100,\"hap\":99.99768278339452,\"ene\":99.99768278339452,\"int\":87,\"cha\":99,\"exp\":73.67100000000006,\"cre\":69,\"eff\":63,\"sal\":1170,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"V7i8nDB\",\"mor\":100,\"hap\":99.99811992551841,\"ene\":99.99811992551841,\"int\":78,\"cha\":81,\"exp\":96.67100000000006,\"cre\":79,\"eff\":79,\"sal\":1236,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"Tx3ZXdC\",\"mor\":100,\"hap\":99.99983994550733,\"ene\":99.99983994550733,\"int\":56,\"cha\":53,\"exp\":76.67100000000006,\"cre\":71,\"eff\":53,\"sal\":924,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"5C5fB5Q\",\"mor\":100,\"hap\":99.99899970425562,\"ene\":99.99899970425562,\"int\":90,\"cha\":54,\"exp\":52.67100000000006,\"cre\":96,\"eff\":69,\"sal\":1080,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"boiZZwi\",\"mor\":100,\"hap\":99.99816717280594,\"ene\":99.99816717280594,\"int\":90,\"cha\":79,\"exp\":62.67100000000006,\"cre\":58,\"eff\":71,\"sal\":1077,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"HVyMBB7\",\"mor\":100,\"hap\":99.99953882628488,\"ene\":99.99953882628488,\"int\":76,\"cha\":57,\"exp\":74.67100000000006,\"cre\":69,\"eff\":56,\"sal\":993,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"iUTYOOi\",\"mor\":100,\"hap\":99.9991657946049,\"ene\":99.9991657946049,\"int\":62,\"cha\":76,\"exp\":76.67100000000006,\"cre\":80,\"eff\":71,\"sal\":1092,\"loc\":\"\",\"pos\":\"Operations\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"XIWdzoO\",\"mor\":100,\"hap\":99.99877019686816,\"ene\":99.99877019686816,\"int\":60,\"cha\":89,\"exp\":73.67100000000006,\"cre\":84,\"eff\":52,\"sal\":1071,\"loc\":\"\",\"pos\":\"Business\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"kk6RJ1t\",\"mor\":100,\"hap\":99.99821394206421,\"ene\":99.99821394206421,\"int\":58,\"cha\":96,\"exp\":60.67100000000006,\"cre\":61,\"eff\":72,\"sal\":1038,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"In9egcu\",\"mor\":100,\"hap\":99.99779589617958,\"ene\":99.99779589617958,\"int\":75,\"cha\":76,\"exp\":88.67100000000006,\"cre\":76,\"eff\":52,\"sal\":1098,\"loc\":\"\",\"pos\":\"Research & Development\"}},{\"ctor\":\"Employee\",\"data\":{\"cyclesUntilRaise\":400,\"name\":\"l9ydct4\",\"mor\":100,\"hap\":99.99728264165337,\"ene\":99.99728264165337,\"int\":94,\"cha\":88,\"exp\":58.67100000000006,\"cre\":93,\"eff\":61,\"sal\":1179,\"loc\":\"\",\"pos\":\"Research & Development\"}}],\"employeeProd\":{\"Operations\":2369.351920438716,\"Engineer\":567.5058603028509,\"Business\":279.96053594353737,\"Management\":310.06939966106455,\"Research & Development\":829.3725856042868,\"total\":4356.260301950456,\"Unassigned\":0},\"employeeJobs\":{\"Operations\":10,\"Engineer\":2,\"Business\":2,\"Management\":1,\"Research & Development\":3,\"Training\":0,\"Unassigned\":0,\"total\":18},\"loc\":\"Sector-12\",\"size\":18}},\"New Tokyo\":0,\"Ishima\":0,\"Volhaven\":0},\"lastCycleRevenue\":149816.7970551964,\"lastCycleExpenses\":792318.940839125,\"thisCycleRevenue\":0,\"thisCycleExpenses\":198540,\"warehouses\":{\"Aevum\":0,\"Chongqing\":0,\"Sector-12\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":4,\"sizeUsed\":269,\"smartSupplyEnabled\":true,\"smartSupplyUseLeftovers\":{\"Water\":true,\"Energy\":true,\"Food\":true,\"Plants\":true,\"Metal\":true,\"Hardware\":true,\"Chemicals\":true,\"Drugs\":true,\"Robots\":true,\"AICores\":true,\"RealEstate\":true},\"smartSupplyStore\":18.444508914787285,\"loc\":\"Sector-12\",\"size\":400,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Water\",\"qty\":0,\"qlt\":0,\"dmd\":76.0222127407724,\"dmdR\":[65,85],\"cmp\":50.672581382734876,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":9.213277249862212,\"sll\":0,\"prd\":-9.213277249862212,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1488.6378321457987,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Energy\",\"qty\":0,\"qlt\":0,\"dmd\":88.58465522815989,\"dmdR\":[80,99],\"cmp\":78.6357383659557,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":9.213277249862212,\"sll\":0,\"prd\":-9.213277249862212,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2017.14613611519,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Food\",\"qty\":0,\"qlt\":22.180008283631086,\"dmd\":89.0713181016922,\"dmdR\":[70,90],\"cmp\":61.558476495889366,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":18.426554499724425,\"prd\":18.426554499724425,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":4877.563317875016,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":67.13053010693118}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Plants\",\"qty\":0,\"qlt\":22.180008283631086,\"dmd\":77.60038071049017,\"dmdR\":[20,90],\"cmp\":41.416635143761944,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":18.426554499724425,\"prd\":18.426554499724425,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":3245.4569038189825,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":87.740504430909}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Metal\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Hardware\",\"qty\":0,\"qlt\":0,\"dmd\":89.06550883197428,\"dmdR\":[80,90],\"cmp\":82.05069863475109,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":8320.776183526426,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Chemicals\",\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Drugs\",\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Robots\",\"qty\":0,\"qlt\":0,\"dmd\":85.32432108814645,\"dmdR\":[80,99],\"cmp\":87.87779015873885,\"cmpR\":[80,99],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":71822.08912189926,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"AICores\":{\"ctor\":\"Material\",\"data\":{\"name\":\"AI Cores\",\"qty\":0,\"qlt\":0,\"dmd\":86.81069511881702,\"dmdR\":[80,99],\"cmp\":84.5038896962367,\"cmpR\":[80,99],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":15085.19504761426,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}},\"RealEstate\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Real Estate\",\"qty\":53800,\"qlt\":0,\"dmd\":45.849527714382916,\"dmdR\":[5,99],\"cmp\":50.175100861135206,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":10,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":74016.79302143336,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0,\"maxsll\":0}}}}},\"New Tokyo\":0,\"Ishima\":0,\"Volhaven\":0}}}],\"funds\":1.0000000000000001e+52,\"revenue\":149816.7970551964,\"expenses\":792318.940839125,\"fundingRound\":0,\"public\":true,\"totalShares\":1200000000,\"numShares\":1167000000,\"shareSalesUntilPriceUpdate\":1000000,\"shareSaleCooldown\":0,\"issueNewSharesCooldown\":188620,\"dividendPercentage\":37,\"dividendTaxPercentage\":50,\"issuedShares\":0,\"sharePrice\":77.9214728805546,\"storedCycles\":1281374,\"avgProfit\":-642502.1437839286,\"state\":{\"ctor\":\"CorporationState\",\"data\":{\"state\":1}},\"unlockUpgrades\":[0,1,0,0,0,0,0,1,1],\"upgrades\":[0,0,0,0,0,0,0,0,0,0],\"upgradeMultipliers\":[1,1,1,1,1,1,1,1,1,1]}},\"bladeburner\":{\"ctor\":\"Bladeburner\",\"data\":{\"numHosp\":0,\"moneyLost\":0,\"rank\":0,\"maxRank\":0,\"skillPoints\":0,\"totalSkillPoints\":0,\"teamSize\":0,\"teamLost\":0,\"hpLost\":0,\"storedCycles\":4,\"randomEventCounter\":39,\"actionTimeToComplete\":0,\"actionTimeCurrent\":0,\"actionTimeOverflow\":0,\"action\":{\"ctor\":\"ActionIdentifier\",\"data\":{\"name\":\"\",\"type\":1}},\"cities\":{\"Aevum\":{\"ctor\":\"City\",\"data\":{\"name\":\"Aevum\",\"pop\":1115768941,\"popEst\":1086033621.2714915,\"comms\":7,\"chaos\":0}},\"Chongqing\":{\"ctor\":\"City\",\"data\":{\"name\":\"Chongqing\",\"pop\":1416668099,\"popEst\":1481543073.8351073,\"comms\":136,\"chaos\":0}},\"Sector-12\":{\"ctor\":\"City\",\"data\":{\"name\":\"Sector-12\",\"pop\":1213335455,\"popEst\":764125886.7069919,\"comms\":143,\"chaos\":0}},\"New Tokyo\":{\"ctor\":\"City\",\"data\":{\"name\":\"New Tokyo\",\"pop\":1415056648,\"popEst\":1055889091.5595263,\"comms\":115,\"chaos\":0}},\"Ishima\":{\"ctor\":\"City\",\"data\":{\"name\":\"Ishima\",\"pop\":1450778550,\"popEst\":1740983546.2009618,\"comms\":96,\"chaos\":0}},\"Volhaven\":{\"ctor\":\"City\",\"data\":{\"name\":\"Volhaven\",\"pop\":1290334089,\"popEst\":1574542445.0431173,\"comms\":45,\"chaos\":0}}},\"city\":\"Sector-12\",\"skills\":{},\"skillMultipliers\":{\"successChanceAll\":1,\"successChanceStealth\":1,\"successChanceKill\":1,\"successChanceContract\":1,\"successChanceOperation\":1,\"successChanceEstimate\":1,\"actionTime\":1,\"effHack\":1,\"effStr\":1,\"effDef\":1,\"effDex\":1,\"effAgi\":1,\"effCha\":1,\"effInt\":1,\"stamina\":1,\"money\":1,\"expGain\":1},\"staminaBonus\":0,\"maxStamina\":1.12,\"stamina\":1.12,\"contracts\":{\"Tracking\":{\"ctor\":\"Contract\",\"data\":{\"name\":\"Tracking\",\"level\":1,\"maxLevel\":1,\"autoLevel\":true,\"baseDifficulty\":117.24320632698274,\"difficultyFac\":1.02,\"rewardFac\":1.041,\"successes\":0,\"failures\":0,\"rankGain\":0.3,\"rankLoss\":0,\"hpLoss\":0.5,\"hpLost\":0,\"isStealth\":true,\"isKill\":false,\"count\":137.47416666666658,\"weights\":{\"hack\":0,\"str\":0.05,\"def\":0.05,\"dex\":0.35,\"agi\":0.35,\"cha\":0.1,\"int\":0.05},\"decays\":{\"hack\":0,\"str\":0.91,\"def\":0.91,\"dex\":0.91,\"agi\":0.91,\"cha\":0.9,\"int\":1},\"teamCount\":0}},\"Bounty Hunter\":{\"ctor\":\"Contract\",\"data\":{\"name\":\"Bounty Hunter\",\"level\":1,\"maxLevel\":1,\"autoLevel\":true,\"baseDifficulty\":257.53145847496245,\"difficultyFac\":1.04,\"rewardFac\":1.085,\"successes\":0,\"failures\":0,\"rankGain\":0.9,\"rankLoss\":0,\"hpLoss\":1,\"hpLost\":0,\"isStealth\":false,\"isKill\":true,\"count\":10.36062499999999,\"weights\":{\"hack\":0,\"str\":0.15,\"def\":0.15,\"dex\":0.25,\"agi\":0.25,\"cha\":0.1,\"int\":0.1},\"decays\":{\"hack\":0,\"str\":0.91,\"def\":0.91,\"dex\":0.91,\"agi\":0.91,\"cha\":0.8,\"int\":0.9},\"teamCount\":0}},\"Retirement\":{\"ctor\":\"Contract\",\"data\":{\"name\":\"Retirement\",\"level\":1,\"maxLevel\":1,\"autoLevel\":true,\"baseDifficulty\":185.2834105279012,\"difficultyFac\":1.03,\"rewardFac\":1.065,\"successes\":0,\"failures\":0,\"rankGain\":0.6,\"rankLoss\":0,\"hpLoss\":1,\"hpLost\":0,\"isStealth\":false,\"isKill\":true,\"count\":28.576666666666693,\"weights\":{\"hack\":0,\"str\":0.2,\"def\":0.2,\"dex\":0.2,\"agi\":0.2,\"cha\":0.1,\"int\":0.1},\"decays\":{\"hack\":0,\"str\":0.91,\"def\":0.91,\"dex\":0.91,\"agi\":0.91,\"cha\":0.8,\"int\":0.9},\"teamCount\":0}}},\"operations\":{\"Investigation\":{\"ctor\":\"Operation\",\"data\":{\"name\":\"Investigation\",\"level\":1,\"maxLevel\":1,\"autoLevel\":true,\"baseDifficulty\":378.8588840533054,\"difficultyFac\":1.03,\"rewardFac\":1.07,\"successes\":0,\"failures\":0,\"rankGain\":2.2,\"rankLoss\":0.2,\"hpLoss\":0,\"hpLost\":0,\"isStealth\":true,\"isKill\":false,\"count\":18.536666666666726,\"weights\":{\"hack\":0.25,\"str\":0.05,\"def\":0.05,\"dex\":0.2,\"agi\":0.1,\"cha\":0.25,\"int\":0.1},\"decays\":{\"hack\":0.85,\"str\":0.9,\"def\":0.9,\"dex\":0.9,\"agi\":0.9,\"cha\":0.7,\"int\":0.9},\"teamCount\":0,\"reqdRank\":25}},\"Undercover Operation\":{\"ctor\":\"Operation\",\"data\":{\"name\":\"Undercover Operation\",\"level\":1,\"maxLevel\":1,\"autoLevel\":true,\"baseDifficulty\":523.6771641989004,\"difficultyFac\":1.04,\"rewardFac\":1.09,\"successes\":0,\"failures\":0,\"rankGain\":4.4,\"rankLoss\":0.4,\"hpLoss\":2,\"hpLost\":0,\"isStealth\":true,\"isKill\":false,\"count\":18.49208333333339,\"weights\":{\"hack\":0.2,\"str\":0.05,\"def\":0.05,\"dex\":0.2,\"agi\":0.2,\"cha\":0.2,\"int\":0.1},\"decays\":{\"hack\":0.8,\"str\":0.9,\"def\":0.9,\"dex\":0.9,\"agi\":0.9,\"cha\":0.7,\"int\":0.9},\"teamCount\":0,\"reqdRank\":100}},\"Sting Operation\":{\"ctor\":\"Operation\",\"data\":{\"name\":\"Sting Operation\",\"level\":1,\"maxLevel\":1,\"autoLevel\":true,\"baseDifficulty\":641.74525692629,\"difficultyFac\":1.04,\"rewardFac\":1.095,\"successes\":0,\"failures\":0,\"rankGain\":5.5,\"rankLoss\":0.5,\"hpLoss\":2.5,\"hpLost\":0,\"isStealth\":true,\"isKill\":false,\"count\":121.3154166666658,\"weights\":{\"hack\":0.25,\"str\":0.05,\"def\":0.05,\"dex\":0.25,\"agi\":0.1,\"cha\":0.2,\"int\":0.1},\"decays\":{\"hack\":0.8,\"str\":0.85,\"def\":0.85,\"dex\":0.85,\"agi\":0.85,\"cha\":0.7,\"int\":0.9},\"teamCount\":0,\"reqdRank\":500}},\"Raid\":{\"ctor\":\"Operation\",\"data\":{\"name\":\"Raid\",\"level\":1,\"maxLevel\":1,\"autoLevel\":true,\"baseDifficulty\":855.6306984828169,\"difficultyFac\":1.045,\"rewardFac\":1.1,\"successes\":0,\"failures\":0,\"rankGain\":55,\"rankLoss\":2.5,\"hpLoss\":50,\"hpLost\":0,\"isStealth\":false,\"isKill\":true,\"count\":3.344166666666674,\"weights\":{\"hack\":0.1,\"str\":0.2,\"def\":0.2,\"dex\":0.2,\"agi\":0.2,\"cha\":0,\"int\":0.1},\"decays\":{\"hack\":0.7,\"str\":0.8,\"def\":0.8,\"dex\":0.8,\"agi\":0.8,\"cha\":0,\"int\":0.9},\"teamCount\":0,\"reqdRank\":3000}},\"Stealth Retirement Operation\":{\"ctor\":\"Operation\",\"data\":{\"name\":\"Stealth Retirement Operation\",\"level\":1,\"maxLevel\":1,\"autoLevel\":true,\"baseDifficulty\":1037.0002011838887,\"difficultyFac\":1.05,\"rewardFac\":1.11,\"successes\":0,\"failures\":0,\"rankGain\":22,\"rankLoss\":2,\"hpLoss\":10,\"hpLost\":0,\"isStealth\":true,\"isKill\":true,\"count\":68.67354166666605,\"weights\":{\"hack\":0.1,\"str\":0.1,\"def\":0.1,\"dex\":0.3,\"agi\":0.3,\"cha\":0,\"int\":0.1},\"decays\":{\"hack\":0.7,\"str\":0.8,\"def\":0.8,\"dex\":0.8,\"agi\":0.8,\"cha\":0,\"int\":0.9},\"teamCount\":0,\"reqdRank\":20000}},\"Assassination\":{\"ctor\":\"Operation\",\"data\":{\"name\":\"Assassination\",\"level\":1,\"maxLevel\":1,\"autoLevel\":true,\"baseDifficulty\":1597.1944713130074,\"difficultyFac\":1.06,\"rewardFac\":1.14,\"successes\":0,\"failures\":0,\"rankGain\":44,\"rankLoss\":4,\"hpLoss\":5,\"hpLost\":0,\"isStealth\":true,\"isKill\":true,\"count\":71.65895833333273,\"weights\":{\"hack\":0.1,\"str\":0.1,\"def\":0.1,\"dex\":0.3,\"agi\":0.3,\"cha\":0,\"int\":0.1},\"decays\":{\"hack\":0.6,\"str\":0.8,\"def\":0.8,\"dex\":0.8,\"agi\":0.8,\"cha\":0,\"int\":0.8},\"teamCount\":0,\"reqdRank\":50000}}},\"blackops\":{},\"logging\":{\"general\":true,\"contracts\":true,\"ops\":true,\"blackops\":true,\"events\":true},\"automateEnabled\":false,\"automateActionHigh\":{\"ctor\":\"ActionIdentifier\",\"data\":{\"name\":\"\",\"type\":1}},\"automateThreshHigh\":0,\"automateActionLow\":{\"ctor\":\"ActionIdentifier\",\"data\":{\"name\":\"\",\"type\":1}},\"automateThreshLow\":0,\"consoleHistory\":[],\"consoleLogs\":[\"Bladeburner Console\",\"Type 'help' to see console commands\"]}},\"bladeburner_max_stamina_mult\":1.12,\"bladeburner_stamina_gain_mult\":1.12,\"bladeburner_analysis_mult\":1.12,\"bladeburner_success_chance_mult\":1.12,\"sleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":7,\"entropy\":0,\"lastUpdate\":1651461618997,\"lastSave\":1651461616143,\"totalPlaytime\":10376821800,\"playtimeSinceLastAug\":22400,\"playtimeSinceLastBitnode\":273678800,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":0,\"hacknet\":0,\"hacknet_expenses\":0,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":0,\"work\":0,\"servers\":0,\"other\":0,\"augmentations\":0}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-24768,\"codingcontract\":0,\"corporation\":-156625843766.847,\"crime\":0,\"gang\":0,\"hacking\":785751055,\"hacknet\":13704893209.518635,\"hacknet_expenses\":-7029009313.021111,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":-14523183342709258000,\"work\":0,\"servers\":-14523182891410278000,\"other\":-314200000,\"augmentations\":-301788026418.20996}},\"scriptProdSinceLastAug\":0,\"exploits\":[\"N00dles\",\"EditSaveFile\",\"YoureNotMeantToAccessThis\"],\"achievements\":[{\"ID\":\"CYBERSEC\",\"unlockedOn\":1642198554797},{\"ID\":\"NITESEC\",\"unlockedOn\":1642198554810},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1642198554813},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1642198554816},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1642198554819},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1642198554823},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1642198554826},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1642198554830},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1642198554834},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1642198554837},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1642198554840},{\"ID\":\"NS2\",\"unlockedOn\":1642198554843},{\"ID\":\"FROZE\",\"unlockedOn\":1642198554847},{\"ID\":\"SCRIPTS_30\",\"unlockedOn\":1642198554849},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1642198554853},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1642198554855},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1642198554858},{\"ID\":\"DONATION\",\"unlockedOn\":1642198554862},{\"ID\":\"TOR\",\"unlockedOn\":1642198554865},{\"ID\":\"4S\",\"unlockedOn\":1642198554867},{\"ID\":\"DAEDALUS\",\"unlockedOn\":1642198794816},{\"ID\":\"SF1.1\",\"unlockedOn\":1642199274811},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1642199274820},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1642738642559},{\"ID\":\"TRAVEL\",\"unlockedOn\":1642962148551},{\"ID\":\"N00DLES\",\"unlockedOn\":1643223570990},{\"ID\":\"DISCOUNT\",\"unlockedOn\":1643342251031},{\"ID\":\"WORKOUT\",\"unlockedOn\":1643342310977},{\"ID\":\"HOSPITALIZED\",\"unlockedOn\":1643343810986},{\"ID\":\"GANG\",\"unlockedOn\":1643492387763},{\"ID\":\"FULL_GANG\",\"unlockedOn\":1643637407795},{\"ID\":\"GANG_MEMBER_POWER\",\"unlockedOn\":1643638067757},{\"ID\":\"REPUTATION_10M\",\"unlockedOn\":1643783614558},{\"ID\":\"SF2.1\",\"unlockedOn\":1643950774572},{\"ID\":\"CORPORATION\",\"unlockedOn\":1644029434551},{\"ID\":\"EDITSAVEFILE\",\"unlockedOn\":1644548478251},{\"ID\":\"30_HACKNET_NODE\",\"unlockedOn\":1644616585324},{\"ID\":\"MAX_CORES\",\"unlockedOn\":1644631058379},{\"ID\":\"MONEY_1Q\",\"unlockedOn\":1644894384975},{\"ID\":\"SF3.1\",\"unlockedOn\":1644978324968},{\"ID\":\"MAX_RAM\",\"unlockedOn\":1645322321671},{\"ID\":\"CORPORATION_REAL_ESTATE\",\"unlockedOn\":1645480601873},{\"ID\":\"CORPORATION_BRIBE\",\"unlockedOn\":1645636901815},{\"ID\":\"SF4.1\",\"unlockedOn\":1645668283454},{\"ID\":\"QUEUE_40\",\"unlockedOn\":1646158366608},{\"ID\":\"DEVMENU\",\"unlockedOn\":1646194895641},{\"ID\":\"NEUROFLUX_255\",\"unlockedOn\":1646235482188},{\"ID\":\"FAST_BN\",\"unlockedOn\":1646236682177},{\"ID\":\"SF5.1\",\"unlockedOn\":1647623945870},{\"ID\":\"CHALLENGE_BN6\",\"unlockedOn\":1647803738825},{\"ID\":\"INDECISIVE\",\"unlockedOn\":1647807388849},{\"ID\":\"SF6.1\",\"unlockedOn\":1647831088850},{\"ID\":\"BLADEBURNER_DIVISION\",\"unlockedOn\":1647914608833},{\"ID\":\"THE_COVENANT\",\"unlockedOn\":1647950068818},{\"ID\":\"ILLUMINATI\",\"unlockedOn\":1647967048840},{\"ID\":\"COMBAT_3000\",\"unlockedOn\":1647986668822},{\"ID\":\"BLADEBURNER_OVERCLOCK\",\"unlockedOn\":1648061008822},{\"ID\":\"HACKING_100000\",\"unlockedOn\":1648315289227},{\"ID\":\"SF12.1\",\"unlockedOn\":1648350149229},{\"ID\":\"SF7.1\",\"unlockedOn\":1648725699031},{\"ID\":\"CORPORATION_PROD_1000\",\"unlockedOn\":1649103101793},{\"ID\":\"CORPORATION_EMPLOYEE_3000\",\"unlockedOn\":1650171954872},{\"ID\":\"BLADEBURNER_UNSPENT_100000\",\"unlockedOn\":1650463333880}],\"terminalCommandHistory\":[\"scan-analyze 10\",\"backdoor\",\"home\",\"run /bin/find_server.js fulcrumtech\",\"scan-analyze 4\",\"backdoor\",\"run /bin/tor.js\",\"run /bin/pwn.js\",\"run /bin/bladeSkillManager.js\",\"run /scripts/purchaseServers.js\",\"run /scripts/autoRemoteHack.js\",\"ps\",\"buy -l\",\"run /bin/hacknetManager.js\",\"run /bin/pwn.js\",\"run /bin/tor.js\",\"run /bin/bladeSkillManager.js\",\"run /bin/hacknetManager.js\",\"run /bin/hulk.js --goal 100000\",\"nano /bin/hulk.js\",\"run /bin/hulk.js --goal 100000\",\"run /bin/hulk.js --goal 500000\",\"run /bin/hulk.js --goal 1000000\",\"run /bin/pwn.js\",\"run /bin/hacknetManager.js\",\"run /bin/tor.js\",\"run /bin/bladeSkillManager.js\",\"goof\",\"run /scripts/purchaseServers.js\",\"run /scripts/autoRemoteHack.js\",\"buy -l\",\"run /scripts/autoRemoteHack.js\",\"run /bin/hulk.js --work 'Field Work'\",\"kill 254\",\"run /bin/hulk.js --work 'Field Work' --goal 150\",\"ps\",\"free\",\"alias\",\"bail\",\"ps\",\"run /bin/hulk.js --work 'Field Work' --goal 350\",\"scan-analyze 2\",\"backdoor\",\"home\",\"run /bin/find_server.js avmnite-02h\",\"connect n00dles\",\"connect nectar-net\",\"connect neo-net\",\"connect avmnite-02h\",\"backdoor\"],\"identifier\":\"10ba7f5ef0e5c2\",\"factionWorkType\":\"Faction Field Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":8,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"55.5.4.2\",\"isConnectedTo\":true,\"maxRam\":1073741824,\"messages\":[\"hackers-starting-handbook.lit\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"b1t_flum3.exe\",\"BruteSSH.exe\",\"Formulas.exe\"],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function scan(ns, parent, server, list) {\\n\\tconst CHILDREN = ns.scan(server);\\n\\tfor (let child of CHILDREN) {\\n\\t\\tif (parent == child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tlist.push(child);\\n\\n\\t\\tscan(ns, server, child, list);\\n\\t}\\n}\\n\\nexport function list_servers(ns) {\\n\\tconst list = [];\\n\\tscan(ns, '', 'home', list);\\n\\treturn list;\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst args = ns.flags([[\\\"help\\\", false]]);\\n\\tif (args.help) {\\n\\t\\tns.tprint(\\\"This script lists all servers on which you can run scripts.\\\");\\n\\t\\tns.tprint(`Usage: run ${ns.getScriptName()}`);\\n\\t\\tns.tprint(\\\"Example:\\\");\\n\\t\\tns.tprint(`> run ${ns.getScriptName()}`);\\n\\t\\treturn;\\n\\t}\\n\\n\\tconst SERVERS = list_servers(ns).filter(s => ns.hasRootAccess(s)).concat(['home']);\\n\\tfor (const SERVER of SERVERS) {\\n\\t\\tconst USED = ns.getServerUsedRam(SERVER);\\n\\t\\tconst MAXRAM = ns.getServerMaxRam(SERVER);\\n\\t\\tns.tprint(SERVER + \\\":open:\\\" + (MAXRAM - USED));\\n\\t}\\n}\",\"filename\":\"known-servers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"known-servers.js\",\"url\":\"blob:file:///a1b4ad44-9bfd-4719-9e1f-109bcf8d879a\"}],\"dependents\":[],\"ramUsage\":1.95,\"server\":\"home\",\"moduleSequenceNumber\":65205,\"_hash\":\"ff9ee47b362bb44d4412104f4f78885ba1acd748d86fe010c149155bbca45423\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function getPortToolCount(ns) {\\n\\tconst TOOLS = [\\\"BruteSSH.exe\\\", \\\"FTPCrack.exe\\\", \\\"relaySMTP.exe\\\", \\\"HTTPWorm.exe\\\", \\\"SQLInject.exe\\\"];\\n\\tlet count = 0;\\n\\tfor (let tool of TOOLS) {\\n\\t\\tif (ns.fileExists(tool)) {\\n\\t\\t\\tns.tprint(tool + \\\" has been found\\\");\\n\\t\\t\\tcount += 1;\\n\\t\\t} else {\\n\\t\\t\\tns.tprint(tool + \\\" not found\\\");\\n\\t\\t}\\n\\t}\\n\\n\\tns.tprint(\\\"Found \\\" + count + \\\" port opening tools\\\");\\n\\treturn count;\\n}\\n\\nexport function canOpen(ns, target) {\\n\\tif (getPortToolCount(ns) >= ns.getServerNumPortsRequired(target)) {\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\treturn false;\\n\\t}\\n}\\n\\nexport function openPorts(ns, server) {\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\")) {\\n\\t\\tns.brutessh(server);\\n\\t}\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\")) {\\n\\t\\tns.ftpcrack(server);\\n\\t}\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\")) {\\n\\t\\tns.relaysmtp(server);\\n\\t}\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\")) {\\n\\t\\tns.httpworm(server);\\n\\t}\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\")) {\\n\\t\\tns.sqlinject(server);\\n\\t}\\n\\treturn;\\n}\\n\\nexport function openServer(ns, target) {\\n\\tif (canOpen(ns, target)) {\\n\\t\\topenPorts(ns, target);\\n\\t\\tns.nuke(target);\\n\\t} else {\\n\\t\\tns.tprint(\\\"No can open \\\" + target);\\n\\t}\\n\\treturn;\\n}\\n\\n/**\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n\\tconst args = ns.flags([[\\\"help\\\", false]]);\\n\\tif (args.help) {\\n\\t\\tns.tprint(\\\"This script attempts to root a target server.\\\");\\n\\t\\tns.tprint(`Usage: run ${ns.getScriptName()}`);\\n\\t\\tns.tprint(\\\"Example:\\\");\\n\\t\\tns.tprint(`> run ${ns.getScriptName()}`);\\n\\t\\treturn;\\n\\t}\\n\\n\\tconst target = ns.args[0];\\n\\topenServer(ns, target);\\n}\",\"filename\":\"open.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"open.js\",\"url\":\"blob:file:///0e5fa0c9-2ca6-4749-8e43-17e3066b223a\"}],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"home\",\"moduleSequenceNumber\":65206,\"_hash\":\"18c7464b7aac5841f5b2acd5e750cac9f1a51745ba9fb6d63123c9ac0aae4be8\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getHackScript, getServerPrefix } from 'import.js';\\nlet hackablePorts;\\n\\n/* Searches for servers that are hackable,\\n * cracks them if you don't have root access,\\n * installs a hack script, and instructs them to\\n * HACK THEMSELVES\\n */\\nexport const main = async function (ns) {\\n    do {\\n        findHackablePorts(ns);\\n        await findServer(ns, 'home', 'home', hackServer);\\n        await ns.sleep(60 * 1000);\\n    } while (true);\\n}\\n\\nasync function findServer(ns, startServer, targetServer, func) {\\n    let servers = ns.scan(targetServer, true).filter((server) => server !== startServer && !server.includes(getServerPrefix()));\\n    for (const server of servers) {\\n        const success = await func.call(this, ns, server);\\n        if (success) {\\n            await findServer(ns, targetServer, server, func);\\n        }\\n    }\\n}\\n\\nasync function hackServer(ns, server) {\\n    if (!crackServer(ns, server)) {\\n        return false;\\n    }\\n    ns.killall(server);\\n    let scriptRam = ns.getScriptRam(getHackScript());\\n    let serverRam = ns.getServerMaxRam(server);\\n    let threads = Math.floor(serverRam / scriptRam);\\n    await ns.scp(getHackScript(), server);\\n    if (threads > 0) {\\n        ns.print(`Starting ${threads} processes on ${server}`);\\n        ns.exec(getHackScript(), server, threads, server, threads);\\n    }\\n    return true;\\n}\\n\\nfunction crackServer(ns, server) {\\n    if (ns.hasRootAccess(server)) {\\n        return true;\\n    }\\n\\n    if (ns.fileExists('BruteSSH.exe')) {\\n        ns.brutessh(server);\\n    }\\n    if (ns.fileExists('FTPCrack.exe')) {\\n        ns.ftpcrack(server);\\n    }\\n    if (ns.fileExists('relaySMTP.exe')) {\\n        ns.relaysmtp(server);\\n    }\\n    if (ns.fileExists('HTTPWorm.exe')) {\\n        ns.httpworm(server);\\n    }\\n    if (ns.fileExists('SQLInject.exe')) {\\n        ns.sqlinject(server);\\n    }\\n    if (ns.getServerRequiredHackingLevel(server) > ns.getHackingLevel() ||\\n        ns.getServerNumPortsRequired(server) > hackablePorts) {\\n        return false;\\n    } else {\\n        ns.nuke(server);\\n        ns.tprint(`New Server Cracked: ${server}!`);\\n        return true;\\n    }\\n}\\n\\nexport function findHackablePorts(ns) {\\n    let hackPorts = 0;\\n    if (ns.fileExists('BruteSSH.exe')) {\\n        hackPorts += 1;\\n    }\\n    if (ns.fileExists('FTPCrack.exe')) {\\n        hackPorts += 1;\\n    }\\n    if (ns.fileExists('relaySMTP.exe')) {\\n        hackPorts += 1;\\n    }\\n    if (ns.fileExists('HTTPWorm.exe')) {\\n        hackPorts += 1;\\n    }\\n    if (ns.fileExists('SQLInject.exe')) {\\n        hackPorts += 1;\\n    }\\n    hackablePorts = hackPorts;\\n}\",\"filename\":\"/bin/pwn.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"import.js\",\"url\":\"blob:file:///227f17a0-e6e1-4a0c-9bbb-930fe2332434\",\"moduleSequenceNumber\":61479},{\"filename\":\"/bin/pwn.js\",\"url\":\"blob:file:///c6c58a64-1902-486e-823e-b03ce060f397\",\"moduleSequenceNumber\":61505}],\"dependents\":[],\"ramUsage\":5.05,\"server\":\"home\",\"moduleSequenceNumber\":65207,\"_hash\":\"f0240c721cd5a1d6f5a15101cebc1b3786547715d356f8d4fe1dccc6bd1019a2\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getFolder, getServerPrefix } from 'import.js';\\nlet maxValueServers;\\n\\n/* Identify servers worth more than $10 Billion,\\n * deploy the hack script and attack those servers\\n * using all purchased servers.\\n */\\nexport async function main(ns) {\\n    maxValueServers = {\\n        zero: [],\\n        million: [],\\n        billion: [],\\n        trillion: []\\n    };\\n    findServer(ns, 'home', 'home', checkValue);\\n    ns.run(`/${getFolder()}/remoteHack.js`, 1, highest(ns).join(','));\\n}\\n\\nfunction findServer(ns, startServer, targetServer, func) {\\n    let servers = ns.scan(targetServer, true).filter((server) => server !== startServer && !server.includes(getServerPrefix));\\n    if (!ns.hasRootAccess(targetServer)) { return false; }\\n    servers.forEach((server) => {\\n        func.call(this, ns, server);\\n        if (ns.hasRootAccess(server)) {\\n            findServer(ns, targetServer, server, func);\\n        }\\n    });\\n}\\n\\nfunction checkValue(ns, server) {\\n    if (!ns.hasRootAccess(server)) {\\n        return;\\n    }\\n    let serverMoney = ns.getServerMaxMoney(server);\\n    if (serverMoney > 1e12) {\\n        maxValueServers.trillion.push(server);\\n    } else if (serverMoney > 1e9) {\\n        maxValueServers.billion.push(server);\\n    } else if (serverMoney > 0) {\\n        maxValueServers.million.push(server);\\n    } else {\\n        maxValueServers.zero.push(server);\\n    }\\n}\\n\\nfunction highest(ns) {\\n    if (maxValueServers.trillion.length > 0) {\\n        return maxValueServers.trillion;\\n    }\\n    if (maxValueServers.billion.length > 0) {\\n        return maxValueServers.billion;\\n    }\\n    if (maxValueServers.million.length > 0) {\\n        return maxValueServers.million;\\n    }\\n}\",\"filename\":\"/scripts/autoRemoteHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"import.js\",\"url\":\"blob:file:///a13b5269-74cb-4651-8d51-fda60de6530c\",\"moduleSequenceNumber\":61479},{\"filename\":\"/scripts/autoRemoteHack.js\",\"url\":\"blob:file:///3ad3d22f-df9c-441a-b09c-cee7824db0a3\",\"moduleSequenceNumber\":62998}],\"dependents\":[],\"ramUsage\":2.95,\"server\":\"home\",\"moduleSequenceNumber\":65208,\"_hash\":\"0a44f15d5c808191719bdc1a774692b405faf03d995467120b769bf80fcccaa2\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getFolder, getServerPrefix } from 'import.js';\\nimport { serverHackStatus, serverReport } from '/scripts/serverStatus.js';\\n\\n/*\\n * This is a dashboard that outputs the status\\n * of your entire server network.\\n */\\nexport async function main(ns) {\\n    findServer(ns, 'home', 'home', 1);\\n}\\n\\nfunction findServer(ns, startServer, targetServer, i) {\\n    let servers = ns.scan(targetServer, true)\\n        .filter((server) => server !== startServer && !server.includes(getServerPrefix()));\\n    servers.forEach((server) => {\\n        ns.tprint(`😹${'>'.repeat(i)}`);\\n        serverReport(ns, server);\\n        if (serverHackStatus(ns, server) !== \\\"🔐\\\") {\\n            findServer(ns, targetServer, server, i + 1);\\n        }\\n    });\\n}\\n\",\"filename\":\"/scripts/dashboard.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/serverStatus.js\",\"url\":\"blob:file:///d9384e31-f9ec-4ff1-b33a-95f592cfffa7\",\"moduleSequenceNumber\":421141},{\"filename\":\"import.js\",\"url\":\"blob:file:///8d9fc83a-3a95-4465-a603-b7bf10594c73\",\"moduleSequenceNumber\":420825},{\"filename\":\"/scripts/dashboard.js\",\"url\":\"blob:file:///a402c665-d75b-45c4-bade-33c9b12d13eb\",\"moduleSequenceNumber\":421143}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"home\",\"moduleSequenceNumber\":65209,\"_hash\":\"220e6bc01c4c625d7a960dc7a5284658e52b1df2dd9281487a64407abd3a9d5f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/* A simple lightweight script that is deployed\\n * to remote and local servers to repeatedly hack\\n * a particular server.\\n * The smaller this is, the more threads can be deployed.\\n * args[0] - server name\\n * args[1] - threads to attack with\\n */\\nexport async function main(ns, args) {\\n    await hackServer(ns, ns.args[0], ns.args[1]);\\n}\\n\\nasync function hackServer(ns, server, threads) {\\n    ns.disableLog('getServerSecurityLevel');\\n    let serverSecurityThreshold = ns.getServerMinSecurityLevel(server) + 2;\\n    let serverMoneyThreshold = ns.getServerMaxMoney(server) * 0.95;\\n    let opts = { threads: threads, stock: true };\\n    while (true) {\\n        if (ns.getServerSecurityLevel(server) > serverSecurityThreshold) {\\n            await ns.weaken(server, opts);\\n        } else if (ns.getServerMoneyAvailable(server) < serverMoneyThreshold) {\\n            await ns.grow(server, opts);\\n        } else {\\n            await ns.hack(server, opts);\\n        }\\n    }\\n}\\n\\nexport function autocomplete(data, args) {\\n    return [...data.servers];\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///0fe64561-302a-4d28-b962-28246aefd361\",\"moduleSequenceNumber\":14029}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"home\",\"moduleSequenceNumber\":65210,\"_hash\":\"e7a82cc721932419c47eb52b39b72ad40f1e4654a5bf227061e24250e346d9fd\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getFolder } from 'import.js';\\n/* Run various scripts easily and from one interface\\n */\\nexport async function main(ns) {\\n  const command = ns.args[0];\\n  const commandArgs = ns.args.slice(1);\\n  await runCommand(ns, command, commandArgs);\\n}\\n\\nasync function runCommand(ns, command, commandArgs) {\\n  switch (command) {\\n    case 'autoHack':\\n    case 'autoRemoteHack':\\n    case 'dashboard':\\n    case 'factionManager':\\n    case 'gangManager':\\n    case 'hacknetManager':\\n    case 'hacknetNodeManager':\\n    case 'hacknetUpgradeManager':\\n    case 'purchaseServers':\\n    case 'stockManager':\\n      ns.run(`/${getFolder()}/${command}.js`);\\n      break;\\n    case 'localGrow':\\n    case 'localHack':\\n      ns.run(`/${getFolder()}/${command}.js`, 1, commandArgs[0]);\\n      break;\\n    case 'sudo autohack':\\n    case 'sudo autoHack':\\n      await runCommand(ns, 'autoHack');\\n      await runCommand(ns, 'autoRemoteHack');\\n      break;\\n    case 'autohack':\\n      await runCommand(ns, 'autoHack');\\n      break;\\n    case 'serverhack':\\n    case 'serverHack':\\n      await runCommand(ns, 'autoRemoteHack');\\n      break;\\n    case 'dash':\\n    case 'status':\\n      await runCommand(ns, 'dashboard');\\n      break;\\n    case 'buyServer':\\n    case 'purchaseServer':\\n    case 'buyServers':\\n      await runCommand(ns, 'purchaseServers');\\n      break;\\n    default:\\n      ns.tprint(`Oh no! ${command} isn't a valid command. Try: dashboard, autoHack, autoRemoteHack, or hacknetManager.`);\\n  }\\n}\\n\\nexport function autocomplete(data, args) {\\n  return [\\n    'autoHack',\\n    'autoRemoteHack',\\n    'dashboard',\\n    'factionManager',\\n    'gangManager',\\n    'hacknetManager',\\n    'localGrow',\\n    'localHack',\\n    'purchaseServer',\\n    'stockManager',\\n    ...data.servers\\n  ];\\n}\",\"filename\":\"/scripts/hax.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"import.js\",\"url\":\"blob:file:///a878ade8-9d95-4b39-8d9a-9c5eb3eae264\",\"moduleSequenceNumber\":420825},{\"filename\":\"/scripts/hax.js\",\"url\":\"blob:file:///10a5a508-43d2-4119-a4da-3389ccdc6b10\",\"moduleSequenceNumber\":421142}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"home\",\"moduleSequenceNumber\":65211,\"_hash\":\"5550ce84c18885a1959f70b91ba661d4c29ef3ced94232a4bf3b61ff9c398d14\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getServerPrefix } from 'import.js';\\n\\nlet maxServers;\\nlet servers;\\n\\n/*\\n * Purchases the best server available with the\\n * user's current money. If the server limit is\\n * reached, replaces the worst server. Repeatable.\\n */\\nexport async function main(ns) {\\n    // Default Values\\n    maxServers = ns.getPurchasedServerLimit();\\n    servers = ns.getPurchasedServers(true);\\n    serverInfo(ns);\\n    await buyServers(ns);\\n}\\n\\nfunction serverInfo(ns) {\\n    ns.tprint(`You have ${servers.length}/${maxServers} servers`);\\n    Object.entries(groupServers(ns)).map((ramServers) => {\\n        ns.tprint(`${ramServers[0]}GB: ${ramServers[1]}`);\\n    });\\n}\\n\\nfunction groupServers(ns) {\\n    let groupedServers = {};\\n    servers.forEach((server) => {\\n        let ram = ns.getServerRam(server)[0];\\n        groupedServers[ram] = groupedServers[ram] || [];\\n        groupedServers[ram].push(server);\\n    });\\n    return groupedServers;\\n}\\n\\nasync function buyServers(ns) {\\n    let ram = ns.getPurchasedServerMaxRam();\\n    let shopServer = true;\\n    while (shopServer) {\\n        let myMoney = ns.getServerMoneyAvailable('home');\\n        let serverCost = ns.getPurchasedServerCost(ram);\\n        while (serverCost > myMoney && ram > 2) {\\n            ram = ram / 2;\\n            serverCost = ns.getPurchasedServerCost(ram);\\n        }\\n        shopServer = await ns.prompt(`Would you like to buy a ${ram}GB server for ${ns.nFormat(serverCost, \\\"$0.00a\\\")}`);\\n        if (shopServer) { shopServer = buyServer(ns, ram); }\\n    }\\n}\\n\\nfunction buyServer(ns, ram) {\\n    if (servers.length == maxServers) {\\n        let success = removeWeakestServer(ns, ram);\\n        if (!success) { return false; }\\n    }\\n    let server = ns.purchaseServer(`${getServerPrefix()}-${ram}GB`, ram);\\n    servers.push(server);\\n    ns.tprint(`Purchased ${server}: ${ram}GB`);\\n    return true;\\n}\\n\\nfunction removeWeakestServer(ns, newRam) {\\n    let groupedServers = groupServers(ns);\\n    let min = Math.min(...Object.keys(groupedServers));\\n    if (min >= newRam) {\\n        ns.tprint(`Your smallest server has ${min}GB RAM and you wanted to purchase ${newRam}GB server`);\\n        return false;\\n    }\\n    let smallest_server = groupedServers[min][0];\\n    ns.killall(smallest_server);\\n    let result = ns.deleteServer(smallest_server);\\n    servers = ns.getPurchasedServers(true);\\n    return true;\\n}\\n\",\"filename\":\"/scripts/purchaseServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"import.js\",\"url\":\"blob:file:///32ee84d8-ef96-4a13-a6d1-4c5fb48fb546\",\"moduleSequenceNumber\":61479},{\"filename\":\"/scripts/purchaseServers.js\",\"url\":\"blob:file:///1a92456a-a1dd-4694-b5cf-5df2fd369816\",\"moduleSequenceNumber\":62997}],\"dependents\":[],\"ramUsage\":9.4,\"server\":\"home\",\"moduleSequenceNumber\":65212,\"_hash\":\"5da036a3b110ce5ba41fc38c559945a5158b30a3bd797235912d4fd1e8ec5c79\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getHackScript } from 'import.js';\\n\\n/* Deploys the hack script to all purchased servers\\n * Differs from autoRemoteHack because you can specify\\n * the target\\n * args[0] - list of servers\\n * args[1] - alternate Hackscript (default from import)\\n */\\nexport async function main(ns) {\\n  let myServers = ns.getPurchasedServers();\\n  let targetServers = ns.args[0].split(',');\\n  let hackScript = ns.args[1] || getHackScript();\\n  let scriptRam = ns.getScriptRam(hackScript);\\n  for (const [index, server] of myServers.entries()) {\\n    ns.killall(server);\\n    let serverRam = ns.getServerRam(server)[0];\\n    let threads = Math.floor(serverRam / scriptRam);\\n    let serverIndex = index % targetServers.length;\\n    let targetServer = targetServers[serverIndex];\\n    ns.print(`${server} is hacking ${targetServer} with ${threads} threads.`);\\n    await ns.scp(hackScript, server);\\n    if (threads > 0) {\\n      ns.exec(hackScript, server, threads, targetServer, threads);\\n    }\\n  }\\n}\\n\",\"filename\":\"/scripts/remoteHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"import.js\",\"url\":\"blob:file:///7b92f308-dc72-4e40-9a38-0e032b56d645\",\"moduleSequenceNumber\":61479},{\"filename\":\"/scripts/remoteHack.js\",\"url\":\"blob:file:///29511f66-079b-4d27-8a07-f09fadda684d\",\"moduleSequenceNumber\":62999}],\"dependents\":[],\"ramUsage\":6.45,\"server\":\"home\",\"moduleSequenceNumber\":65213,\"_hash\":\"8bb243a76c83c30301e9e187586e47c1d3c77ee5c47a1662ccebc8b13dde20dc\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"let hackPorts = 0;\\n\\n/*\\n * Utility functions that report serverStatus\\n * and Hackability \\n */\\nexport async function main(ns) {\\n  let server = ns.args[0];\\n  serverReport(ns, server);\\n}\\n\\nexport function serverReport(ns, server) {\\n  let serverLock = serverHackStatus(ns, server);\\n  ns.tprint(`${serverLock} ${server}`);\\n  if (serverLock == \\\"🔓\\\") {\\n    ns.tprint(`🛡️${Math.round(ns.getServerSecurityLevel(server))}/${ns.getServerMinSecurityLevel(server)}`);\\n    ns.tprint(`💸${ns.nFormat(ns.getServerMoneyAvailable(server), \\\"$0.000a\\\")}/${ns.nFormat(ns.getServerMaxMoney(server), \\\"$0.000a\\\")}`);\\n  } else {\\n    ns.tprint(`Hack Level: ${ns.getServerRequiredHackingLevel(server)}`);\\n    ns.tprint(`Ports: ${ns.getServerNumPortsRequired(server)}`);\\n  }\\n  ns.tprint('-----------');\\n}\\n\\nexport function serverHackStatus(ns, server) {\\n  if (ns.hasRootAccess(server)) {\\n    return \\\"🔓\\\";\\n  }\\n  if (ns.getServerRequiredHackingLevel(server) > ns.getHackingLevel() ||\\n    ns.getServerNumPortsRequired(server) > hackablePorts) {\\n    return \\\"🔐\\\";\\n  }\\n  return \\\"🔒\\\";\\n}\\n\\nexport function hackablePorts(ns) {\\n  if (hackPorts > 0) {\\n    return hackPorts;\\n  }\\n  if (ns.fileExists('BruteSSH.exe')) {\\n    hackPorts += 1;\\n  }\\n  if (ns.fileExists('FTPCrack.exe')) {\\n    hackPorts += 1;\\n  }\\n  if (ns.fileExists('relaySMTP.exe')) {\\n    hackPorts += 1;\\n  }\\n  if (ns.fileExists('HTTPWorm.exe')) {\\n    hackPorts += 1;\\n  }\\n  if (ns.fileExists('SQLInject.exe')) {\\n    hackPorts += 1;\\n  }\\n  return hackPorts;\\n}\\n\",\"filename\":\"/scripts/serverStatus.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/serverStatus.js\",\"url\":\"blob:file:///b6624d87-9afa-4c8e-8af7-f378a2294b6a\",\"moduleSequenceNumber\":421141}],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"home\",\"moduleSequenceNumber\":65214,\"_hash\":\"85510f85ecc586dbae588ff794c8d87cf14b69b3a5b73818d4898853274ec57a\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const SCRIPT = '/scripts/localHack.js';\\nconst HACKSCRIPT = '/scripts/hack.js';\\nconst HOME = 'home';\\nconst RESERVERAM = 0.2; // RAM in GB to reserve for running other commands, scripts\\n\\nexport function autocomplete(data, args) {\\n\\treturn [...data.servers];\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tif (typeof target === 'undefined') {\\n\\t\\tns.tprint(`Usage: run ${SCRIPT} TARGET`);\\n\\t\\tns.tprint(`Example: run ${SCRIPT} iron-gym`);\\n\\t\\treturn;\\n\\t}\\n\\n\\tif (ns.scriptRunning(HACKSCRIPT, HOME)) {\\n\\t\\tns.scriptKill(HACKSCRIPT, HOME);\\n\\t\\tns.tprint(`Killed running instance of ${HACKSCRIPT}`);\\n\\t}\\n\\n\\tconst freeRam = ns.getServerMaxRam(HOME) - ns.getServerUsedRam(HOME);\\n\\tconst threadRam = ns.getScriptRam(HACKSCRIPT);\\n\\n\\tconst usableRam = Math.floor((1.0 - RESERVERAM) * freeRam);\\n\\tconst threads = Math.floor(usableRam / threadRam);\\n\\n\\tif (threads === 0) {\\n\\t\\tns.print(`Insufficient RAM for hack threads`);\\n\\t\\tns.exit();\\n\\t}\\n\\tns.exec(HACKSCRIPT, HOME, threads, target, threads);\\n}\",\"filename\":\"/scripts/localHack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/localHack.js\",\"url\":\"blob:file:///1d2bad66-f1e8-4008-b476-0f2cdacbf98e\",\"moduleSequenceNumber\":14028}],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"home\",\"moduleSequenceNumber\":65215,\"_hash\":\"408257f0255fa86e47f07f5935a1a94d266c7f26fed07dcfe9debf7864db79c3\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const ATTRIBUTES = ['hack', 'str', 'def', 'dex', 'agi', 'cha'];\\nconst TASKS = [`Train Hacking`, `Ethical Hacking`, `Money Laundering`, `Cyberterrorism`];\\nconst TICK = 10 * 1000;\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  ns.disableLog('sleep');\\n  ns.tail();\\n\\n  if (! ns.gang.inGang()) {\\n    if (! ns.gang.createGang(`NiteSec`)) { ns.exit(); }\\n  }\\n\\n  while (true) {\\n    recruitment(ns);\\n    ascension(ns);\\n    tasks(ns);\\n    await ns.sleep(TICK);\\n  }\\n}\\n\\nfunction recruitment(ns) {\\n  if (!canRecruit(ns)) { return false; }\\n  let name = getRecruitName();\\n  return (recruit(ns, name) && setTask(ns, name, `Train Hacking`));\\n}\\nfunction canRecruit(ns) { return ns.gang.canRecruitMember(); }\\nfunction getRecruitName() { return Math.random().toString(16).substring(2, 8); }\\nfunction recruit(ns, name) { return ns.gang.recruitMember(name); }\\nfunction setTask(ns, name, task) { return ns.gang.setMemberTask(name, task); }\\n\\n\\nfunction ascension(ns) {\\n  for (let member of getGangData(ns)) {\\n    let ascendResult = ns.gang.getAscensionResult(member.name);\\n    if (typeof ascendResult === 'undefined') { continue; }\\n\\n    let activeAttribute = getActiveAttribute(member, ascendResult);\\n    ns.print(`${member.name}.${activeAttribute.name}: ${activeAttribute.ascGain - ascendGainTarget(activeAttribute)}`);\\n    if (activeAttribute.ascGain > ascendGainTarget(activeAttribute)) {\\n      ns.gang.ascendMember(member.name);\\n      ns.toast(`Ascended ${member.name}`);\\n    }\\n  }\\n}\\nfunction getActiveAttribute(member, ascendResult) {\\n  let attrSnaps = [];\\n  for (let attribute of ATTRIBUTES) {\\n    let expString = `${attribute}_exp`;\\n    let baseMultString = `${attribute}_mult`;\\n    let ascMultString = `${attribute}_asc_mult`;\\n    attrSnaps.push(\\n      {\\n        'name': attribute,\\n        'rank': member[attribute],\\n        'xp': member[expString],\\n        'baseMult': member[baseMultString],\\n        'ascMult': member[ascMultString],\\n        'ascResult': ascendResult[attribute],\\n        'ascGain': member[ascMultString] * (ascendResult[attribute] - 1),\\n      }\\n    );\\n  }\\n  return attrSnaps.sort((a, b) => b.xp - a.xp)[0];\\n}\\nfunction ascendGainTarget(attributeData) { return (Math.log10(attributeData.ascMult) > 1) ? Math.log10(attributeData.ascMult) : 1; }\\n\\nfunction tasks(ns) {\\n  let gangData = getGangData(ns);\\n  let trainees = gangData.filter(hasLowAscensionMultiplier);\\n  trainees.forEach((trainee) => { setTask(ns, trainee.name, `Train Hacking`) });\\n  let workers = gangData.filter(hasHighAscensionMultiplier).sort((a, b) => b.hack_asc_mult - a.hack_asc_mult);\\n  let topWorker = workers.shift();\\n  setTask(ns, topWorker.name, `Ethical Hacking`);\\n  let aproposWorkerTask = getWorkerTask(ns);\\n  workers.forEach((worker) => {\\n    setTask(ns, worker.name, aproposWorkerTask);\\n  });\\n}\\n\\nfunction getWorkerTask(ns) {\\n  if (ns.getFactionRep(`NiteSec`) < 2500000) { return `Cyberterrorism`; }\\n  return `Money Laundering`;\\n}\\n\\nfunction getGangData(ns) {\\n  let data = [];\\n  ns.gang.getMemberNames().forEach((name) => {\\n    data.push(ns.gang.getMemberInformation(name));\\n  });\\n  return data;\\n}\\nfunction hasLowAscensionMultiplier(element) { return element.hack_asc_mult < 100.0; }\\nfunction hasHighAscensionMultiplier(element) { return element.hack_asc_mult >= 100.0; }\",\"filename\":\"/bin/gangManager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/gangManager.js\",\"url\":\"blob:file:///e45f43df-7303-422c-9738-23ee4cebac6f\",\"moduleSequenceNumber\":25595}],\"dependents\":[],\"ramUsage\":18.6,\"server\":\"home\",\"moduleSequenceNumber\":65216,\"_hash\":\"7198fd8c5c6dbc14ee78acd8ae241fbdeaa030332b9c07dec2bbc3647615c1e5\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.inGang\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.createGang\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.canRecruitMember\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.recruitMember\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getAscensionResult\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.ascendMember\",\"cost\":4},{\"type\":\"fn\",\"name\":\"singularity.getFactionRep\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getMemberInformation\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const TICK = 10 * 1000; // seconds in millis\\nconst BUYTHRESH = 0.55; // 55% or better growth forecast to buy\\nconst LOSSTHRESH = -0.0123; // 5% loss triggers sell\\nconst ROITHRESH = 0.035; // 25% or better profit\\nconst CASHFLOOR = 10e6; // have 10.000m to do other stuff with\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t// ensure access to necessary APIs\\n\\tif (!haveAPIAccess(ns)) {\\n\\t\\tns.tprint(`Not haz API accesses`);\\n\\t\\treturn;\\n\\t}\\n\\n\\tawait stockManager(ns);\\n}\\n\\nfunction haveAPIAccess(ns) { return (haveTIXAccess(ns) && have4SDataAccess(ns)); }\\nfunction haveTIXAccess(ns) { return ns.stock.getSymbols; }\\nfunction have4SDataAccess(ns) { return ns.stock.getForecast; }\\n\\nasync function stockManager(ns, funding) {\\n\\tconst symbols = ns.stock.getSymbols();\\n\\twhile (true) {\\n\\t\\t// dump everything\\n\\t\\tlet marketData = getMarketData(ns, symbols);\\n\\t\\t//ns.print(marketData.sort((a, b) => b.earnings - a.earnings));\\n\\n\\t\\t// look at what else is available for purchase\\n\\t\\tlet noHoldings = marketData.filter(haveNoShares);\\n\\t\\t//ns.print(noHoldings.filter(haveNegativeForecast).sort((a, b) => b.forecast - a.forecast));\\n\\t\\tlet projectedWinners = noHoldings.filter(havePositiveForecast);\\n\\t\\tbuyStocks(ns, projectedWinners);\\n\\n\\t\\t// look at what we have for wheat, chaff\\n\\t\\tlet myHoldings = marketData.filter(haveShares);\\n\\t\\t//ns.print(myHoldings.sort((a, b) => b.earnings - a.earnings));\\n\\t\\t//let projectedLosers = myHoldings.filter(haveNegativeForecast);\\n\\t\\t//sellStocks(ns, projectedLosers);\\n\\t\\t//let actualLosers = myHoldings.filter(haveSufficientLosses);\\n\\t\\t//sellStocks(ns, actualLosers);\\n\\t\\tlet breadWinners = myHoldings.filter(haveSufficientROI);\\n\\t\\t//ns.print(breadWinners);\\n\\t\\tsellStocks(ns, breadWinners);\\n\\n\\t\\t/*\\n\\t\\tns.tprintf(`\\\\n=========================== HOLDINGS ============================\\\\n`);\\n\\t\\tns.tprint(myHoldings);\\n\\t\\tns.tprint(`=========================== TO BUY ==========================`);\\n\\t\\tns.tprint(stuffToBuy);\\n\\t\\tns.tprint(`=========================== TO SELL ==========================`);\\n\\t\\tns.tprint(stuffToSell);\\n\\t\\t*/\\n\\n\\t\\tawait ns.sleep(TICK);\\n\\t}\\n}\\n\\nfunction sellStocks(ns, marketData) {\\n\\tfor (let symbolData of marketData) {\\n\\t\\tsellStock(ns, symbolData);\\n\\t}\\n}\\n\\nfunction sellStock(ns, symbolData) {\\n\\tlet symbol = symbolData.symbol;\\n\\tlet shares = symbolData.shares;\\n\\tns.stock.sell(symbol, shares);\\n}\\n\\nfunction buyStocks(ns, marketData) {\\n\\tfor (let symbolData of marketData) {\\n\\t\\tbuyStock(ns, symbolData);\\n\\t}\\n}\\n\\nfunction buyStock(ns, symbolData) {\\n\\tlet symbol = symbolData.symbol;\\n\\tlet availableFunds = myMoney(ns) - CASHFLOOR;\\n\\tif (availableFunds < 0) { return; }\\n\\tlet maxShares = ns.stock.getMaxShares(symbol);\\n\\tlet sharesAfforded = availableFunds / ns.stock.getPrice(symbol);\\n\\tlet sharesToBuy = sharesAfforded > 0.25 * maxShares ? 0.25 * maxShares : sharesAfforded;\\n\\tns.stock.buy(symbol, sharesToBuy);\\n}\\n\\nfunction haveNoShares(symbolData, symbolIndex, marketData) { return symbolData.shares < 1; }\\nfunction haveShares(symbolData, symbolIndex, marketData) { return symbolData.shares > 0; }\\nfunction havePositiveForecast(symbolData, symbolIndex, marketData) { return symbolData.forecast > BUYTHRESH; }\\nfunction haveNegativeForecast(symbolData, symbolIndex, marketData) { return symbolData.forecast < 0.45; }\\nfunction havePositiveGrowth(symbolData, symbolIndex, marketData) { return symbolData.earnings > 0; }\\nfunction haveSufficientROI(symbolData, symbolIndex, marketData) { return symbolData.earnings > ROITHRESH; }\\nfunction haveSufficientLosses(symbolData, symbolIndex, marketData) { return symbolData.earnings < LOSSTHRESH; }\\n\\nfunction getMarketData(ns, symbols) {\\n\\tlet marketData = [];\\n\\tfor (let symbol of symbols) { marketData.push(getSymbolData(ns, symbol)); }\\n\\treturn marketData;\\n}\\n\\nfunction getSymbolData(ns, symbol) {\\n\\tlet position = ns.stock.getPosition(symbol);\\n\\tlet shares = position[0];\\n\\tlet average = position[1];\\n\\tlet currentAverage = ns.stock.getPrice(symbol);\\n\\tlet earnings = (currentAverage - average) / average;\\n\\tlet forecast = ns.stock.getForecast(symbol);\\n\\tlet symbolData = {\\n\\t\\t'symbol': symbol,\\n\\t\\t'shares': shares,\\n\\t\\t'average': average,\\n\\t\\t'currentAverage': currentAverage,\\n\\t\\t'earnings': earnings,\\n\\t\\t'forecast': forecast,\\n\\t};\\n\\treturn symbolData;\\n}\\n\\nfunction myMoney(ns) {\\n\\treturn ns.getServerMoneyAvailable(`home`);\\n}\",\"filename\":\"/bin/stockManager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/bin/stockManager.js\",\"url\":\"blob:file:///1fd3120b-eeac-40d1-9aee-e2a1235bcf6f\",\"moduleSequenceNumber\":1450944}],\"dependents\":[],\"ramUsage\":17.2,\"server\":\"home\",\"moduleSequenceNumber\":65217,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getForecast\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.sell\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getMaxShares\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.buy\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const FACTIONS = [\\n\\t\\\"Illuminati\\\",\\n\\t\\\"Daedalus\\\",\\n\\t\\\"The Covenant\\\",\\n\\t\\\"ECorp\\\",\\n\\t\\\"MegaCorp\\\",\\n\\t\\\"Bachman & Associates\\\",\\n\\t\\\"Blade Industries\\\",\\n\\t\\\"NWO\\\",\\n\\t\\\"Clarke Incorporated\\\",\\n\\t\\\"OmniTek Incorporated\\\",\\n\\t\\\"Four Sigma\\\",\\n\\t\\\"KuaiGong International\\\",\\n\\t\\\"Fulcrum Secret Technologies\\\",\\n\\t\\\"BitRunners\\\",\\n\\t\\\"The Black Hand\\\",\\n\\t\\\"NiteSec\\\",\\n\\t\\\"Aevum\\\",\\n\\t\\\"Chongqing\\\",\\n\\t\\\"Ishima\\\",\\n\\t\\\"New Tokyo\\\",\\n\\t\\\"Sector-12\\\",\\n\\t\\\"Volhaven\\\",\\n\\t\\\"Speakers for the Dead\\\",\\n\\t\\\"The Dark Army\\\",\\n\\t\\\"The Syndicate\\\",\\n\\t\\\"Silhouette\\\",\\n\\t\\\"Tetrads\\\",\\n\\t\\\"Slum Snakes\\\",\\n\\t\\\"Netburners\\\",\\n\\t\\\"Tian Di Hui\\\",\\n\\t\\\"CyberSec\\\",\\n\\t\\\"Bladeburners\\\",\\n\\t\\\"Church of the Machine God\\\",\\n];\\nconst WORK = `Hacking Contracts`;\\nconst TICK = 60 * 1000;\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\n\\twhile(NNNN) {\\n\\t\\tjoinFactions(ns);\\n\\t\\tlet\\n\\t}\\n\\tfor (let faction of FACTIONS) {\\n\\t\\tlet maxRep = getAugmentationData(ns, faction).sort((a, b) => b.rep - a.rep)[0].rep;\\n\\t\\twhile (ns.getFactionRep(faction) < maxRep) {\\n\\t\\t\\tns.workForFaction(faction, WORK, false);\\n\\t\\t\\tawait ns.sleep(TICK);\\n\\t\\t}\\n\\t\\tns.stopAction();\\n\\t\\tns.tprint(`Sufficient Rep: ${faction}`);\\n\\t}\\n}\\n\\nconst function joinFactions(ns) {\\n\\tlet factions = ns.checkFactionInvitations();\\n\\tfactions.forEach(faction => ns.joinFaction(faction));\\n\\treturn factions;\\n}\\n\\nconst function getAugmentationData(ns, faction) {\\n\\tlet augmentationData = [];\\n\\tfor (let augmentation of ns.getAugmentationsFromFaction(faction)) {\\n\\t\\taugmentationData.push({\\n\\t\\t\\t'name': augmentation,\\n\\t\\t\\t'price': ns.getAugmentationPrice(augmentation),\\n\\t\\t\\t'rep': ns.getAugmentationRepReq(augmentation),\\n\\t\\t});\\n\\t}\\n\\treturn augmentationData;\\n}\\n\\nconst function getFactionData(ns, faction) {\\n\\n}\\n\\nconst function getAllFactions() { return FACTIONS; }\",\"filename\":\"/bin/factionManager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/factionManager.js\",\"url\":\"blob:file:///b4f8a4e8-83c9-4659-aa57-3c8adc265258\",\"moduleSequenceNumber\":2272}],\"dependents\":[],\"ramUsage\":241.6,\"server\":\"home\",\"moduleSequenceNumber\":65218,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getFactionRep\",\"cost\":16},{\"type\":\"fn\",\"name\":\"workForFaction\",\"cost\":48},{\"type\":\"fn\",\"name\":\"stopAction\",\"cost\":16},{\"type\":\"fn\",\"name\":\"getAugmentationsFromFaction\",\"cost\":80},{\"type\":\"fn\",\"name\":\"getAugmentationPrice\",\"cost\":40},{\"type\":\"fn\",\"name\":\"getAugmentationRepReq\",\"cost\":40}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"let config = {\\n    folder: 'scripts',\\n    rootUrl: 'https://raw.githubusercontent.com/FlyingJ/bitburner-scripts/main/',\\n    serverPrefix: 'j4ys3rv',\\n};\\n/*\\n* This will import all files listed in importFiles.\\n*/\\nexport async function main(ns) {\\n    let filesImported = await importFiles(ns);\\n    ns.tprint('='.repeat(20));\\n    if (filesImported) {\\n        ns.tprint('Hey! Thank you for downloading the BitBurner Scripts.');\\n        ns.tprint(`You've installed these in the ${getFolder()} directory.`);\\n        ns.tprint(\\n            `A good place to start is running \\\\`run /${getFolder()}/hax.js\\\\``\\n        );\\n    } else {\\n        ns.tprint(\\n            'You had some issues downloading files, please reach out to the repo maintainer or check your config.'\\n        );\\n    }\\n}\\n\\nasync function importFiles(ns) {\\n    let files = [\\n        'autoHack.js',\\n        'autoRemoteHack.js',\\n        'dashboard.js',\\n        'gangManager.js',\\n        'hack.js',\\n        'hacknetManager.js',\\n        'hacknetNodeManager.js',\\n        'hacknetUpgradeManager.js',\\n        'hax.js',\\n        'localHack.js',\\n        'purchaseServers.js',\\n        'remoteHack.js',\\n        'serverStatus.js',\\n        'stockManager.js',\\n    ];\\n    let filesImported = true;\\n    for (let file of files) {\\n        let remoteFileName = `${getRootUrl()}scripts/${file}`;\\n        let result = await ns.wget(remoteFileName, `/${getFolder()}/${file}`);\\n        filesImported = filesImported && result;\\n        ns.tprint(`File: ${file}: ${result ? '✔️' : '❌'}`);\\n    }\\n    return filesImported;\\n}\\n\\nexport function getFolder() { return config.folder; }\\nexport function getRootUrl() { return config.rootUrl; }\\nexport function getServerPrefix() { return config.serverPrefix; }\\n\\nexport function getHackScript() { return `/${getFolder()}/hack.js`; }\\nexport function getHacknetUpgradeScript() { return `/${getFolder()}/deployUpgrades.js`; }\",\"filename\":\"import.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"import.js\",\"url\":\"blob:file:///3e023008-1d8c-492e-8d1d-b47b189d524e\",\"moduleSequenceNumber\":80570}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":65219,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const TICK = 1250;\\nconst MAXWAIT = 3600 * 12; // 12 hours in seconds\\nconst BASEMAXNODEEARNINGS = 9171;\\nconst PARTS = ['Level', 'Ram', 'Core'];\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\tns.disableLog('sleep');\\n\\n\\tawait deployHacknet(ns);\\n\\n\\tns.print('Finished deploying hacknet');\\n}\\n\\n\\nasync function deployHacknet(ns) {\\n\\tlet options = getAllOptions(ns);\\n\\tlet option = leastCostlyOption(options);\\n\\tdo {\\n\\t\\tawait purchase(ns, option);\\n\\t\\toptions = getAllOptions(ns);\\n\\t\\toption = leastCostlyOption(options);\\n\\t} while (purchasesAvailable(option));\\n}\\n\\nfunction getAllOptions(ns) {\\n\\tlet options = [];\\n\\t// get upgrades\\n\\tfor (let nodeIndex = 0; nodeIndex < ns.hacknet.numNodes(); nodeIndex += 1) {\\n\\t\\toptions = options.concat(getPerNodeOptions(ns, nodeIndex));\\n\\t}\\n\\t// get next node\\n\\toptions = options.concat(\\n\\t\\t{\\n\\t\\t\\t'nodeIndex': undefined,\\n\\t\\t\\t'part': 'Node',\\n\\t\\t\\t'cost': cost(ns, undefined, 'Node')\\n\\t\\t});\\n\\treturn options;\\n}\\nfunction getPerNodeOptions(ns, nodeIndex) {\\n\\tlet options = [];\\n\\tfor (let part of PARTS) {\\n\\t\\tlet option = {\\n\\t\\t\\t'nodeIndex': nodeIndex,\\n\\t\\t\\t'part': part,\\n\\t\\t\\t'cost': cost(ns, nodeIndex, part)\\n\\t\\t};\\n\\t\\toptions.push(option);\\n\\t}\\n\\treturn options;\\n}\\nfunction cost(ns, nodeIndex, part) {\\n\\tif (part === 'Node') {\\n\\t\\treturn getNodeCost(ns);\\n\\t}\\n\\tlet costFunction = `get${part}UpgradeCost`;\\n\\treturn ns.hacknet[costFunction](nodeIndex, 1);\\n}\\nfunction getNodeCost(ns) {\\n\\t// make sure not to buy more nodes when unable to recoup the expense\\n\\t// in a reasonable amount of time\\n\\tlet cost = ns.hacknet.getPurchaseNodeCost();\\n\\tconst maxEarnings = BASEMAXNODEEARNINGS * hacknetMultProd(ns);\\n\\tif (canRecoup(ns, cost, maxEarnings)) { return cost; }\\n\\treturn Infinity;\\n}\\nfunction hacknetMultProd(ns) { return ns.getHacknetMultipliers().production; }\\nfunction canRecoup(ns, cost, maxEarnings) { return breakEvenTime(cost, maxEarnings) < MAXWAIT ? true : false; }\\nfunction breakEvenTime(cost, earnings) { return cost / earnings; }\\n\\nfunction leastCostlyOption(options) { return options.sort((a, b) => a.cost - b.cost)[0]; }\\nfunction purchasesAvailable(option) { return isFinite(option.cost); }\\n\\nasync function purchase(ns, option) {\\n\\tlet index = option.nodeIndex;\\n\\tlet part = option.part;\\n\\tlet cost = option.cost;\\n\\n\\twhile (cost > myMoney(ns)) { await ns.sleep(TICK); }\\n\\n\\tif (part === 'Node') {\\n\\t\\tns.print(`Purchase hacknet-node-${ns.hacknet.purchaseNode()}`);\\n\\t\\treturn true;\\n\\t}\\n\\n\\tlet upgradeFunction = `upgrade${part}`;\\n\\tns.print(`Purchase ${part} for hacknet-node-${index} at cost of $${cost}`);\\n\\treturn ns.hacknet[upgradeFunction](index, 1);\\n}\\n\\nfunction myMoney(ns) { return ns.getServerMoneyAvailable('home'); }\",\"filename\":\"/bin/hacknetManager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/bin/hacknetManager.js\",\"url\":\"blob:file:///46f62bee-fd8c-49cf-b700-1186f57cced6\",\"moduleSequenceNumber\":62689}],\"dependents\":[],\"ramUsage\":9.7,\"server\":\"home\",\"moduleSequenceNumber\":65220,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getHacknetMultipliers\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const TICK = 3000;\\nconst MAXWAIT = 3600 * 12; // 12 hours in seconds\\nconst BASEMAXEARNINGS = 9171;\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\");\\n\\tns.disableLog(\\\"sleep\\\");\\n\\n\\tconst maxEarnings = BASEMAXEARNINGS * hacknetMultProd(ns);\\n\\tlet cost = ns.hacknet.getPurchaseNodeCost();\\n\\twhile (canRecoup(ns, cost, maxEarnings)) {\\n\\t\\twhile (!affordable(ns, cost)) { await ns.sleep(TICK); }\\n\\t\\tbuyNode(ns);\\n\\t\\tcost = ns.hacknet.getPurchaseNodeCost();\\n\\t}\\n\\n\\tns.print(\\\"Additional hacknet nodes cannot break even\\\");\\n}\\n\\nfunction canRecoup(ns, cost, maxEarnings) { return breakEvenTime(cost, maxEarnings) < MAXWAIT ? true : false; }\\nfunction hacknetMultProd(ns) { return ns.getHacknetMultipliers().production; }\\nfunction breakEvenTime(cost, earnings) { return cost / earnings; }\\nfunction affordable(ns, cost) { return cost < moneyAvailable(ns) ? true : false; }\\nfunction moneyAvailable(ns) { return ns.getServerMoneyAvailable('home'); }\\nfunction buyNode(ns) { ns.print(\\\"Purchased hacknet-node-\\\" + ns.hacknet.purchaseNode()); }\",\"filename\":\"/scripts/hacknetNodeManager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.7,\"server\":\"home\",\"moduleSequenceNumber\":65221,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getHacknetMultipliers\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getHacknetUpgradeScript} from 'import.js';\\n\\nconst TICK = 1250;\\nconst PARTS = ['Level', 'Ram', 'Core'];\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\tns.disableLog('getServerMoneyAvailable');\\n\\n\\tawait deployUpgrades(ns);\\n\\n\\tns.print('Finished deploying upgrades');\\n}\\n\\nasync function deployUpgrades(ns) {\\n\\t\\tlet options = getAllOptions(ns);\\n\\t\\tlet option = leastCostlyOption(options);\\n\\tdo {\\n\\t\\tawait purchase(ns, option);\\n\\t\\toptions = getAllOptions(ns);\\n\\t\\toption = leastCostlyOption(options);\\n\\t} while (necessary(ns, option));\\n}\\nfunction necessary(ns, option) {\\n\\treturn (nodesDeploying(ns) || upgradesAvailable(option));\\n}\\nfunction nodesDeploying(ns) { return ns.isRunning(`${getHacknetUpgradeScript()}`); }\\nfunction upgradesAvailable(option) { return isFinite(option.cost); }\\nfunction leastCostlyOption(options) { return options.sort((a, b) => a.cost - b.cost)[0]; }\\n\\nfunction getAllOptions(ns) {\\n\\tlet options = [];\\n\\tfor (let nodeIndex = 0; nodeIndex < ns.hacknet.numNodes(); nodeIndex += 1) {\\n\\t\\toptions = options.concat(getPerNodeOptions(ns, nodeIndex));\\n\\t}\\n\\treturn options;\\n}\\nfunction getPerNodeOptions(ns, nodeIndex) {\\n\\tns.print(`Getting options from hacknet-node-${nodeIndex}`);\\n\\tlet options = [];\\n\\tfor (let part of PARTS) {\\n\\t\\tlet option = {\\n\\t\\t\\t'nodeIndex': nodeIndex,\\n\\t\\t\\t'part': part,\\n\\t\\t\\t'cost': cost(ns, nodeIndex, part)\\n\\t\\t};\\n\\t\\toptions.push(option);\\n\\t}\\n\\treturn options;\\n}\\nfunction cost(ns, nodeIndex, part) {\\n\\tlet costFunction = `get${part}UpgradeCost`;\\n\\treturn ns.hacknet[costFunction](nodeIndex, 1);\\n}\\n\\nasync function purchase(ns, option) {\\n\\tlet index = option.nodeIndex;\\n\\tlet part = option.part;\\n\\tlet cost = option.cost;\\n\\tlet buyFunction = `upgrade${part}`;\\n\\twhile (cost > myMoney(ns)) { await ns.sleep(TICK); }\\n\\tns.print(`Purchasing ${part} for hacknet-node-${index} at cost of $${cost}`);\\n\\treturn ns.hacknet[buyFunction](index, 1);\\n}\\n\\nfunction myMoney(ns) { return ns.getServerMoneyAvailable('home'); }\",\"filename\":\"/scripts/hacknetUpgradeManager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.8,\"server\":\"home\",\"moduleSequenceNumber\":65222,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const FACTIONS = [\\n\\t`Illuminati`,\\n\\t`Daedalus`,\\n\\t`The Covenant`,\\n\\t`Ecorp`,\\n\\t`MegaCorp`,\\n\\t`Bachman & Associates`,\\n\\t`Blade Industries`,\\n\\t`NWO`,\\n\\t`Clarke Incorporated`,\\n\\t`OmniTek Incorporated`,\\n\\t`Four Sigma`,\\n\\t`KuaiGong International`,\\n\\t`Fulcrum Secret Technologies`,\\n\\t`BitRunners`,\\n\\t`The Black Hand`,\\n\\t`NiteSec`,\\n\\t`Aevum`,\\n\\t`Chongqing`,\\n\\t`Ishima`,\\n\\t`New Tokyo`,\\n\\t`Sector-12`,\\n\\t`Volhaven`,\\n\\t`Speakers for the Dead`,\\n\\t`The Dark Army`,\\n\\t`The Syndicate`,\\n\\t`Silhouette`,\\n\\t`Tetrads`,\\n\\t`Slum Snakes`,\\n\\t`Netburners`,\\n\\t`Tian Di Hui`,\\n\\t`CyberSec`,\\n\\t`Bladeburners`,\\n\\t`Church of the Machine God`,\\n\\t];\\nconst WORKS = [`Hacking Contracts`, `Field Work`, `Security Work`];\\nconst WORK = `Security Work`;\\nconst TICK = 60 * 1000;\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\twhile (true) {\\n\\t\\tns.workForFaction(ns.args[0], WORK, false);\\n\\t\\tawait ns.sleep(TICK);\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\treturn FACTIONS;\\n}\",\"filename\":\"/scripts/factionChurn.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/factionChurn.js\",\"url\":\"blob:file:///95832b3a-3698-4318-92ab-48f3658c9961\",\"moduleSequenceNumber\":237693}],\"dependents\":[],\"ramUsage\":4.6,\"server\":\"home\",\"moduleSequenceNumber\":65223,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"singularity.workForFaction\",\"cost\":3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nconst getProps = (obj) =>\\n\\tObject.entries(obj).find(entry => entry[0]?.startsWith(`__reactProps`))?.[1]?.children?.props;\\n\\nexport async function main(ns) {\\n\\tlet boxes = Array.from(eval(`document`).querySelectorAll(`[class*=MuiBox-root]`));\\n\\tlet props = boxes.map(box => getProps(box)).find(x => x?.player);\\n\\n\\tif (props) {\\n\\t\\t// show classname to use\\n\\t\\tlet className = boxes.find(x => getProps(x)?.player).className;\\n\\t\\tns.tprintf(`INFO className: ${className}`);\\n\\n\\t\\t// get some bonuses\\n\\t\\t//props.player.money = props.player.money * 1111;\\n\\t\\t//props.player.hacking_exp = props.player.hacking_exp * 1111;\\n\\n\\t\\t// open the dev menu\\n\\t\\tprops.router.toDevMenu();\\n\\n\\t\\t//props.player.karma = props.player.karma * 1000;\\n\\t}\\n}\",\"filename\":\"/sbin/openDevMenu.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"dev.js\",\"url\":\"blob:file:///78b873b9-9475-4c3a-8c99-ce88c2f630ff\",\"moduleSequenceNumber\":497}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":65224,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nconst getProps = (obj) =>\\n\\tObject.entries(obj).find(entry => entry[0]?.startsWith(`__reactProps`))?.[1]?.children?.props;\\n\\nexport async function main(ns) {\\n\\tlet boxes = Array.from(eval(`document`).querySelectorAll(`[class*=MuiBox-root]`));\\n\\tlet props = boxes.map(box => getProps(box)).find(x => x?.faction);\\n\\n\\tif (props) {\\n\\t\\t// show classname to use\\n\\t\\tlet className = boxes.find(x => getProps(x)?.faction).className;\\n\\t\\tns.tprintf(`INFO className: ${className}`);\\n\\n\\t\\t// get some bonuses\\n\\t\\t//props.player.money = props.player.money * 1111;\\n\\t\\t//props.player.hacking_exp = props.player.hacking_exp * 1111;\\n\\n\\t\\t// open the dev menu\\n\\t\\t//props.router.toDevMenu();\\n\\n\\t\\t//props.player.karma = props.player.karma * 1000;\\n\\t}\\n}\",\"filename\":\"/sbin/findProperties.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/findProperties.js\",\"url\":\"blob:file:///6532be17-14d0-42bc-aea2-5c6ed3989882\",\"moduleSequenceNumber\":89358}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":65225,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const MONEYSHOT = 1e13;\\n\\n/** @param {NS} ns **/\\nconst getProps = (obj) =>\\n\\tObject.entries(obj).find(entry => entry[0]?.startsWith(`__reactProps`))?.[1]?.children?.props;\\n\\nexport async function main(ns) {\\n\\tlet boxes = Array.from(eval(`document`).querySelectorAll(`[class*=MuiBox-root]`));\\n\\tlet props = boxes.map(box => getProps(box)).find(x => x?.player);\\n\\n\\tif (props) {\\n\\t\\t// show classname to use\\n\\t\\tlet className = boxes.find(x => getProps(x)?.player).className;\\n\\t\\tns.tprintf(`INFO className: ${className}`);\\n\\n\\t\\tif (props.player['corporation']['funds'] < MONEYSHOT) {\\n\\t\\t\\tprops.player['corporation']['funds'] = MONEYSHOT;\\n\\t\\t} else {\\n\\t\\t\\tprops.player['corporation']['funds'] = props.player['corporation']['funds'] * MONEYSHOT;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/sbin/goFundCorp.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/sbin/goFundCorp.js\",\"url\":\"blob:file:///31c4c544-1c20-4620-b0b1-94fecf34a521\",\"moduleSequenceNumber\":63732}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":65226,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet element = eval(`document`).querySelectorAll(`div[id='unclickable']`);\\n\\tns.tprint(Object.keys(element));\\n\\t/*\\n\\telements.forEach(element => {\\n\\t\\t\\telement.dispatchEvent(\\n\\t\\t\\tnew MouseEvent(`click`, {\\n\\t\\t\\t\\tview: window,\\n\\t\\t\\t\\tbubbles: true,\\n\\t\\t\\t\\tcancelable: true,\\n\\t\\t\\t\\tbuttons: 1,\\n\\t\\t\\t})\\n\\t\\t)\\n\\t}\\n\\t*/\\n}\",\"filename\":\"/sbin/unclickable.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/unclickable.js\",\"url\":\"blob:file:///0ff95733-0f86-42d9-9c9e-7a8618f115b1\",\"moduleSequenceNumber\":96594}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":65227,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const MONEYSHOT = 1e13;\\n\\n/** @param {NS} ns **/\\nconst getProps = (obj) =>\\n\\tObject.entries(obj).find(entry => entry[0]?.startsWith(`__reactProps`))?.[1]?.children?.props;\\n\\nexport async function main(ns) {\\n\\tlet boxes = Array.from(eval(`document`).querySelectorAll(`[class*=MuiBox-root]`));\\n\\tlet props = boxes.map(box => getProps(box)).find(x => x?.player);\\n\\n\\tif (props) {\\n\\t\\t// show classname to use\\n\\t\\tlet className = boxes.find(x => getProps(x)?.player).className;\\n\\t\\tns.tprintf(`INFO className: ${className}`);\\n\\n\\t\\tif (props.player.money < MONEYSHOT) {\\n\\t\\t\\tprops.player.money = MONEYSHOT;\\n\\t\\t} else {\\n\\t\\t\\tprops.player.money = props.player.money * MONEYSHOT;\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/sbin/goFundMe.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/sbin/goFundMe.js\",\"url\":\"blob:file:///28e0ac4c-93fb-4e3e-a759-5182643b4531\",\"moduleSequenceNumber\":62738}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":65228,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const city = `New Tokyo`;\\nconst industry = `Agriculture`;\\nconst headCount = 33;\\nconst employeeDistribution = {\\n\\t'Operations': 20,\\n\\t'Engineer': 5,\\n\\t'Business': 2,\\n\\t'Management': 1,\\n\\t'Research & Development': 5,\\n};\\nconst warehouseSize = 56 * 1000;\\nconst realEstateBuyVolume = 10 * 1000 * 1000;\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet myCorporation = ns.corporation.getCorporation();\\n\\tmyCorporation.divisions.forEach((division) => {\\n\\t\\tns.tprint(division);\\n\\t});\\n\\tmyCorporation.divisions\\n}\\n/*\\n{\\n\\t\\\"name\\\":\\\"CORP\\\",\\n\\t\\\"funds\\\":3.650707433269212e+23,\\n\\t\\\"revenue\\\":158621829.12606987,\\n\\t\\\"expenses\\\":31154768.700548045,\\n\\t\\\"public\\\":true,\\n\\t\\\"totalShares\\\":2060000000,\\n\\t\\\"numShares\\\":1801000000,\\n\\t\\\"shareSaleCooldown\\\":0,\\n\\t\\\"issuedShares\\\":0,\\n\\t\\\"sharePrice\\\":388767748203639.75,\\n\\t\\\"state\\\":\\\"START\\\",\\n\\t\\\"divisions\\\":[\\n\\t\\t{\\n\\t\\t\\t\\\"name\\\":\\\"AG\\\",\\n\\t\\t\\t\\\"type\\\":\\\"Agriculture\\\",\\n\\t\\t\\t\\\"awareness\\\":4563.843688677289,\\n\\t\\t\\t\\\"popularity\\\":1202.0806227144649,\\n\\t\\t\\t\\\"prodMult\\\":364.47082879886864,\\n\\t\\t\\t\\\"research\\\":9308.752559242022,\\n\\t\\t\\t\\\"lastCycleRevenue\\\":158621829.12606987,\\n\\t\\t\\t\\\"lastCycleExpenses\\\":31154768.700548045,\\n\\t\\t\\t\\\"thisCycleRevenue\\\":1585852176.325491,\\n\\t\\t\\t\\\"thisCycleExpenses\\\":311337116.3569713,\\n\\t\\t\\t\\\"upgrades\\\":[0,16],\\n\\t\\t\\t\\\"cities\\\":[\\\"Aevum\\\",\\\"Sector-12\\\"],\\n\\t\\t\\t\\\"products\\\":[]\\n\\t\\t}\\n\\t]\\n}\\n*/\",\"filename\":\"/wip/buildOffice.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"buildOffice.js\",\"url\":\"blob:file:///fe888887-f948-4c99-9252-035af5b9f7e4\",\"moduleSequenceNumber\":748110}],\"dependents\":[],\"ramUsage\":1024,\"server\":\"home\",\"moduleSequenceNumber\":65229,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"corporation\",\"cost\":1022.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const stuff = 100;\\nexport const things = [\\n\\t'thing1',\\n\\t'thing2',\\n];\",\"filename\":\"/lib/constants.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":65230,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {stuff, things} from '/lib/constants.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tprint(stuff);\\n\\tns.tprint(things[0]);\\n}\",\"filename\":\"/bin/test.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/constants.js\",\"url\":\"blob:file:///7e6f040f-03fd-43cc-883d-7012038b5613\",\"moduleSequenceNumber\":866982},{\"filename\":\"/bin/test.js\",\"url\":\"blob:file:///219b9238-0895-4634-9b89-759b6c29f00f\",\"moduleSequenceNumber\":867310}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":65231,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const city = `Aevum`;\\nconst industry = `Agriculture`;\\nconst headCount = 33;\\nconst employeeDistribution = {\\n\\t'Operations': 20,\\n\\t'Engineer': 5,\\n\\t'Business': 2,\\n\\t'Management': 1,\\n\\t'Research & Development': 5,\\n};\\nconst upgradeCostLimit = 250e12;\\nconst resource = `Real Estate`;\\nconst TICK = 3 * 1000;\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.disableLog('sleep');\\n\\n\\tlet division = ns.corporation.getCorporation().divisions[0];\\n\\n\\tif (!division.cities.includes(city)) {\\n\\t\\tns.print(`Prepping to buy office space in ${city}.`);\\n\\t\\twhile (ns.corporation.getCorporation().funds < ns.corporation.getExpandCityCost()) { await ns.sleep(TICK); }\\n\\t\\tns.corporation.expandCity(division.name, city);\\n\\t}\\n\\tns.print(`Have office space in ${city}.`);\\n\\n\\tif (!ns.corporation.hasWarehouse(division.name, city)) {\\n\\t\\tns.print(`Prepping to buy warehouse in ${city}.`);\\n\\t\\twhile (ns.corporation.getCorporation().funds < ns.corporation.getPurchaseWarehouseCost()) { await ns.sleep(TICK); }\\n\\t\\tns.corporation.purchaseWarehouse(division.name, city);\\n\\t}\\n\\tns.print(`Have warehouse in ${city}.`);\\n\\n\\twhile (ns.corporation.getUpgradeWarehouseCost(division.name, city) < upgradeCostLimit) {\\n\\t\\twhile (ns.corporation.getCorporation().funds < ns.corporation.getUpgradeWarehouseCost(division.name, city)) { await ns.sleep(TICK); }\\n\\t\\tns.corporation.upgradeWarehouse(division.name, city);\\n\\t\\tns.print(`${city} warehouse size: ${ns.corporation.getWarehouse(division.name, city).size}`);\\n\\t}\\n\\n\\tlet units = 0.8 * ns.corporation.getWarehouse(division.name, city).size * 200;\\n\\tif (ns.corporation.hasResearched(division.name, `Bulk Purchase`)) {\\n\\t\\tns.print(`Buying ${units} units of ${resource} the quick and easy way.`);\\n\\t\\tns.corporation.bulkPurchase(division.name, city, `Real Estate`, units);\\n\\t} else {\\n\\t\\tns.print(`Buying ${units} units of ${resource} in the clunky way.`);\\n\\t\\tlet rate = units / 100; // purchase over 10 market cycles, or around 100 seconds\\n\\t\\tns.corporation.buyMaterial(division.name, city, resource, rate);\\n\\t\\twhile (ns.corporation.getMaterial(division.name, city, resource).qty < units) { await ns.sleep(TICK); }\\n\\t\\tns.corporation.buyMaterial(division.name, city, resource, 0);\\n\\t}\\n\\n\\tns.tprint(ns.corporation.getOffice(division.name, city));\\n}\\n/*  CorporationInfo\\n{\\n\\t\\\"name\\\":\\\"CORP\\\",\\n\\t\\\"funds\\\":3.650707433269212e+23,\\n\\t\\\"revenue\\\":158621829.12606987,\\n\\t\\\"expenses\\\":31154768.700548045,\\n\\t\\\"public\\\":true,\\n\\t\\\"totalShares\\\":2060000000,\\n\\t\\\"numShares\\\":1801000000,\\n\\t\\\"shareSaleCooldown\\\":0,\\n\\t\\\"issuedShares\\\":0,\\n\\t\\\"sharePrice\\\":388767748203639.75,\\n\\t\\\"state\\\":\\\"START\\\",\\n\\t\\\"divisions\\\":[\\n\\t\\t{\\n\\t\\t\\t\\\"name\\\":\\\"AG\\\",\\n\\t\\t\\t\\\"type\\\":\\\"Agriculture\\\",\\n\\t\\t\\t\\\"awareness\\\":4563.843688677289,\\n\\t\\t\\t\\\"popularity\\\":1202.0806227144649,\\n\\t\\t\\t\\\"prodMult\\\":364.47082879886864,\\n\\t\\t\\t\\\"research\\\":9308.752559242022,\\n\\t\\t\\t\\\"lastCycleRevenue\\\":158621829.12606987,\\n\\t\\t\\t\\\"lastCycleExpenses\\\":31154768.700548045,\\n\\t\\t\\t\\\"thisCycleRevenue\\\":1585852176.325491,\\n\\t\\t\\t\\\"thisCycleExpenses\\\":311337116.3569713,\\n\\t\\t\\t\\\"upgrades\\\":[0,16],\\n\\t\\t\\t\\\"cities\\\":[\\\"Aevum\\\",\\\"Sector-12\\\"],\\n\\t\\t\\t\\\"products\\\":[]\\n\\t\\t}\\n\\t]\\n}\\n*/\\n\\n/*  WarehouseInfo\\n{\\n\\t\\\"level\\\":1,\\n\\t\\\"loc\\\":\\\"New Tokyo\\\",\\n\\t\\\"size\\\":100,\\n\\t\\\"sizeUsed\\\":0,\\n\\t\\\"smartSupplyEnabled\\\":true\\n}\\n*/\\n\\n/*  OfficeInfo\\n{\\n\\t\\\"loc\\\":\\\"Aevum\\\",\\n\\t\\\"size\\\":3,\\n\\t\\\"minEne\\\":0,\\n\\t\\\"maxEne\\\":100,\\n\\t\\\"minHap\\\":0,\\n\\t\\\"maxHap\\\":100,\\n\\t\\\"maxMor\\\":100,\\n\\t\\\"employees\\\":[],\\n\\t\\\"employeeProd\\\":{\\n\\t\\t\\\"Operations\\\":0,\\n\\t\\t\\\"Engineer\\\":0,\\n\\t\\t\\\"Business\\\":0,\\n\\t\\t\\\"Management\\\":0,\\n\\t\\t\\\"Research & Development\\\":0\\n\\t}\\n}\\n*/\",\"filename\":\"/bin/officeManager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/bin/officeManager.js\",\"url\":\"blob:file:///06699692-edca-4b75-9cc2-656e211265bb\",\"moduleSequenceNumber\":891187}],\"dependents\":[],\"ramUsage\":1024,\"server\":\"home\",\"moduleSequenceNumber\":65232,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"corporation\",\"cost\":1022.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const UNLOCKS = [\\n  `Export`,\\n  `Smart Supply`,\\n  `Market Research - Demand`,\\n  `Market Data - Competition`,\\n  `VeChain`,\\n  `Shady Accounting`,\\n  `Government Partnership`,\\n  `Warehouse API`,\\n  `Office API`,\\n];\\n\\nexport const UPGRADES = [\\n  `Smart Factories`,\\n  `Wilson Analytics`,\\n  `Neural Accelerators`,\\n  `Project Insight`,\\n  `Smart Storage`,\\n  `Nuoptimal Nootropic Injector Implants`,\\n  `FocusWires`,\\n  `DreamSense`,\\n  `Speech Processor Implants`,\\n  `ABC SalesBots`,\\n];\\n\\nexport const INDUSTRIES = [\\n  `Agriculture`,\\n  `Chemical`,\\n  `Computer`,\\n  `Energy`,\\n  `Fishing`,\\n  `Food`,\\n  `Healthcare`,\\n  `Mining`,\\n  `Pharmaceutical`,\\n  `RealEstate`,\\n  `Robotics`,\\n  `Software`,\\n  `Tobacco`,\\n  `utilities`,\\n];\\n\\nexport const CITIES = [\\n  `Aevum`,\\n  `Chongqing`,\\n  `New Tokyo`,\\n  `Ishima`,\\n  `Sector-12`,\\n  `Volhaven`,\\n];\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n  class Upgrade {\\n    constructor(name) { this.name = name; }\\n    buy() { return ns.corporation.levelUpgrade(this.name); }\\n    cost() { return ns.corporation.getUpgradeLevelCost(this.name); }\\n  }\\n  \\n  class AllUpgrades {\\n    constructor() {\\n      this.upgrades = [];\\n      this.MAXSPEND = 1e75;\\n      UPGRADES.forEach((name) => {\\n        this.upgrades.push(new Upgrade(name));\\n      });\\n    }\\n    buy() {}\\n  }\\n\\n  class Unlock {\\n    constructor(name) { this.name = name; }\\n    buy() { return ns.corporation.unlockUpgrade(this.name); }\\n    cost() { return ns.corporation.getUnlockUpgradeCost(this.name); }\\n    purchased() { return ns.corporation.hasUnlockUpgrade(this.name); }\\n  }\\n\\n  class AllUnlocks {\\n    constructor() {\\n      this.unlocks = [];\\n      UNLOCKS.forEach( (name) => {\\n        this.unlocks.push(new Unlock(name));\\n      });\\n    }\\n    buy() {}\\n  }\\n  await manageCorporation(ns);\\n}\\n\\nasync function manageCorporation(ns) {\\n  UNLOCKS.forEach((unlock) => {\\n    if (!haveUnlock(ns, unlock) && ns.getPlayer()['money'] > ns.corporation.getUnlockUpgradeCost(unlock)) {\\n      getUnlock(ns, unlock);\\n    }\\n  });\\n  UPGRADES.forEach((upgrade) => {\\n    while (ns.corporation.getUpgradeLevelCost(upgrade) < MAXSPEND) { ns.corporation.levelUpgrade(upgrade); }\\n  });\\n}\\n\\nasync function haveUnlock(ns, unlock) { return ns.corporation.hasUnlockUpgrade(unlock); }\\nasync function getUnlock(ns, unlock) {\\n  // void functions are so fun with regard to result checking\\n  ns.corporation.unlockUpgrade(unlock);\\n  // return something useful, e.g., whether the purchase succeeded\\n  return haveUnlock(ns, unlock);\\n}\",\"filename\":\"/bin/corporationManager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/bin/corporationManager.js\",\"url\":\"blob:file:///3683d39b-9cf3-4d43-88bd-bef00723cad2\",\"moduleSequenceNumber\":58743}],\"dependents\":[],\"ramUsage\":1024.5,\"server\":\"home\",\"moduleSequenceNumber\":65233,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"corporation\",\"cost\":1022.4},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getFolder, getServerPrefix } from 'import.js';\\n\\nconst TICK = 3 * 1000;\\n\\nlet maxServers;\\nlet servers;\\n\\n/*\\n * Purchases the best server available with the\\n * user's current money. If the server limit is\\n * reached, replaces the worst server. Repeatable.\\n */\\nexport async function main(ns) {\\n    // Default Values\\n    maxServers = ns.getPurchasedServerLimit();\\n    servers = ns.getPurchasedServers(true);\\n    serverInfo(ns);\\n    await buyServers(ns);\\n}\\n\\nfunction serverInfo(ns) {\\n    ns.tprint(`You have ${servers.length}/${maxServers} servers`);\\n    Object.entries(groupServers(ns)).map((ramServers) => {\\n        ns.tprint(`${ramServers[0]}GB: ${ramServers[1]}`);\\n    });\\n}\\n\\nfunction groupServers(ns) {\\n    let groupedServers = {};\\n    servers.forEach((server) => {\\n        let ram = ns.getServerRam(server)[0];\\n        groupedServers[ram] = groupedServers[ram] || [];\\n        groupedServers[ram].push(server);\\n    });\\n    return groupedServers;\\n}\\n\\nasync function buyServers(ns) {\\n    let ram = ns.getPurchasedServerMaxRam();\\n    let myMoney = ns.getServerMoneyAvailable('home');\\n    let cost = ns.getPurchasedServerCost(ram);\\n    let belowServerLimit = true;\\n    while (belowServerLimit) {\\n        while (cost > myMoney) { ns.sleep(TICK); }\\n        belowServerLimit = buyServer(ns, ram);\\n    }\\n}\\n\\nfunction buyServer(ns, ram) {\\n    if (servers.length == maxServers) {\\n        let success = removeWeakestServer(ns, ram);\\n        if (!success) { return false; }\\n    }\\n    let server = ns.purchaseServer(`${getServerPrefix()}-${ram}GB`, ram);\\n    servers.push(server);\\n    ns.tprint(`Purchased ${server}: ${ram}GB`);\\n    return true;\\n}\\n\\nfunction removeWeakestServer(ns, newRam) {\\n    let groupedServers = groupServers(ns);\\n    let min = Math.min(...Object.keys(groupedServers));\\n    if (min >= newRam) {\\n        ns.tprint(`Your smallest server has ${min}GB RAM and you wanted to purchase ${newRam}GB server`);\\n        return false;\\n    }\\n    let smallest_server = groupedServers[min][0];\\n    ns.killall(smallest_server);\\n    let result = ns.deleteServer(smallest_server);\\n    servers = ns.getPurchasedServers(true);\\n    return true;\\n}\\n\\n\\n// ================================================================================================= //\\n// ================================================================================================= //\\n// ================================================================================================= //\\n// ================================================================================================= //\\n// ================================================================================================= //\\nlet maxValueServers;\\nlet serverValue = 0;\\n\\n/* Identify servers worth more than $10 Billion,\\n * deploy the hack script and attack those servers\\n * using all purchased servers.\\n */\\nexport async function main(ns) {\\n    maxValueServers = {\\n        zero: [],\\n        million: [],\\n        billion: [],\\n        trillion: []\\n    };\\n    findServer(ns, 'home', 'home', checkValue);\\n    ns.run(`/${getFolder()}/remoteHack.js`, 1, highest(ns).join(','));\\n}\\n\\nfunction findServer(ns, startServer, targetServer, func) {\\n    let servers = ns.scan(targetServer, true).filter((server) => server !== startServer && !server.includes(getServerPrefix));\\n    if (!ns.hasRootAccess(targetServer)) { return false; }\\n    servers.forEach((server) => {\\n        func.call(this, ns, server);\\n        if (ns.hasRootAccess(server)) {\\n            findServer(ns, targetServer, server, func);\\n        }\\n    });\\n}\\n\\nfunction checkValue(ns, server) {\\n    if (!ns.hasRootAccess(server)) {\\n        return;\\n    }\\n    let serverMoney = ns.getServerMaxMoney(server);\\n    if (serverMoney > 1e12) {\\n        maxValueServers.trillion.push(server);\\n    } else if (serverMoney > 1e9) {\\n        maxValueServers.billion.push(server);\\n    } else if (serverMoney > 0) {\\n        maxValueServers.million.push(server);\\n    } else {\\n        maxValueServers.zero.push(server);\\n    }\\n}\\n\\nfunction highest(ns) {\\n    if (maxValueServers.trillion.length > 0) {\\n        return maxValueServers.trillion;\\n    }\\n    if (maxValueServers.billion.length > 0) {\\n        return maxValueServers.billion;\\n    }\\n    if (maxValueServers.million.length > 0) {\\n        return maxValueServers.million;\\n    }\\n}\",\"filename\":\"/wip/serverFarmManager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.4,\"server\":\"home\",\"moduleSequenceNumber\":65234,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nconst getProps = (obj) =>\\n\\tObject.entries(obj).find(entry => entry[0]?.startsWith(`__reactProps`))?.[1]?.children?.props;\\n\\nexport async function main(ns) {\\n\\tlet boxes = Array.from(eval(`document`).querySelectorAll(`[class*=MuiBox-root]`));\\n\\tlet props = boxes.map(box => getProps(box)).find(x => x?.player);\\n\\n\\tif (props) {\\n\\t\\t// show classname to use\\n\\t\\tlet className = boxes.find(x => getProps(x)?.player).className;\\n\\t\\tns.tprintf(`INFO className: ${className}`);\\n\\n\\t\\t// get some bonuses\\n\\t\\t//props.player.money = props.player.money * 1111;\\n\\t\\t//props.player.hacking_exp = props.player.hacking_exp * 1111;\\n\\n\\t\\t// open the dev menu\\n\\t\\t//props.router.toDevMenu();\\n\\n\\t\\t//props.player.karma = props.player.karma * 1000;\\n\\t}\\n}\",\"filename\":\"/bin/findProperties.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/bin/findProperties.js\",\"url\":\"blob:file:///9aaebec9-8b70-4845-9eaa-c3c454ecfcf1\",\"moduleSequenceNumber\":453357}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":65235,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst TICK = 10 * 1000;    // sleep millis\\n\\n\\tclass Program {\\n\\t\\tconstructor(name) { this.name = name; }\\n\\t\\tbuy() { return this.purchased() ? this.purchased() : ns.purchaseProgram(this.name); }\\n\\t\\tcost() { return ns.getDarkwebProgramCost(this.name); }\\n\\t\\tpurchased() { return (this.cost() === 0) ? true : false; }\\n\\t}\\n\\n\\tclass Tor {\\n\\t\\tconstructor() { this.name = 'tor'; }\\n\\t\\tbuy() { return ns.purchaseTor(); }\\n\\t}\\n\\n\\tclass AllPrograms {\\n\\t\\tconstructor() {\\n\\t\\t\\tthis.programs = [];\\n\\t\\t\\tfor (let name of ns.getDarkwebPrograms()) { this.programs.push(new Program(name)); }\\n\\t\\t}\\n\\t\\tasync buy() {\\n\\t\\t\\tfor (let program of this.programs.sort((a, b) => a.cost() - b.cost())) {\\n\\t\\t\\t\\twhile (!program.buy()) { await ns.sleep(TICK); }\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tns.disableLog('sleep');\\n\\tns.clearLog();\\n\\n\\tlet tor = new Tor();\\n\\twhile (!tor.buy()) { await ns.sleep(TICK); }\\n\\n\\tlet programs = new AllPrograms();\\n\\tawait programs.buy();\\n}\",\"filename\":\"/bin/tor.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/bin/tor.js\",\"url\":\"blob:file:///e277a70b-08c3-46ed-93d5-18a2a5433625\",\"moduleSequenceNumber\":62690}],\"dependents\":[],\"ramUsage\":9.1,\"server\":\"home\",\"moduleSequenceNumber\":65236,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"singularity.purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"singularity.getDarkwebProgramCost\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.purchaseTor\",\"cost\":2},{\"type\":\"fn\",\"name\":\"singularity.getDarkwebPrograms\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"stock.buy\",\"cost\":2.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// poor man's api reference\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tfunction list(obj, indent) {\\n\\t\\tfor (const key in obj) {\\n\\t\\t\\tns.tprintf(\\\"%s\\\", \\\"    \\\".repeat(indent) + key + \\\": \\\" + typeof obj[key]);\\n\\t\\t\\tif (typeof obj[key] == \\\"object\\\")\\n\\t\\t\\t\\tlist(obj[key], indent + 1);\\n\\t\\t}\\n\\t}\\n\\n\\t//list(ns, 0);\\n\\tlet n = 1;\\n\\tlist(Object.getPrototypeOf(n), 0);\\n}\",\"filename\":\"/sbin/apiref.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/sbin/apiref.js\",\"url\":\"blob:file:///5af0be85-3a44-49a9-83de-f7422084a895\",\"moduleSequenceNumber\":1554426}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":65237,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst TICK = 3 * 1000;    // sleep millis\\n\\tconst overclockLevelMax = 90;\\n\\n\\tclass BladeSkillLevel {\\n\\t\\tconstructor(name) {\\n\\t\\t\\tthis.name = name;\\n\\t\\t}\\n\\t\\tbuy() {\\n\\t\\t\\treturn ns.bladeburner.upgradeSkill(this.name);\\n\\t\\t}\\n\\t\\tcost() {\\n\\t\\t\\tif (this.name === 'Overclock' && this.level() >= overclockLevelMax) { return Infinity; }\\n\\t\\t\\treturn ns.bladeburner.getSkillUpgradeCost(this.name);\\n\\t\\t}\\n\\t\\tlevel() { return ns.bladeburner.getSkillLevel(this.name); }\\n\\t}\\n\\tclass AllBladeSkillLevels {\\n\\t\\tconstructor() {\\n\\t\\t\\tthis.levels = [];\\n\\t\\t\\tfor (let name of ns.bladeburner.getSkillNames()) { this.levels.push(new BladeSkillLevel(name)); }\\n\\t\\t}\\n\\t\\tasync buy() {\\n\\t\\t\\twhile (true) {\\n\\t\\t\\t\\tlet level = this.levels.sort((a, b) => a.cost() - b.cost())[0];\\n\\t\\t\\t\\twhile (!level.buy()) { await ns.sleep(TICK); }\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\tns.disableLog('sleep');\\n\\n\\tlet bladeSkillLevels = new AllBladeSkillLevels();\\n\\tawait bladeSkillLevels.buy();\\n}\",\"filename\":\"/bin/bladeSkillManager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/bin/bladeSkillManager.js\",\"url\":\"blob:file:///7acbd7a9-e5a4-484d-8aa5-dbf2988c75cb\",\"moduleSequenceNumber\":30092}],\"dependents\":[],\"ramUsage\":16.5,\"server\":\"home\",\"moduleSequenceNumber\":65238,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"bladeburner.upgradeSkill\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.getSkillUpgradeCost\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.getSkillLevel\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.getSkillNames\",\"cost\":0.4},{\"type\":\"fn\",\"name\":\"stock.buy\",\"cost\":2.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\n\\tclass Action {\\n\\t\\tconstructor(type, name) {\\n\\t\\t\\tthis.type = type;\\n\\t\\t\\tthis.name = name;\\n\\t\\t}\\n\\t\\tchances() {\\n\\t\\t\\tlet chances = ns.bladeburner.getActionEstimatedSuccessChance(this.type, this.name);\\n\\t\\t\\tlet high = chances[1];\\n\\t\\t\\tlet low = chances[0];\\n\\t\\t\\tlet spread = high - low;\\n\\t\\t\\tlet mean = spread / 2;\\n\\t\\t\\treturn {\\n\\t\\t\\t\\t'low': low,\\n\\t\\t\\t\\t'high': high,\\n\\t\\t\\t\\t'mean': mean,\\n\\t\\t\\t\\t'spread': spread,\\n\\t\\t\\t};\\n\\t\\t}\\n\\t\\tlevel() { return ns.bladeburner.getActionCurrentLevel(this.type, this.name); }\\n\\t\\tremaining() { return ns.bladeburner.getActionCountRemaining(this.type, this.name); }\\n\\t\\trepGain() { return ns.bladeburner.getActionRepGain(this.type, this.name, this.level()); }\\n\\t\\tstart() { return ns.bladeburner.startAction(this.type, this.name); }\\n\\t\\tstop() { return ns.bladeburner.stopBladeburnerAction(); }\\n\\t\\ttime() { return ns.bladeburner.getActionTime(this.type, this.name); }\\n\\t}\\n\\n}\\n\\n/*\\n\\ngetBonusTime()\\tGet bladeburner bonus time.\\ngetCity()\\tGet current city.\\nswitchCity(name)\\tTravel to another city in bladeburner.\\ngetCityChaos(name)\\tGet chaos of a city.\\ngetCityCommunities(name)\\tGet number of communities in a city.\\ngetCityEstimatedPopulation(name)\\tGet estimated population in city.\\n\\ngetCurrentAction()\\tGet current action.\\n\\ngetActionAutolevel(type, name)\\tGet whether an action is set to autolevel.\\n\\ngetActionMaxLevel(type, name)\\tGet the maximum level of an action.\\ngetActionRepGain(type, name, level)\\tGet the reputation gain of an action.\\ngetActionTime(type, name)\\tGet the time to complete an action.\\n\\nsetActionAutolevel(type, name, autoLevel)\\tSet an action autolevel.\\nsetActionLevel(type, name, level)\\tSet the level of an action.\\n\\ngetGeneralActionNames()\\tList all general actions.\\ngetContractNames()\\tList all contracts.\\ngetOperationNames()\\tList all operations.\\ngetBlackOpNames()\\tList all black ops.\\ngetBlackOpRank(name)\\tGet black op required rank.\\ngetRank()\\tGet player bladeburner rank.\\n\\ngetStamina()\\tGet bladeburner stamina.\\ngetTeamSize(type, name)\\tGet team size.\\n\\nsetTeamSize(type, name, size)\\tSet team size.\\n\\njoinBladeburnerDivision()\\tJoin the bladeburner division.\\njoinBladeburnerFaction()\\tJoin the bladeburner faction.\\ngetSkillLevel(name)\\tGet skill level.\\ngetSkillNames()\\tList all skills.\\ngetSkillPoints()\\tGet bladeburner skill points.\\ngetSkillUpgradeCost(name)\\tGet cost to upgrade skill.\\nupgradeSkill(name)\\tUpgrade skill.\\n\\n*/\",\"filename\":\"/wip/bladeActionManager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":27.6,\"server\":\"home\",\"moduleSequenceNumber\":65239,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"bladeburner.getActionEstimatedSuccessChance\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.getActionCurrentLevel\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.getActionCountRemaining\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.getActionRepGain\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.startAction\",\"cost\":4},{\"type\":\"fn\",\"name\":\"bladeburner.stopBladeburnerAction\",\"cost\":2},{\"type\":\"fn\",\"name\":\"bladeburner.getActionTime\",\"cost\":4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"class Node {\\n\\tconstructor(id) {\\n\\t\\tthis.id = id;\\n\\t\\tthis.core = {\\n\\t\\t\\tbuy(n=1) { return ns.hacknet.upgradeCore(this.id, n); }\\n\\t\\t\\tcost(n=1) { return ns.hacknet.getCoreUpgradeCost(this.id, n); }\\n\\t\\t};\\n\\t\\tthis.level = {\\n\\t\\t\\tbuy(n=1) { return ns.hacknet.upgradeLevel(this.id, n); }\\n\\t\\t\\tcost(n=1) { return ns.hacknet.getLevelUpgradeCost(this.id, n); }\\n\\t\\t}\\n\\t\\tthis.ram = {\\n\\t\\t\\tbuy(n=1) { return ns.hacknet.upgradeRam(this.id, n); }\\n\\t\\t\\tcost(n=1) { return ns.hacknet.getRamUpgradeCost(this.id, n); }\\n\\t\\t}\\n\\t}\\n\\tstats() { return ns.hacknet.getNodeStats(this.id); }\\n}\\n\\nclass Hacknet {\\n\\tconstructor() {\\n\\t\\tthis.nodes = [];\\n\\t\\tthis.servers = [];\\n\\t}\\n\\tbuyNode() { this.nodes.push(new Node(ns.hacknet.purchaseNode())); }\\n\\tbuyNodes() { }\\n\\tbuyServer() { }\\n\\tbuyServers() { ns.print(`Hacknet server functionality coming soon!`); }\\n\\tnodeCost() { return ns.hacknet.getPurchaseNodeCost(); }\\n}\\n\\n/*\\ngetCacheUpgradeCost(index, n)\\tCalculate the cost of upgrading hacknet node cache.\\nupgradeCache(index, n)\\t        Upgrade the cache of a hacknet node.\\n\\ngetCoreUpgradeCost(index, n)\\tCalculate the cost of upgrading hacknet node cores.\\nupgradeCore(index, n)\\t        Upgrade the core of a hacknet node.\\n\\ngetLevelUpgradeCost(index, n)\\tCalculate the cost of upgrading hacknet node levels.\\nupgradeLevel(index, n)\\t        Upgrade the level of a hacknet node.\\n\\ngetRamUpgradeCost(index, n)\\t    Calculate the cost of upgrading hacknet node RAM.\\nupgradeRam(index, n)\\t        Upgrade the RAM of a hacknet node.\\n\\n\\ngetHashUpgradeLevel(upgName)\\tGet the level of a hash upgrade.\\nhashCapacity()\\t                Get the maximum number of hashes you can store.\\nhashCost(upgName)\\t            Get the cost of a hash upgrade.\\ngetHashUpgrades()\\t            Get the list of hash upgrades\\nnumHashes()\\t                    Get the total number of hashes stored.\\nspendHashes(upgName, upgTarget)\\tPurchase a hash upgrade.\\n\\ngetStudyMult()\\t                Get the multiplier to study.\\ngetTrainingMult()\\t            Get the multiplier to training.\\n\\nmaxNumNodes()\\t                Get the maximum number of hacknet nodes.\\nnumNodes()\\t                    Get the number of hacknet nodes you own.\\npurchaseNode()\\t                Purchase a new hacknet node.\\n\\nProperty        Type    Description\\ncache           number  Cache level. Only applicable for Hacknet Servers\\ncores           number  Node's number of cores\\nhashCapacity    number  Hash Capacity provided by this Node. Only applicable for Hacknet Servers\\nlevel           number  Node's level\\nname            string  Node's name\\nproduction      number  Node's production per second\\nram             number  Node's RAM (GB)\\nramUsed         number  Node's used RAM (GB)\\ntimeOnline      number  Number of seconds since Node has been purchased\\ntotalProduction number  Total number of money Node has produced\\n\\n*/\",\"filename\":\"/lib/hacknet.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"CSEC\",\"moduleSequenceNumber\":65240,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tns.tprint(ns.bladeburner.getCurrentAction());\\n\\t\\tawait ns.sleep(3000);\\n\\t}\\n}\",\"filename\":\"/tmp/blade.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/tmp/blade.js\",\"url\":\"blob:file:///784fcc2c-d7ab-423f-a90b-ff3d0a5c7f5f\",\"moduleSequenceNumber\":108077}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"home\",\"moduleSequenceNumber\":65241,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"bladeburner.getCurrentAction\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.gang.createGang('NiteSec');\\n}\",\"filename\":\"gang.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"gang.js\",\"url\":\"blob:file:///c439b3f3-0272-435d-8d20-59d228920654\",\"moduleSequenceNumber\":114022}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"home\",\"moduleSequenceNumber\":65242,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.createGang\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function recursiveScan(ns, parent, server, target, route) {\\n    const children = ns.scan(server);\\n    for (let child of children) {\\n        if (parent == child) {\\n            continue;\\n        }\\n        if (child == target) {\\n            route.unshift(child);\\n            route.unshift(server);\\n            return true;\\n        }\\n\\n        if (recursiveScan(ns, server, child, target, route)) {\\n            route.unshift(server);\\n            return true;\\n        }\\n    }\\n    return false;\\n}\\n\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    let route = [];\\n    let server = args._[0];\\n    if (!server || args.help) {\\n        ns.tprint(\\\"This script helps you find a server on the network and shows you the path to get to it.\\\");\\n        ns.tprint(`Usage: run ${ns.getScriptName()} SERVER`);\\n        ns.tprint(\\\"Example:\\\");\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`);\\n        return;\\n    }\\n\\n    recursiveScan(ns, '', 'home', server, route);\\n    for (const i in route) {\\n        await ns.sleep(500);\\n        const extra = i > 0 ? \\\"└ \\\" : \\\"\\\";\\n        ns.tprint(`${\\\" \\\".repeat(i)}${extra}${route[i]}`);\\n    }\\n}\\n\\nexport function autocomplete(data, args) {\\n    return data.servers;\\n}\",\"filename\":\"/bin/find_server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/bin/find_server.js\",\"url\":\"blob:file:///502b2e34-0dd9-414b-850b-7148da50c607\",\"moduleSequenceNumber\":65037}],\"dependents\":[],\"ramUsage\":1.8,\"server\":\"home\",\"moduleSequenceNumber\":65243,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tconst data = ns.flags([\\n\\t\\t['faction', 'Sector-12'],\\n\\t\\t['work', 'Security Work'],\\n\\t\\t['focus', false],\\n\\t\\t['period', 10 * 1000],\\n\\t\\t['goal', 100],\\n\\t]);\\n\\tlet faction = data.faction;\\n\\tlet work = data.work;\\n\\tlet focus = data.focus;\\n\\tlet period = data.period;\\n\\tlet goal = data.goal;\\n\\n\\tfunction goalAchieved(skills, goal) {\\n\\t\\tlet player = ns.getPlayer();\\n\\t\\tlet achieved = true;\\n\\t\\tfor (let skill of skills) {\\n\\t\\t\\tachieved = achieved && player[skill] >= goal;\\n\\t\\t}\\n\\t\\treturn achieved;\\n\\t}\\n\\n\\tconst skillSets = {\\n\\t\\t'Hacking Contracts': ['hacking'],\\n\\t\\t'Field Work': ['hacking', 'strength', 'defense', 'dexterity', 'agility', 'charisma'],\\n\\t\\t'Security Work': ['hacking', 'strength', 'defense', 'dexterity', 'agility'],\\n\\t}\\n\\n\\tdo {\\n\\t\\tns.workForFaction(faction, work, focus);\\n\\t\\tawait ns.sleep(period);\\n\\t} while (!goalAchieved(skillSets[work], goal));\\n\\n\\tns.stopAction();\\n}\",\"filename\":\"/bin/hulk.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/bin/hulk.js\",\"url\":\"blob:file:///db0abed3-3899-49c2-8c7c-cf3f1247cce1\",\"moduleSequenceNumber\":63324}],\"dependents\":[],\"ramUsage\":6.1,\"server\":\"home\",\"moduleSequenceNumber\":65244,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.workForFaction\",\"cost\":3},{\"type\":\"fn\",\"name\":\"singularity.stopAction\",\"cost\":1}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":1,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"89.4.3.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":148.5,\"hackDifficulty\":148.5,\"minDifficulty\":50,\"moneyAvailable\":19166110302.5,\"moneyMax\":191661103025,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1169,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"91.9.9.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":148.5,\"hackDifficulty\":148.5,\"minDifficulty\":50,\"moneyAvailable\":27853291282.5,\"moneyMax\":278532912825,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1321,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"16.3.5.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":115.5,\"hackDifficulty\":115.5,\"minDifficulty\":39,\"moneyAvailable\":12013166376.5,\"moneyMax\":120131663765,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":915,\"serverGrowth\":60}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"88.8.1.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"kuai-gong\",\"megacorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":139.5,\"hackDifficulty\":139.5,\"minDifficulty\":47,\"moneyAvailable\":7351439947,\"moneyMax\":73514399470,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1067,\"serverGrowth\":60}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"73.7.1.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"kuai-gong\",\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":148.5,\"hackDifficulty\":148.5,\"minDifficulty\":50,\"moneyAvailable\":13188365464.5,\"moneyMax\":131883654645,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1274,\"serverGrowth\":94}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"23.5.1.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\",\"ecorp\",\"fulcrumassets\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":10816918930,\"moneyMax\":108169189300,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":955,\"serverGrowth\":65}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"16.5.6.7\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"stormtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":136.5,\"hackDifficulty\":136.5,\"minDifficulty\":46,\"moneyAvailable\":9718515041,\"moneyMax\":97185150410,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1014,\"serverGrowth\":99}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"21.3.7.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"vitalife\",\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":10329581788.5,\"moneyMax\":103295817885,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1186,\"serverGrowth\":96}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"92.3.8.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"fulcrumtech\",\"blade\",\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":147,\"hackDifficulty\":147,\"minDifficulty\":49,\"moneyAvailable\":12622938960.5,\"moneyMax\":126229389605,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1263,\"serverGrowth\":93}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"48.4.0.0\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"run4theh111z\",\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":138,\"hackDifficulty\":138,\"minDifficulty\":46,\"moneyAvailable\":711270120.5,\"moneyMax\":7112701205,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":951,\"serverGrowth\":87}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"90.6.0.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":148.5,\"hackDifficulty\":148.5,\"minDifficulty\":50,\"moneyAvailable\":500000,\"moneyMax\":5000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1557,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"5.6.3.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"microdyne\",\"omnitek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":117,\"hackDifficulty\":117,\"minDifficulty\":39,\"moneyAvailable\":596346094,\"moneyMax\":5963460940,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":906,\"serverGrowth\":79}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"41.6.6.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":127.5,\"hackDifficulty\":127.5,\"minDifficulty\":43,\"moneyAvailable\":465782380,\"moneyMax\":4657823800,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":857,\"serverGrowth\":61}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":false,\"ip\":\"6.9.0.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zeus-med\",\"microdyne\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":112.5,\"hackDifficulty\":112.5,\"minDifficulty\":38,\"moneyAvailable\":369275217,\"moneyMax\":3692752170,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":939,\"serverGrowth\":57}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":false,\"ip\":\"99.2.3.8\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"microdyne\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":127.5,\"hackDifficulty\":127.5,\"minDifficulty\":43,\"moneyAvailable\":370355361.5,\"moneyMax\":3703553615,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":883,\"serverGrowth\":72}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":false,\"ip\":\"83.4.9.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"run4theh111z\",\"4sigma\",\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":129,\"hackDifficulty\":129,\"minDifficulty\":43,\"moneyAvailable\":350892532.5,\"moneyMax\":3508925325,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":851,\"serverGrowth\":79}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":false,\"ip\":\"76.2.2.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\",\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":127.5,\"hackDifficulty\":127.5,\"minDifficulty\":43,\"moneyAvailable\":459626554,\"moneyMax\":4596265540,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":895,\"serverGrowth\":89}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"univ-energy\",\"httpPortOpen\":false,\"ip\":\"16.1.6.1\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\",\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":121.5,\"hackDifficulty\":121.5,\"minDifficulty\":41,\"moneyAvailable\":582836009.5,\"moneyMax\":5828360095,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":864,\"serverGrowth\":81}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":false,\"ip\":\"61.6.1.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":108,\"hackDifficulty\":108,\"minDifficulty\":36,\"moneyAvailable\":417435164,\"moneyMax\":4174351640,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":809,\"serverGrowth\":74}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":false,\"ip\":\"13.8.0.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"infocomm\",\"stormtech\",\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":97.5,\"hackDifficulty\":97.5,\"minDifficulty\":33,\"moneyAvailable\":338019211,\"moneyMax\":3380192110,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":807,\"serverGrowth\":84}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":false,\"ip\":\"92.1.5.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"solaris\",\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":105,\"hackDifficulty\":105,\"minDifficulty\":35,\"moneyAvailable\":447021533.5,\"moneyMax\":4470215335,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":903,\"serverGrowth\":77}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":false,\"ip\":\"53.8.2.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"rho-construction\",\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":378320885.5,\"moneyMax\":3783208855,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":853,\"serverGrowth\":77}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":false,\"ip\":\"55.6.5.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"rho-construction\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":135,\"hackDifficulty\":135,\"minDifficulty\":45,\"moneyAvailable\":591995840.5,\"moneyMax\":5919958405,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":920,\"serverGrowth\":59}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":false,\"ip\":\"22.5.6.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"snap-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":135,\"hackDifficulty\":135,\"minDifficulty\":45,\"moneyAvailable\":479968910,\"moneyMax\":4799689100,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":948,\"serverGrowth\":68}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-def\",\"httpPortOpen\":false,\"ip\":\"35.5.9.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"univ-energy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85.5,\"hackDifficulty\":85.5,\"minDifficulty\":29,\"moneyAvailable\":523849037,\"moneyMax\":5238490370,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":783,\"serverGrowth\":66}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":false,\"ip\":\"69.8.1.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":115.5,\"hackDifficulty\":115.5,\"minDifficulty\":39,\"moneyAvailable\":457516494.5,\"moneyMax\":4575164945,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":846,\"serverGrowth\":73}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":false,\"ip\":\"0.9.1.2\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\",\"taiyang-digital\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":118.5,\"hackDifficulty\":118.5,\"minDifficulty\":40,\"moneyAvailable\":422176262.5,\"moneyMax\":4221762625,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":792,\"serverGrowth\":75}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":false,\"ip\":\"0.4.7.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"galactic-cyber\",\"defcomm\",\"icarus\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":123,\"hackDifficulty\":123,\"minDifficulty\":41,\"moneyAvailable\":730016237.5,\"moneyMax\":7300162375,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":875,\"serverGrowth\":53}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"global-pharm\",\"httpPortOpen\":false,\"ip\":\"56.0.1.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"alpha-ent\",\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":112.5,\"hackDifficulty\":112.5,\"minDifficulty\":38,\"moneyAvailable\":847657285.5,\"moneyMax\":8476572855,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":764,\"serverGrowth\":89}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nova-med\",\"httpPortOpen\":false,\"ip\":\"21.0.4.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"icarus\",\"titan-labs\",\"applied-energetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":97.5,\"hackDifficulty\":97.5,\"minDifficulty\":33,\"moneyAvailable\":562815083.5,\"moneyMax\":5628150835,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":809,\"serverGrowth\":81}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":false,\"ip\":\"26.3.8.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\",\"infocomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":106.5,\"hackDifficulty\":106.5,\"minDifficulty\":36,\"moneyAvailable\":747888391.5,\"moneyMax\":7478883915,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":806,\"serverGrowth\":80}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"unitalife\",\"httpPortOpen\":false,\"ip\":\"33.5.2.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"global-pharm\",\"univ-energy\",\"solaris\",\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":112.5,\"hackDifficulty\":112.5,\"minDifficulty\":38,\"moneyAvailable\":546180238,\"moneyMax\":5461802380,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":809,\"serverGrowth\":76}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"lexo-corp\",\"httpPortOpen\":false,\"ip\":\"15.2.2.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"rothman-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":120,\"hackDifficulty\":120,\"minDifficulty\":40,\"moneyAvailable\":351026093.5,\"moneyMax\":3510260935,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":700,\"serverGrowth\":65}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"16.1.8.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"syscore\",\"galactic-cyber\",\"aerocorp\",\"snap-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":254048607.5,\"moneyMax\":2540486075,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":504,\"serverGrowth\":50}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"alpha-ent\",\"httpPortOpen\":false,\"ip\":\"11.5.5.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"I.I.I.I\",\"global-pharm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79.5,\"hackDifficulty\":79.5,\"minDifficulty\":27,\"moneyAvailable\":327078502.5,\"moneyMax\":3270785025,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":576,\"serverGrowth\":54}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aevum-police\",\"httpPortOpen\":false,\"ip\":\"74.4.2.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"rothman-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":111,\"hackDifficulty\":111,\"minDifficulty\":37,\"moneyAvailable\":173424006,\"moneyMax\":1734240060,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":445,\"serverGrowth\":48}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"86.9.0.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"crush-fitness\",\"lexo-corp\",\"aevum-police\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":123808450.5,\"moneyMax\":1238084505,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":428,\"serverGrowth\":41}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-institute\",\"httpPortOpen\":false,\"ip\":\"62.6.3.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":112.5,\"hackDifficulty\":112.5,\"minDifficulty\":38,\"moneyAvailable\":474237794.5,\"moneyMax\":4742377945,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":758,\"serverGrowth\":79}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"57.8.0.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70.5,\"hackDifficulty\":70.5,\"minDifficulty\":24,\"moneyAvailable\":156807142,\"moneyMax\":1568071420,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":437,\"serverGrowth\":60}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"syscore\",\"httpPortOpen\":false,\"ip\":\"96.3.7.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"avmnite-02h\",\"rho-construction\",\"millenium-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":106.5,\"hackDifficulty\":106.5,\"minDifficulty\":36,\"moneyAvailable\":255239568,\"moneyMax\":2552395680,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":553,\"serverGrowth\":66}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"67.4.6.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":97.5,\"hackDifficulty\":97.5,\"minDifficulty\":33,\"moneyAvailable\":202276694,\"moneyMax\":2022766940,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":434,\"serverGrowth\":41}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"53.4.4.9\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":67.5,\"hackDifficulty\":67.5,\"minDifficulty\":23,\"moneyAvailable\":76747155,\"moneyMax\":767471550,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":298,\"serverGrowth\":50}},\"computek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"computek\",\"httpPortOpen\":false,\"ip\":\"79.6.2.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"neo-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":94.5,\"hackDifficulty\":94.5,\"minDifficulty\":32,\"moneyAvailable\":118183013.5,\"moneyMax\":1181830135,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":371,\"serverGrowth\":52}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"3.0.9.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"silver-helix\",\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":111,\"hackDifficulty\":111,\"minDifficulty\":37,\"moneyAvailable\":137500000,\"moneyMax\":1375000000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":414,\"serverGrowth\":52}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"40.2.8.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":54,\"hackDifficulty\":54,\"minDifficulty\":18,\"moneyAvailable\":37810753,\"moneyMax\":378107530,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":274,\"serverGrowth\":51}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"18.1.9.0\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1.5,\"hackDifficulty\":1.5,\"minDifficulty\":1,\"moneyAvailable\":35000,\"moneyMax\":350000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"7.1.2.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":1000000,\"moneyMax\":10000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"62.6.9.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":1150000,\"moneyMax\":11500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"99.2.9.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":22.5,\"hackDifficulty\":22.5,\"minDifficulty\":8,\"moneyAvailable\":1250000,\"moneyMax\":12500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"12.8.6.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"iron-gym\",\"neo-net\",\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":37.5,\"hackDifficulty\":37.5,\"minDifficulty\":13,\"moneyAvailable\":3750000,\"moneyMax\":37500000,\"numOpenPortsRequired\":1,\"openPortCount\":0,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"49.6.9.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"sigma-cosmetics\",\"phantasy\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":1375000,\"moneyMax\":13750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"36.4.9.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zer0\",\"computek\",\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":37.5,\"hackDifficulty\":37.5,\"minDifficulty\":13,\"moneyAvailable\":2500000,\"moneyMax\":25000000,\"numOpenPortsRequired\":1,\"openPortCount\":0,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"85.9.0.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zer0\",\"netlink\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":45,\"hackDifficulty\":45,\"minDifficulty\":15,\"moneyAvailable\":22500000,\"moneyMax\":225000000,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"3.6.2.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":22.5,\"hackDifficulty\":22.5,\"minDifficulty\":8,\"moneyAvailable\":1500000,\"moneyMax\":15000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"60.8.5.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":22.5,\"hackDifficulty\":22.5,\"minDifficulty\":8,\"moneyAvailable\":2000000,\"moneyMax\":20000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"73.3.7.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nectar-net\",\"the-hub\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":12000000,\"moneyMax\":120000000,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"6.5.6.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"iron-gym\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":22.5,\"hackDifficulty\":22.5,\"minDifficulty\":8,\"moneyAvailable\":5000000,\"moneyMax\":50000000,\"numOpenPortsRequired\":1,\"openPortCount\":0,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"69.2.7.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nectar-net\",\"johnson-ortho\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":37.5,\"hackDifficulty\":37.5,\"minDifficulty\":13,\"moneyAvailable\":32581898,\"moneyMax\":325818980,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":207,\"serverGrowth\":32}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"34.9.2.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"neo-net\",\"rothman-uni\",\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":57,\"hackDifficulty\":57,\"minDifficulty\":19,\"moneyAvailable\":26847253,\"moneyMax\":268472530,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":234,\"serverGrowth\":28}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"4.7.9.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\",\"zer0\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":45,\"hackDifficulty\":45,\"minDifficulty\":15,\"moneyAvailable\":10000000,\"moneyMax\":100000000,\"numOpenPortsRequired\":1,\"openPortCount\":0,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"79.8.5.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"syscore\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":81,\"hackDifficulty\":81,\"minDifficulty\":27,\"moneyAvailable\":125000000,\"moneyMax\":1250000000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":516,\"serverGrowth\":40}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"51.5.9.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"4sigma\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":91.5,\"hackDifficulty\":91.5,\"minDifficulty\":31,\"moneyAvailable\":450000000,\"moneyMax\":4500000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1004,\"serverGrowth\":52}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"snap-fitness\",\"httpPortOpen\":false,\"ip\":\"23.1.1.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"rho-construction\",\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":225000000,\"moneyMax\":2250000000,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":764,\"serverGrowth\":41}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"run4theh111z\",\"httpPortOpen\":false,\"ip\":\"71.5.5.8\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"taiyang-digital\",\"fulcrumtech\",\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":530,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"55.2.9.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"netlink\",\"alpha-ent\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":363,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"52.5.1.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"phantasy\",\"zb-institute\",\"summit-uni\",\"syscore\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":213,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\".\",\"httpPortOpen\":false,\"ip\":\"28.6.8.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"vitalife\",\"b-and-a\",\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":512,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"32.9.9.5\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"harakiri-sushi\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":0,\"requiredHackingSkill\":52,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"8.9.1.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"12.9.9.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":6000,\"serverGrowth\":0}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"The Black Hand\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Black Hand\",\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":0.0091,\"isBanned\":false,\"isMember\":false,\"name\":\"NiteSec\",\"playerReputation\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"CashRoot Starter Kit\"],\"favor\":38.4591,\"isBanned\":false,\"isMember\":false,\"name\":\"Sector-12\",\"playerReputation\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\"],\"favor\":188.2204,\"isBanned\":false,\"isMember\":false,\"name\":\"Netburners\",\"playerReputation\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tian Di Hui\",\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"Neurotrainer I\"],\"favor\":0.01,\"isBanned\":false,\"isMember\":false,\"name\":\"CyberSec\",\"playerReputation\":0}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{\"goof\":\"run /sbin/goFundMe.js\",\"pwn\":\"run /bin/pwn.js\",\"bail\":\"run /sbin/goFundCorp.js\"}","GlobalAliasesSave":"{}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":100,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":20,\"DisableASCIIArt\":true,\"DisableHotkeys\":false,\"DisableTextEffects\":true,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":true,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxRecentScriptsCapacity\":50,\"MaxLogCapacity\":400,\"MaxPortCapacity\":64,\"MaxTerminalCapacity\":300,\"OwnedAugmentationsOrder\":0,\"PurchaseAugmentationsOrder\":2,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":true,\"SuppressFactionInvites\":true,\"SuppressMessages\":true,\"SuppressTravelConfirmation\":true,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":true,\"SuppressSavedGameToast\":false,\"SuppressAutosaveDisabledWarnings\":false,\"UseIEC60027_2\":true,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":14,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"theme\":{\"primarylight\":\"#0f0\",\"primary\":\"#0c0\",\"primarydark\":\"#090\",\"successlight\":\"#0f0\",\"success\":\"#0c0\",\"successdark\":\"#090\",\"errorlight\":\"#f00\",\"error\":\"#c00\",\"errordark\":\"#900\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":0,\"y\":0,\"opened\":true},\"EditorTheme\":{\"base\":\"vs-dark\",\"inherit\":true,\"common\":{\"accent\":\"B5CEA8\",\"bg\":\"1E1E1E\",\"fg\":\"D4D4D4\"},\"syntax\":{\"tag\":\"569CD6\",\"entity\":\"569CD6\",\"string\":\"CE9178\",\"regexp\":\"646695\",\"markup\":\"569CD6\",\"keyword\":\"569CD6\",\"comment\":\"6A9955\",\"constant\":\"569CD6\",\"error\":\"F44747\"},\"ui\":{\"line\":\"1E1E1E\",\"panel\":{\"bg\":\"252526\",\"selected\":\"252526\",\"border\":\"1E1E1E\"},\"selection\":{\"bg\":\"ADD6FF26\"}}}}","VersionSave":"15","AllGangsSave":"","LastExportBonus":"1651160030497","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}"}}